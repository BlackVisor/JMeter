<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="常用方法" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">//这个文件保持禁用，只是用来说明
log.info(&quot;****************&quot;++&quot;****************&quot;);
vars.get(&quot;&quot;);
vars.put(&quot;&quot;, &quot;&quot;);
vars.put(&quot;&quot;, vars.get(&quot;&quot;));

//用来调试java原生错误，因jmeter自带log过于简陋
try{

}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}

//offerplus这个jar包中的部分方法
Oujia oujia = new Oujia();
oujia.appEncrypt(string content, string appKey); //用于app的出参解密
oujia.webEncrypt(string content, string webKey); //用于web的入参解密
oujia.webDecrypt(string content, string webKey); //用于web的出参解密
oujia.saltyPwd(string content); //用于把明文密码加盐加密

JSONObject commonList = new JSONObject.parseObject(props.get(&quot;commonList&quot;));
oujia.randomImage(int i, commonList.getJSONArray(&quot;imageList&quot;)); //用于生成数量0&lt;n≤i的图片的字符串，commonList就是在常用参数那个文件里定义的
oujia.randomProduct(int i, commonList); //用于生成i个随机参数的产品


//生成随机字符
char chinese = (char) (19968 + (int) (Math.random() * (40869 - 19968 + 1)));
char japanese = (char) (2048 + (int) (Math.random() * (19968 - 2048 + 1)));
char korean = (char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1)));</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="定义常用参数" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;


//定义aes用的AppKey和WebKey
props.put(&quot;appKey&quot;, &quot;6mpQfK5BSzzOfrZ6&quot;);
props.put(&quot;webKey&quot;, &quot;viFZiOhDArcQTjkC&quot;);
//所有常用参数列表放在这个json里
JSONObject commonList = new JSONObject();

//把常用币种放进去
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
JSONArray currencyArray = new JSONArray();
for (String currency:currencyList) {
	currencyArray.add(currency);
}
commonList.put(&quot;currencyList&quot;, currencyArray);

//把所有sheet项放进去
String[] sheetList = {&quot;Warranty&quot;,&quot;CBM&quot;,&quot;Item No.&quot;,&quot;Colour&quot;,&quot;Material&quot;,&quot;Supply ability&quot;,&quot;Delivery time&quot;,&quot;Production time&quot;,&quot;Certification&quot;,&quot;Condition&quot;,&quot;Place of Origin&quot;,&quot;Terms&quot;,&quot;Pcs/box&quot;,&quot;Weight&quot;,&quot;Size&quot;,&quot;Packing&quot;};
JSONArray sheetArray = new JSONArray();
for (String sheet:sheetList) {
	JSONObject eachSheet = new JSONObject();
	eachSheet.put(&quot;sheetName&quot;, sheet);
	sheetArray.add(eachSheet);
}
commonList.put(&quot;sheetList&quot;, sheetArray);

//把所有priceTerm放进去
String[] priceTermList = {&quot;FOB&quot;, &quot;EXW&quot;, &quot;FAS&quot;, &quot;FCA&quot;, &quot;CFR&quot;, &quot;CPT&quot;, &quot;CIF&quot;, &quot;CIP&quot;, &quot;DES&quot;, &quot;DAF&quot;, &quot;DEQ&quot;, &quot;DDP&quot;, &quot;DDU&quot;};
JSONArray priceTermArray = new JSONArray();
for (String priceTerm:priceTermList) {
	priceTermArray.add(priceTerm);
}
commonList.put(&quot;priceTermList&quot;, priceTermArray);

//把所有unit放进去
String[] unitList = {&quot;PCS&quot;, &quot;Set&quot;, &quot;Box&quot;, &quot;Pal&quot;, &quot;Doz&quot;, &quot;Pack&quot;, &quot;Pair&quot;, &quot;20ft&quot;, &quot;40ft&quot;, &quot;40ftHQ&quot;, &quot;g&quot;, &quot;kg&quot;, &quot;t&quot;, &quot;lb&quot;, &quot;ml&quot;, &quot;mm&quot;, &quot;l&quot;, &quot;cm&quot;, &quot;m&quot;, &quot;Inch&quot;, &quot;m2&quot;, &quot;w&quot;, &quot;v&quot;, &quot;a&quot;};
JSONArray unitArray = new JSONArray();
for (String unit:unitList) {
	unitArray.add(unit);
}
commonList.put(&quot;unitList&quot;, unitArray);

//把所有paymentWay放进去
String[] paymentWayList = {&quot;T/T&quot;, &quot;L/C&quot;, &quot;D/P&quot;, &quot;Western Union&quot;, &quot;Money Gram&quot;};
JSONArray paymentWayArray = new JSONArray();
for (String paymentWay:paymentWayList) {
	paymentWayArray.add(paymentWay);
}
commonList.put(&quot;paymentWayList&quot;, paymentWayArray);

//把所有产品图片放进去
String[] imageList = {&quot;0026a683-93d9-41fc-9c71-540cc9110f90&quot;,&quot;003e3b9a-0977-4d58-b492-397792424482&quot;,&quot;00412efc-c20d-4d36-8f2a-2aca32fd9044&quot;,&quot;004898c0-a52f-4c88-8d85-387a4ddd1002&quot;,&quot;004c047d-13d0-4d83-b473-1dbd3a9946c1&quot;,&quot;00588ea5-fe2b-46dc-91bc-7b339b832230&quot;,&quot;005ae564-bd63-4e0e-be7d-cfa7d4cb6784&quot;,&quot;00749fb9-ff53-4aad-a769-177dc600ca33&quot;,&quot;0087d105-fe6c-486c-aa3e-da1c3e1b1264&quot;,&quot;00c571c6-575e-4c0f-9802-61d1b5992c93&quot;,&quot;00cf9d13-68f1-4a7c-a4c2-786a8bbf3d01&quot;,&quot;00f2bc5a-f1cc-4d79-ab66-f3d710f94ba0&quot;,&quot;010bb208-74a2-4646-92eb-464c38a623af&quot;,&quot;0128f51e-09f4-4cba-bda7-47662df91e0b&quot;,&quot;012ec868-6dff-45b5-bcea-f874a512c78b&quot;,&quot;0136ec2c-2325-48ab-a36d-87544480c284&quot;,&quot;0137fb2d-0116-4fd9-9b80-975b329b3a9a&quot;,&quot;0146df9b-8bc5-4804-989f-ab8f005711a7&quot;,&quot;01766464-194c-43d4-84b6-1d86ddf8f5ec&quot;,&quot;01a4c1d1-8663-4e2c-8030-41c66029a9a8&quot;,&quot;01ad954d-8574-4044-95a7-d58889e45160&quot;,&quot;01af3e27-096c-4d3d-8071-d78e8cdbf026&quot;,&quot;01d3f1df-0130-4957-bae3-231df5e83df8&quot;,&quot;01db2317-a68a-48b5-be2b-fbac4aa1715a&quot;,&quot;01edd2da-2337-4cc7-9087-34ccdc0a5df0&quot;,&quot;023fd0d9-88bd-4d57-a212-a3098100b7c8&quot;,&quot;02795747-736f-47d2-bf84-a9ad395a6c02&quot;,&quot;02921b20-05b6-4eae-bd91-e6a1cc9e9767&quot;,&quot;0293b4f8-5fe6-437c-a02a-8f1787ef596d&quot;,&quot;02b234eb-c2ae-4a62-8e7f-ca6d52a2f9c0&quot;,&quot;02c80463-7485-45f8-a055-2eaff49cde3c&quot;,&quot;02ce094d-d253-4fe9-816a-0765c1dd452d&quot;,&quot;03161402-744b-4f4a-b7c6-22660d836c88&quot;,&quot;0351147e-0d42-4a63-a071-a175c1585f49&quot;,&quot;0363b7e1-678a-4880-a1d0-85d9345d563e&quot;,&quot;03701dfe-1676-47ab-8ea8-c8945b0409fa&quot;,&quot;039c2870-d0ff-49dd-94f1-2229e478a175&quot;,&quot;03ad6588-a179-4492-a121-8882eaa7164a&quot;,&quot;03add517-7b9d-4d63-940b-0b2f6cfc9bfa&quot;,&quot;03ea9321-4c16-47b5-94ae-5bea8ae0056f&quot;,&quot;04193181-5e01-4935-a891-2e7d2012437e&quot;,&quot;04332850-f747-4bd2-a76b-5c004a4a3a39&quot;,&quot;0446bbd8-5f15-4a77-aa22-ca8e0ef12465&quot;,&quot;0455f339-33f3-4882-bb2a-81b035aa731f&quot;,&quot;04638e3a-b950-4ba7-b4a7-415f634ebd4b&quot;,&quot;046a54de-0039-4891-a051-70e61e37ea3c&quot;,&quot;2f34ae2e-a234-11e8-8e0f-206a8a7896d1&quot;, &quot;2f34ae2e-a234-11e8-8e0f-206a8a7896d1&quot;,&quot;300f4330-a234-11e8-84d3-206a8a7896d1&quot;,&quot;30386bd0-a234-11e8-b594-206a8a7896d1&quot;,&quot;30619802-a234-11e8-ba9d-206a8a7896d1&quot;,&quot;30a30c26-a234-11e8-b7c2-206a8a7896d1&quot;,&quot;30b495fe-a234-11e8-9384-206a8a7896d1&quot;,&quot;30c6ab40-a234-11e8-aaa8-206a8a7896d1&quot;,&quot;30d92be2-a234-11e8-a256-206a8a7896d1&quot;,&quot;310bb924-a234-11e8-991e-206a8a7896d1&quot;,&quot;311f95a4-a234-11e8-a1c2-206a8a7896d1&quot;,&quot;31371750-a234-11e8-a16a-206a8a7896d1&quot;,&quot;31498e8a-a234-11e8-8e5a-206a8a7896d1&quot;,&quot;31558668-a234-11e8-93c2-206a8a7896d1&quot;,&quot;3166b280-a234-11e8-ac88-206a8a7896d1&quot;,&quot;31756592-a234-11e8-8032-206a8a7896d1&quot;,&quot;31a41a00-a234-11e8-bbe1-206a8a7896d1&quot;,&quot;31b5c61c-a234-11e8-86d0-206a8a7896d1&quot;,&quot;32983f52-a234-11e8-84cd-206a8a7896d1&quot;,&quot;32b0dd10-a234-11e8-bc86-206a8a7896d1&quot;,&quot;32dea36c-a234-11e8-b517-206a8a7896d1&quot;,&quot;32f7cdac-a234-11e8-83ca-206a8a7896d1&quot;,&quot;334c5abe-a234-11e8-b7e8-206a8a7896d1&quot;,&quot;336d818a-a234-11e8-a966-206a8a7896d1&quot;,&quot;33780ee8-a234-11e8-9f00-206a8a7896d1&quot;,&quot;3385c758-a234-11e8-9ea3-206a8a7896d1&quot;,&quot;3391fa7a-a234-11e8-ab6d-206a8a7896d1&quot;,&quot;33a2b674-a234-11e8-ad45-206a8a7896d1&quot;,&quot;33b81548-a234-11e8-bd56-206a8a7896d1&quot;,&quot;33d38b40-a234-11e8-ada9-206a8a7896d1&quot;,&quot;33ec8d78-a234-11e8-9d3a-206a8a7896d1&quot;,&quot;340774fe-a234-11e8-87b3-206a8a7896d1&quot;,&quot;342776e8-a234-11e8-8538-206a8a7896d1&quot;,&quot;343b5514-a234-11e8-8583-206a8a7896d1&quot;,&quot;344da96e-a234-11e8-84e3-206a8a7896d1&quot;,&quot;345e743e-a234-11e8-95dc-206a8a7896d1&quot;,&quot;346c5e06-a234-11e8-9a4f-206a8a7896d1&quot;,&quot;34948e3e-a234-11e8-a9b1-206a8a7896d1&quot;,&quot;34be83ee-a234-11e8-8274-206a8a7896d1&quot;,&quot;34de6f40-a234-11e8-9d73-206a8a7896d1&quot;,&quot;34ede014-a234-11e8-b3f8-206a8a7896d1&quot;,&quot;35001886-a234-11e8-9ef4-206a8a7896d1&quot;,&quot;351dc224-a234-11e8-8473-206a8a7896d1&quot;,&quot;3547d522-a234-11e8-8986-206a8a7896d1&quot;,&quot;359d4d8a-a234-11e8-8565-206a8a7896d1&quot;,&quot;35c67f70-a234-11e8-bd04-206a8a7896d1&quot;,&quot;36cf2764-a234-11e8-b444-206a8a7896d1&quot;,&quot;377ba018-a234-11e8-9d65-206a8a7896d1&quot;,&quot;37b7ebb8-a234-11e8-85f6-206a8a7896d1&quot;,&quot;37d1ebe4-a234-11e8-bba2-206a8a7896d1&quot;,&quot;381ca926-a234-11e8-993c-206a8a7896d1&quot;,&quot;3865f242-a234-11e8-a00c-206a8a7896d1&quot;,&quot;387be44c-a234-11e8-849f-206a8a7896d1&quot;,&quot;389209dc-a234-11e8-8a85-206a8a7896d1&quot;,&quot;38c182b0-a234-11e8-9cbb-206a8a7896d1&quot;,&quot;38db6c62-a234-11e8-8052-206a8a7896d1&quot;,&quot;38f2b38c-a234-11e8-bbbf-206a8a7896d1&quot;,&quot;39156dbe-a234-11e8-bb3e-206a8a7896d1&quot;,&quot;39264cc6-a234-11e8-a915-206a8a7896d1&quot;,&quot;393b8734-a234-11e8-b2d4-206a8a7896d1&quot;,&quot;395a02a6-a234-11e8-8ea5-206a8a7896d1&quot;,&quot;39725ad0-a234-11e8-8aa6-206a8a7896d1&quot;,&quot;398df028-a234-11e8-b762-206a8a7896d1&quot;,&quot;399eb99e-a234-11e8-a902-206a8a7896d1&quot;,&quot;39af5e8a-a234-11e8-9282-206a8a7896d1&quot;,&quot;39be449e-a234-11e8-8402-206a8a7896d1&quot;,&quot;39e88b86-a234-11e8-8d22-206a8a7896d1&quot;,&quot;3a41fb78-a234-11e8-aa10-206a8a7896d1&quot;,&quot;3ab5ce90-a234-11e8-a54a-206a8a7896d1&quot;,&quot;3b3052f8-a234-11e8-b375-206a8a7896d1&quot;,&quot;3b46836e-a234-11e8-8065-206a8a7896d1&quot;,&quot;3bca1b6c-a234-11e8-bbc3-206a8a7896d1&quot;,&quot;3beb97b6-a234-11e8-876f-206a8a7896d1&quot;,&quot;3c1c65be-a234-11e8-8532-206a8a7896d1&quot;,&quot;3c4a386e-a234-11e8-9146-206a8a7896d1&quot;,&quot;3ca5b1b8-a234-11e8-8df6-206a8a7896d1&quot;,&quot;3cce2108-a234-11e8-9acf-206a8a7896d1&quot;,&quot;3cde4cb4-a234-11e8-b283-206a8a7896d1&quot;,&quot;3cf39c7e-a234-11e8-b5ec-206a8a7896d1&quot;,&quot;3d1a777a-a234-11e8-9c1d-206a8a7896d1&quot;,&quot;3d30b4f0-a234-11e8-8988-206a8a7896d1&quot;,&quot;3d609726-a234-11e8-9434-206a8a7896d1&quot;,&quot;3dbc98de-a234-11e8-9665-206a8a7896d1&quot;,&quot;3ddab7c6-a234-11e8-933c-206a8a7896d1&quot;,&quot;3dff560c-a234-11e8-9a56-206a8a7896d1&quot;,&quot;3e2686cc-a234-11e8-bb5c-206a8a7896d1&quot;,&quot;3e55c96e-a234-11e8-9657-206a8a7896d1&quot;,&quot;3ea0ed78-a234-11e8-a881-206a8a7896d1&quot;,&quot;3eb2c7a6-a234-11e8-9fa8-206a8a7896d1&quot;,&quot;3ec3f49c-a234-11e8-a4a9-206a8a7896d1&quot;,&quot;3edd497e-a234-11e8-9324-206a8a7896d1&quot;,&quot;3efd4b24-a234-11e8-bc0a-206a8a7896d1&quot;,&quot;3f46cf2e-a234-11e8-9959-206a8a7896d1&quot;,&quot;3f6da09e-a234-11e8-8a4f-206a8a7896d1&quot;,&quot;3f8c20e6-a234-11e8-9428-206a8a7896d1&quot;,&quot;3fb4c6a6-a234-11e8-9008-206a8a7896d1&quot;,&quot;3fcbb908-a234-11e8-ac1c-206a8a7896d1&quot;,&quot;3fe0a9f0-a234-11e8-a547-206a8a7896d1&quot;,&quot;401b8a38-a234-11e8-aec6-206a8a7896d1&quot;,&quot;406018cc-a234-11e8-86fa-206a8a7896d1&quot;,&quot;40d7d82c-a234-11e8-b010-206a8a7896d1&quot;,&quot;40fbdb5e-a234-11e8-a786-206a8a7896d1&quot;,&quot;4139b2d2-a234-11e8-83af-206a8a7896d1&quot;,&quot;4175eaa8-a234-11e8-80de-206a8a7896d1&quot;,&quot;41af1b30-a234-11e8-b999-206a8a7896d1&quot;,&quot;41cbf980-a234-11e8-8d75-206a8a7896d1&quot;,&quot;41fc244a-a234-11e8-83ff-206a8a7896d1&quot;,&quot;422e38c6-a234-11e8-9f32-206a8a7896d1&quot;,&quot;42c86a26-a234-11e8-a070-206a8a7896d1&quot;,&quot;42df89fe-a234-11e8-90e6-206a8a7896d1&quot;,&quot;42eb1522-a234-11e8-ba58-206a8a7896d1&quot;,&quot;4314b1a6-a234-11e8-a5b7-206a8a7896d1&quot;,&quot;431d6b30-a234-11e8-b90e-206a8a7896d1&quot;,&quot;433a736e-a234-11e8-9d13-206a8a7896d1&quot;,&quot;43696352-a234-11e8-bf9c-206a8a7896d1&quot;,&quot;43a2fec8-a234-11e8-891a-206a8a7896d1&quot;,&quot;43c5441c-a234-11e8-ae05-206a8a7896d1&quot;,&quot;43dd88a2-a234-11e8-9a8f-206a8a7896d1&quot;,&quot;43f49c54-a234-11e8-884f-206a8a7896d1&quot;,&quot;44131f12-a234-11e8-b912-206a8a7896d1&quot;,&quot;4442b0a2-a234-11e8-8d42-206a8a7896d1&quot;,&quot;4466102e-a234-11e8-ac94-206a8a7896d1&quot;,&quot;448cd340-a234-11e8-8afc-206a8a7896d1&quot;,&quot;44b85122-a234-11e8-b068-206a8a7896d1&quot;,&quot;44cc5782-a234-11e8-b71a-206a8a7896d1&quot;,&quot;44e068d8-a234-11e8-98a1-206a8a7896d1&quot;,&quot;44f7de58-a234-11e8-a241-206a8a7896d1&quot;,&quot;451d9fba-a234-11e8-8ff5-206a8a7896d1&quot;,&quot;454bce38-a234-11e8-8dff-206a8a7896d1&quot;,&quot;469c2f76-a234-11e8-8426-206a8a7896d1&quot;,&quot;476b05a8-a234-11e8-85a6-206a8a7896d1&quot;,&quot;47853564-a234-11e8-a216-206a8a7896d1&quot;,&quot;47ce1998-a234-11e8-ad3d-206a8a7896d1&quot;,&quot;47e08648-a234-11e8-bcb1-206a8a7896d1&quot;,&quot;485c1994-a234-11e8-900c-206a8a7896d1&quot;,&quot;48824878-a234-11e8-b13e-206a8a7896d1&quot;,&quot;48b18b1e-a234-11e8-8512-206a8a7896d1&quot;,&quot;48e1d928-a234-11e8-b4a0-206a8a7896d1&quot;,&quot;49009ffa-a234-11e8-8ac1-206a8a7896d1&quot;,&quot;4920f30a-a234-11e8-a48a-206a8a7896d1&quot;,&quot;4953f686-a234-11e8-a12f-206a8a7896d1&quot;,&quot;49629278-a234-11e8-98cf-206a8a7896d1&quot;,&quot;498299e6-a234-11e8-b8c9-206a8a7896d1&quot;,&quot;49b2705a-a234-11e8-8ce6-206a8a7896d1&quot;,&quot;49cbdfb8-a234-11e8-9f6b-206a8a7896d1&quot;,&quot;49d9914c-a234-11e8-8318-206a8a7896d1&quot;,&quot;49eeec3e-a234-11e8-a9ae-206a8a7896d1&quot;,&quot;4a0ed3e6-a234-11e8-ae97-206a8a7896d1&quot;,&quot;4a2149f6-a234-11e8-a158-206a8a7896d1&quot;,&quot;4a3d4612-a234-11e8-84cb-206a8a7896d1&quot;,&quot;4a477822-a234-11e8-828a-206a8a7896d1&quot;,&quot;4a7cd5e6-a234-11e8-a36a-206a8a7896d1&quot;,&quot;4a85fdd4-a234-11e8-b715-206a8a7896d1&quot;,&quot;4a9844e6-a234-11e8-887b-206a8a7896d1&quot;,&quot;4aae4722-a234-11e8-a8f6-206a8a7896d1&quot;,&quot;4abe769c-a234-11e8-bae9-206a8a7896d1&quot;,&quot;4acf3b5a-a234-11e8-8a20-206a8a7896d1&quot;,&quot;4ade7568-a234-11e8-b18a-206a8a7896d1&quot;,&quot;4aedc1d4-a234-11e8-91d8-206a8a7896d1&quot;,&quot;4afe86f4-a234-11e8-8f3d-206a8a7896d1&quot;};
JSONArray imageArray = new JSONArray();
for (String image:imageList) {
	imageArray.add(image);
}
commonList.put(&quot;imageList&quot;, imageArray);

//把所有头像放进去
String[] headImageList = {&quot;2066c008-8d77-11e8-836c-206a8a7896d1&quot;,&quot;20e32050-8d77-11e8-89c5-206a8a7896d1&quot;,&quot;20e7f9cc-8d77-11e8-abf9-206a8a7896d1&quot;,&quot;20ee6a42-8d77-11e8-bb55-206a8a7896d1&quot;,&quot;20f55a10-8d77-11e8-b4b5-206a8a7896d1&quot;,&quot;20fab800-8d77-11e8-b22c-206a8a7896d1&quot;,&quot;2101ac74-8d77-11e8-8a66-206a8a7896d1&quot;,&quot;2106cc24-8d77-11e8-97b5-206a8a7896d1&quot;,&quot;210ff72c-8d77-11e8-9824-206a8a7896d1&quot;,&quot;2116f9ec-8d77-11e8-93b2-206a8a7896d1&quot;,&quot;215dc398-8d77-11e8-8111-206a8a7896d1&quot;,&quot;21680fda-8d77-11e8-a045-206a8a7896d1&quot;,&quot;21acfe94-8d77-11e8-bf72-206a8a7896d1&quot;,&quot;21b70690-8d77-11e8-a16c-206a8a7896d1&quot;,&quot;21bd3b5c-8d77-11e8-b98d-206a8a7896d1&quot;,&quot;21c46624-8d77-11e8-b31b-206a8a7896d1&quot;,&quot;21cb95a8-8d77-11e8-a79e-206a8a7896d1&quot;,&quot;21d15b18-8d77-11e8-9e41-206a8a7896d1&quot;,&quot;21d7ce40-8d77-11e8-bab9-206a8a7896d1&quot;,&quot;21dd91f0-8d77-11e8-9234-206a8a7896d1&quot;,&quot;21e42dae-8d77-11e8-90a8-206a8a7896d1&quot;,&quot;21ea2b38-8d77-11e8-9caf-206a8a7896d1&quot;,&quot;21efec9a-8d77-11e8-87be-206a8a7896d1&quot;,&quot;21fc784a-8d77-11e8-8059-206a8a7896d1&quot;,&quot;2202550a-8d77-11e8-9314-206a8a7896d1&quot;,&quot;2209a546-8d77-11e8-8788-206a8a7896d1&quot;,&quot;220ec836-8d77-11e8-8e5b-206a8a7896d1&quot;,&quot;2214870c-8d77-11e8-bc0e-206a8a7896d1&quot;,&quot;221bee64-8d77-11e8-a34c-206a8a7896d1&quot;,&quot;2222c65c-8d77-11e8-8559-206a8a7896d1&quot;,&quot;222b241a-8d77-11e8-ab06-206a8a7896d1&quot;,&quot;22314a54-8d77-11e8-b760-206a8a7896d1&quot;,&quot;22397ad0-8d77-11e8-81e5-206a8a7896d1&quot;,&quot;22407810-8d77-11e8-9278-206a8a7896d1&quot;,&quot;22469454-8d77-11e8-ac82-206a8a7896d1&quot;,&quot;2277b870-8d77-11e8-ae4e-206a8a7896d1&quot;,&quot;227dd6dc-8d77-11e8-8629-206a8a7896d1&quot;,&quot;22840cd4-8d77-11e8-a3b7-206a8a7896d1&quot;,&quot;229775de-8d77-11e8-a141-206a8a7896d1&quot;,&quot;229f63b0-8d77-11e8-9846-206a8a7896d1&quot;,&quot;22a60776-8d77-11e8-b6ca-206a8a7896d1&quot;,&quot;22da966c-8d77-11e8-bb9c-206a8a7896d1&quot;,&quot;22e18a6c-8d77-11e8-b9e2-206a8a7896d1&quot;,&quot;22e89c80-8d77-11e8-bb4f-206a8a7896d1&quot;,&quot;231660ec-8d77-11e8-a93c-206a8a7896d1&quot;,&quot;231dc5e2-8d77-11e8-a2ec-206a8a7896d1&quot;,&quot;2325835c-8d77-11e8-b051-206a8a7896d1&quot;,&quot;232be686-8d77-11e8-9c2b-206a8a7896d1&quot;,&quot;2331dd30-8d77-11e8-91f3-206a8a7896d1&quot;,&quot;23393ddc-8d77-11e8-95cf-206a8a7896d1&quot;,&quot;233f5098-8d77-11e8-a056-206a8a7896d1&quot;,&quot;23479850-8d77-11e8-beb1-206a8a7896d1&quot;,&quot;234e9438-8d77-11e8-b57a-206a8a7896d1&quot;,&quot;2354b7a8-8d77-11e8-a5a3-206a8a7896d1&quot;,&quot;235acdb4-8d77-11e8-ae1b-206a8a7896d1&quot;,&quot;2360f57e-8d77-11e8-a62f-206a8a7896d1&quot;,&quot;23679ba8-8d77-11e8-81ca-206a8a7896d1&quot;,&quot;236edd2c-8d77-11e8-9f78-206a8a7896d1&quot;,&quot;2374fc82-8d77-11e8-bfdb-206a8a7896d1&quot;,&quot;237b99d4-8d77-11e8-9a6a-206a8a7896d1&quot;,&quot;23813f7e-8d77-11e8-8581-206a8a7896d1&quot;,&quot;23896518-8d77-11e8-a976-206a8a7896d1&quot;,&quot;239f62e6-8d77-11e8-b4cc-206a8a7896d1&quot;,&quot;23a64026-8d77-11e8-aebb-206a8a7896d1&quot;,&quot;23f225b4-8d77-11e8-9316-206a8a7896d1&quot;,&quot;23ff64fe-8d77-11e8-b326-206a8a7896d1&quot;,&quot;24077f3e-8d77-11e8-99ec-206a8a7896d1&quot;,&quot;240d6546-8d77-11e8-a101-206a8a7896d1&quot;,&quot;2416902c-8d77-11e8-b7df-206a8a7896d1&quot;,&quot;241d3c36-8d77-11e8-a716-206a8a7896d1&quot;,&quot;246d6e88-8d77-11e8-95d8-206a8a7896d1&quot;,&quot;24b2cfee-8d77-11e8-a077-206a8a7896d1&quot;,&quot;24be9082-8d77-11e8-bf66-206a8a7896d1&quot;,&quot;24c90b6e-8d77-11e8-9286-206a8a7896d1&quot;,&quot;24d72cae-8d77-11e8-ad95-206a8a7896d1&quot;,&quot;24e18136-8d77-11e8-9644-206a8a7896d1&quot;,&quot;24e9abc2-8d77-11e8-bb22-206a8a7896d1&quot;,&quot;24f481a2-8d77-11e8-a68f-206a8a7896d1&quot;,&quot;24fd8a9e-8d77-11e8-9cfe-206a8a7896d1&quot;,&quot;2547c1e4-8d77-11e8-a599-206a8a7896d1&quot;,&quot;2555723e-8d77-11e8-83d4-206a8a7896d1&quot;,&quot;255ea8b0-8d77-11e8-a52a-206a8a7896d1&quot;,&quot;2570d288-8d77-11e8-b7e2-206a8a7896d1&quot;,&quot;25c08078-8d77-11e8-8a8a-206a8a7896d1&quot;,&quot;260f9ac0-8d77-11e8-a9a1-206a8a7896d1&quot;,&quot;261ee29a-8d77-11e8-a5af-206a8a7896d1&quot;,&quot;26374880-8d77-11e8-9d2a-206a8a7896d1&quot;,&quot;2640758c-8d77-11e8-9ce3-206a8a7896d1&quot;,&quot;26498324-8d77-11e8-b320-206a8a7896d1&quot;,&quot;265362d4-8d77-11e8-8ad0-206a8a7896d1&quot;,&quot;2660bca8-8d77-11e8-8b4b-206a8a7896d1&quot;,&quot;26ae2612-8d77-11e8-881b-206a8a7896d1&quot;,&quot;26b62688-8d77-11e8-a5da-206a8a7896d1&quot;,&quot;26c0879a-8d77-11e8-a687-206a8a7896d1&quot;,&quot;26faa7c0-8d77-11e8-9d34-206a8a7896d1&quot;,&quot;270822a2-8d77-11e8-b94e-206a8a7896d1&quot;,&quot;2715cdca-8d77-11e8-a7ef-206a8a7896d1&quot;,&quot;271ea326-8d77-11e8-9127-206a8a7896d1&quot;,&quot;2726dbd8-8d77-11e8-865b-206a8a7896d1&quot;,&quot;2731cf7a-8d77-11e8-be67-206a8a7896d1&quot;,&quot;273b398c-8d77-11e8-ba6d-206a8a7896d1&quot;,&quot;27483210-8d77-11e8-a2d6-206a8a7896d1&quot;,&quot;274cdffe-8d77-11e8-b360-206a8a7896d1&quot;,&quot;27562798-8d77-11e8-b442-206a8a7896d1&quot;,&quot;275f4954-8d77-11e8-81de-206a8a7896d1&quot;,&quot;276620fa-8d77-11e8-9c1d-206a8a7896d1&quot;,&quot;276b7a86-8d77-11e8-8587-206a8a7896d1&quot;,&quot;2773ad5e-8d77-11e8-8f0f-206a8a7896d1&quot;,&quot;27bad738-8d77-11e8-a3fc-206a8a7896d1&quot;,&quot;27c5b070-8d77-11e8-91e4-206a8a7896d1&quot;,&quot;27cd4dd0-8d77-11e8-9f4a-206a8a7896d1&quot;,&quot;27d4fb08-8d77-11e8-b749-206a8a7896d1&quot;,&quot;27dc895c-8d77-11e8-b11a-206a8a7896d1&quot;,&quot;27e435e2-8d77-11e8-bce2-206a8a7896d1&quot;,&quot;27ea4f30-8d77-11e8-bec8-206a8a7896d1&quot;,&quot;27f1c29c-8d77-11e8-baae-206a8a7896d1&quot;,&quot;27f7ccd0-8d77-11e8-8a40-206a8a7896d1&quot;,&quot;2839ca48-8d77-11e8-9e7b-206a8a7896d1&quot;,&quot;2842d01a-8d77-11e8-bf4e-206a8a7896d1&quot;,&quot;284a4682-8d77-11e8-8939-206a8a7896d1&quot;,&quot;28755de8-8d77-11e8-9bab-206a8a7896d1&quot;,&quot;28a79d86-8d77-11e8-99ec-206a8a7896d1&quot;,&quot;28ae0c12-8d77-11e8-ac0a-206a8a7896d1&quot;,&quot;28b271ca-8d77-11e8-9588-206a8a7896d1&quot;,&quot;28b80cc2-8d77-11e8-8f54-206a8a7896d1&quot;,&quot;28bee7b4-8d77-11e8-9942-206a8a7896d1&quot;,&quot;2902ecc6-8d77-11e8-b0be-206a8a7896d1&quot;,&quot;290bf2c8-8d77-11e8-934c-206a8a7896d1&quot;,&quot;291e4464-8d77-11e8-a408-206a8a7896d1&quot;,&quot;292534a2-8d77-11e8-9458-206a8a7896d1&quot;,&quot;292cac10-8d77-11e8-81cf-206a8a7896d1&quot;,&quot;2975b598-8d77-11e8-bfac-206a8a7896d1&quot;,&quot;29b4640c-8d77-11e8-9388-206a8a7896d1&quot;,&quot;29eb8b6c-8d77-11e8-ab00-206a8a7896d1&quot;,&quot;2a371b42-8d77-11e8-900b-206a8a7896d1&quot;,&quot;2a3ef10a-8d77-11e8-b96a-206a8a7896d1&quot;,&quot;2a4661b8-8d77-11e8-96b1-206a8a7896d1&quot;,&quot;2a4c6ac6-8d77-11e8-9890-206a8a7896d1&quot;,&quot;2a529662-8d77-11e8-83ce-206a8a7896d1&quot;,&quot;2a589fa2-8d77-11e8-840f-206a8a7896d1&quot;,&quot;2aa3a386-8d77-11e8-ba8d-206a8a7896d1&quot;,&quot;2aadbe0a-8d77-11e8-8b3f-206a8a7896d1&quot;,&quot;2ab90b22-8d77-11e8-af7c-206a8a7896d1&quot;,&quot;2ac084e8-8d77-11e8-b150-206a8a7896d1&quot;,&quot;2ac5c914-8d77-11e8-81ef-206a8a7896d1&quot;,&quot;2acbec1c-8d77-11e8-b5e1-206a8a7896d1&quot;,&quot;2ad13ee8-8d77-11e8-945b-206a8a7896d1&quot;,&quot;2ad6004a-8d77-11e8-902f-206a8a7896d1&quot;,&quot;2add7410-8d77-11e8-b849-206a8a7896d1&quot;};
JSONArray headImageArray = new JSONArray();
for (String headImage:headImageList) {
	headImageArray.add(headImage);
}
commonList.put(&quot;headImageList&quot;, headImageArray);

//把commonList这个json放到jmeter的props中方便全局调用
props.put(&quot;commonList&quot;, commonList.toJSONString());
//log.info(&quot;****************&quot;+props.get(&quot;commonList&quot;));</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="代理到本地Fiddler" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.proxyHost">127.0.0.1</stringProp>
        <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局参数配置" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">hzdev.offerplus.com</stringProp>
            <stringProp name="Argument.desc">外网Tomcat IP</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">82</stringProp>
            <stringProp name="Argument.desc">外网Tomcat 端口</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">offerplus</stringProp>
            <stringProp name="Argument.desc">项目路径，APP的是offerplus</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="packageName" elementType="Argument">
            <stringProp name="Argument.name">packageName</stringProp>
            <stringProp name="Argument.value">com.oujia.offerplus</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">包名，默认安卓</stringProp>
          </elementProp>
          <elementProp name="appType" elementType="Argument">
            <stringProp name="Argument.name">appType</stringProp>
            <stringProp name="Argument.value">A</stringProp>
            <stringProp name="Argument.desc">手机阵营，默认安卓</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version" elementType="Argument">
            <stringProp name="Argument.name">version</stringProp>
            <stringProp name="Argument.value">1.1.6</stringProp>
            <stringProp name="Argument.desc">APP版本，目前1.1.6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="languagePack" elementType="Argument">
            <stringProp name="Argument.name">languagePack</stringProp>
            <stringProp name="Argument.value">languagePack</stringProp>
            <stringProp name="Argument.desc">语言，默认中文</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source" elementType="Argument">
            <stringProp name="Argument.name">source</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">APP下载地址，1=谷歌商店</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isEncrypt" elementType="Argument">
            <stringProp name="Argument.name">isEncrypt</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.desc">是否开启加密，布尔值</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userId" elementType="Argument">
            <stringProp name="Argument.name">userId</stringProp>
            <stringProp name="Argument.value">1001240</stringProp>
            <stringProp name="Argument.desc">单用户时的userId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">单用户时使用，多用户时禁用这个并启用CSV</stringProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySQL配置" enabled="true">
        <stringProp name="dataSource">DB</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://hzdev.offerplus.com:3306/cn_offerplus</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">root</stringProp>
        <stringProp name="password">R7evMxOvLX</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV(压测用)" enabled="false">
        <stringProp name="filename">config.csv</stringProp>
        <stringProp name="fileEncoding">utf-8</stringProp>
        <stringProp name="variableNames">userId,packageName,appType,version,languagePack,source,isEncrypt,path</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en,zh</stringProp>
          </elementProp>
          <elementProp name="Connection" elementType="Header">
            <stringProp name="Header.name">Connection</stringProp>
            <stringProp name="Header.value">close</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Apache-HttpClient/4.2.5 (java 1.5)</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组：APP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1522115682000</longProp>
        <longProp name="ThreadGroup.end_time">1522115682000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Product" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录用户" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;userId&quot;));
log.info(&quot;****************用户：&quot;+vars.get(&quot;userId&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="随机取好友" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取好友分组" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.tagList</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友分组" enabled="true">
                <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		JSONArray temp = new JSONArray();
		for(int i=0; i&lt;response.size(); i++){
			if(response.getJSONObject(i).getInteger(&quot;tagNum&quot;).intValue()&gt;0 &amp;&amp; !response.getJSONObject(i).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)) 
				temp.add(response.getJSONObject(i));
		}
		if(temp.size()&gt;0){
			int num = random.nextInt(temp.size());
			Integer chosenUserTag = temp.getJSONObject(num).getInteger(&quot;tagId&quot;);
			vars.put(&quot;chosenUserTag&quot;, String.valueOf(chosenUserTag));
			log.info(&quot;****************获取の好友分组=&quot;+temp.getJSONObject(num).getString(&quot;tagName&quot;)+&quot;****************&quot;);
		}else{
			log.info(&quot;****************此人没有好友****************&quot;);
		}
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="随机取组里好友" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/queryUserTagDetail.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenFriend</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;tagId&quot;, vars.get(&quot;chosenUserTag&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		vars.put(&quot;chosenFriend&quot;, response.getJSONObject(num).getInteger(&quot;contactUserId&quot;).toString());
		log.info(&quot;****************获取の好友=&quot;+response.getJSONObject(num).getString(&quot;userName&quot;)+&quot;****************&quot;);
	}else{
		vars.put(&quot;chosenFriend&quot;, &quot;-1&quot;);
		log.info(&quot;****************这个好友分组里并没有人****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="随机取自定义人" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/customList.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">chosenCustom</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取自定义人" enabled="true">
              <stringProp name="TestPlan.comments">chosenCustom</stringProp>
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		vars.put(&quot;chosenCustom&quot;, response.getJSONObject(num).getInteger(&quot;interContactId&quot;).toString());
		log.info(&quot;****************获取の自定人=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);
	}else{
		log.info(&quot;****************用户&quot;+${userId}+&quot;没有自定义人****************&quot;);
		vars.put(&quot;chosenCustom&quot;, &quot;-1&quot;);
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="随机取OfferTag" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/offerTagList.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">chosenTagId</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取TagId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		vars.put(&quot;chosenTagId&quot;, response.getJSONObject(num).getInteger(&quot;offerTagId&quot;).toString());
		log.info(&quot;****************获取のOfferTagId=&quot;+response.getJSONObject(num).getString(&quot;offerTagName&quot;)+&quot;****************&quot;);
	}else{
		vars.put(&quot;chosenTagId&quot;, &quot;-1&quot;);
		log.info(&quot;****************没有获取到OfferTagId****************&quot;);
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.获取by time的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;200&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.获取by time的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.获取by tag的tag列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTag.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerTagId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerTagId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		      vars.put(&quot;offerTagId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerTagId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.获取tag下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTagDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.获取tag下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">需要先获取by time/tag/supplier下的offerId</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.获取by supplier的supplier列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplier.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取contactUserId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;contactUserId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p4 = Pattern.compile(&quot;\&quot;contactStatus\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	Matcher m4 = p4.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  m4.find();
		  String a = m1.group();
		  String b = m2.group();
		  String c = m4.group();
		  Matcher m5 = p3.matcher(a);
		  Matcher m6 = p3.matcher(b);
		  Matcher m7 = p3.matcher(c);
		  m5.find();
		  m6.find();
		  m7.find();
		  if(!m6.group().equals(0)){
		      vars.put(&quot;contactUserId&quot;, m5.group().toString());
		      vars.put(&quot;contactStatus&quot;, m7.group().toString());
		      log.info(&quot;**************contactUserId=&quot;+vars.get(&quot;contactUserId&quot;)+&quot;***************&quot;);
		      log.info(&quot;**************contactStatus=&quot;+vars.get(&quot;contactStatus&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.获取supplier下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplierDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
map.put(&quot;contactStatus&quot;, vars.get(&quot;contactStatus&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.获取supplier下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9.获取by member的member列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取userId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;userId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		  	 //为避免与userId冲突，所以用memberId
		      vars.put(&quot;memberId&quot;, m3.group().toString());
		      log.info(&quot;**************userId=&quot;+vars.get(&quot;memberId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.获取member下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyUserProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;userId&quot;, vars.get(&quot;memberId&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.获取member下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.保存productSetting" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/saveProductSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import java.util.*;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
Random random = new Random();
//随机取币种
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
int currencyListLength = currencyList.length;
int randomCurrency = random.nextInt(currencyListLength);
map.put(&quot;productDefaultCry&quot;, currencyList[randomCurrency]);
//随机取相机开启
int camera = random.nextInt(2);
map.put(&quot;productStartCamera&quot;, camera);
//随机取添加买入价
int addBuyPrice = random.nextInt(2);
map.put(&quot;productAddBuyPrice&quot;, addBuyPrice);
//随机取产品sheet
String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing\&quot;}]&quot;;
//这里如果用List&lt;String&gt; list = new ArrayList&lt;String&gt;();会报错
JSONArray ja1 = JSONArray.parseArray(jsonString);
ArrayList list = new ArrayList();
for(int i=0; i&lt;ja1.size(); i++){
	list.add(ja1.getJSONObject(i).getString(&quot;sheetName&quot;));
}
int num = random.nextInt(list.size());
ArrayList sheetArray = new ArrayList();
for(int  i =0 ; i&lt;num ; i++){
	int newNum = random.nextInt(list.size());
	sheetArray.add(list.get(newNum));
	list.remove(newNum);
}
StringBuffer sb7 = new StringBuffer();
sb7.append(&quot;&quot;);
for(int i=0; i&lt;sheetArray.size(); i++){
	if(i&lt;sheetArray.size()-1){
	 sb7.append(&quot;\&quot;&quot;+sheetArray.get(i).toString()+&quot;\&quot;&quot;+&quot;,&quot;);
	}else{
	 sb7.append(&quot;\&quot;&quot;+sheetArray.get(i).toString()+&quot;\&quot;&quot;);
	}
}
map.put(&quot;productDefaultSheet&quot;, &quot;[&quot;+sb7 +&quot;]&quot;);

//存下各个设置项用于检验是否保存成功
vars.put(&quot;productDefaultCry&quot;,map.get(&quot;productDefaultCry&quot;).toString());
vars.put(&quot;productStartCamera&quot;,map.get(&quot;productStartCamera&quot;).toString());
vars.put(&quot;productAddBuyPrice&quot;,map.get(&quot;productAddBuyPrice&quot;).toString());
vars.put(&quot;productDefaultSheet&quot;,map.get(&quot;productDefaultSheet&quot;).toString());
log.info(&quot;*********&quot;+vars.get(&quot;productDefaultSheet&quot;)+&quot;****************&quot;);



//拼接入参
String[] str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

//对非int
for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;productDefaultCry&quot;) || str[j].equals(&quot;productDefaultSheet&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j]).toString()));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存所传设定值" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.获取productSetting" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="比较返回的设定值是否是所传的" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	String buyPrice  = response.getJSONObject(&quot;data&quot;).getString(&quot;productAddBuyPrice&quot;);
	String currency = response.getJSONObject(&quot;data&quot;).getString(&quot;productDefaultCry&quot;);
	String camera = response.getJSONObject(&quot;data&quot;).getString(&quot;productStartCamera&quot;);
	String sheet = response.getJSONObject(&quot;data&quot;).getString(&quot;productDefaultSheet&quot;);
	if(vars.get(&quot;productAddBuyPrice&quot;).equals(buyPrice) &amp;&amp; vars.get(&quot;productDefaultCry&quot;).equals(currency) &amp;&amp; vars.get(&quot;productStartCamera&quot;).equals(camera) &amp;&amp; vars.get(&quot;productDefaultSheet&quot;).equals(sheet)){
		Failure = false;
	}else{
		FailureMessage = &quot;设置没有保存成功！！！&quot;;
		Failure = true;
		}
		
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14.新建产品-随机参数" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="取好友列表" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取好友分组" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.tagList</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友分组" enabled="true">
                  <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		JSONArray friendGroup = new JSONArray();
		for(int i=0; i&lt;response.size(); i++){
			if(response.getJSONObject(i).getInteger(&quot;tagNum&quot;).intValue()&gt;0 &amp;&amp; !response.getJSONObject(i).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)) 
				friendGroup.add(response.getJSONObject(i));
		}
		if(friendGroup.size()&gt;0){
			vars.put(&quot;friendGroup&quot;, friendGroup.toJSONString());
			vars.put(&quot;nextGroup&quot;, &quot;true&quot;);
			vars.put(&quot;totalFriendGroup&quot;, friendGroup.size().toString());
			vars.put(&quot;friendList&quot;, &quot;&quot;);
		}else{
			vars.put(&quot;friendGroup&quot;, &quot;-1&quot;);
			vars.put(&quot;nextGroup&quot;, &quot;false&quot;);
			Failure = true;
			log.info(&quot;****************&quot;+${userId}+&quot;没有好友分组****************&quot;);
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While:有好友" enabled="true">
                <stringProp name="WhileController.condition">${nextGroup}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="按组取好友" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTagDetail.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">chosenFriend</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
try{
	${__counter(TRUE,addFriendQueue)};
	JSONArray friendGroup = JSONArray.parseArray(vars.get(&quot;friendGroup&quot;));
	map.put(&quot;tagId&quot;, friendGroup.getJSONObject(${addFriendQueue}-1).getInteger(&quot;tagId&quot;));
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		sb.append(vars.get(&quot;friendList&quot;));
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;contactUserId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;contactUserId&quot;).toString());
			}
		}
		vars.put(&quot;friendList&quot;, sb.toString());
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="终止循环断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">try{
	if(${addFriendQueue}==Integer.valueOf(vars.get(&quot;totalFriendGroup&quot;))){
//		Failure = true;
//		FailureMessage = &quot;所有联系人遍历完毕，此处断言用来终止遍历！！！&quot;;
		vars.put(&quot;nextGroup&quot;, &quot;false&quot;);
		log.info(&quot;****************&quot;+${userId}+&quot;の好友列表=&quot;+vars.get(&quot;friendList&quot;)+&quot;****************&quot;);
	}
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取自定义人列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/customList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenCustom</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取自定义人" enabled="true">
                <stringProp name="TestPlan.comments">chosenCustom</stringProp>
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0){
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;interContactId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;interContactId&quot;).toString());
			}
		}
		vars.put(&quot;customList&quot;, sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;の自定义人=&quot;+sb.toString()+&quot;****************&quot;);
	}else{
		vars.put(&quot;customList&quot;, &quot;-1&quot;);
		log.info(&quot;****************&quot;+${userId}+&quot;没有自定义人****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取OfferTag列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/offerTagList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenTagId</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="取TagList" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString());
			}
		}
		vars.put(&quot;offerTagList&quot;, sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;のOfferTagList=&quot;+sb.toString()+&quot;****************&quot;);
	}else{
		vars.put(&quot;offerTagList&quot;, &quot;-1&quot;);
		log.info(&quot;****************这个用户没有OfferTag****************&quot;);
	}
	if(response.size()&gt;49){
		vars.put(&quot;addTagOK&quot;, &quot;false&quot;);
	}else{
		vars.put(&quot;addTagOK&quot;, &quot;true&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：新建OfferTag" enabled="true">
              <stringProp name="TestPlan.comments">addTagOK需要在上个sample赋值true或false</stringProp>
              <stringProp name="IfController.condition">${addTagOK}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建随机几个tag" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/newOfferTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//定义循环控制变量
String[] offerTagList = vars.get(&quot;offerTagList&quot;).split(&quot;,&quot;);
//以下为接口可变参数
int newCount = 50 - offerTagList.length;
StringBuffer sb = new StringBuffer();
int num = random.nextInt(newCount)+1;
for(int i=0; i&lt;num; i++){
	char korean = (char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1)));
	if(i&lt;num-1){
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag&gt;&gt;&gt;&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;+&quot;,&quot;);
	}else{
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag&gt;&gt;&gt;&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;);
	}
}
map.put(&quot;offerTagName&quot;, &quot;[&quot;+sb.toString()+&quot;]&quot;);


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="新建的tag们加入tag列表" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString());
			}
		}
		vars.put(&quot;offerTagList&quot;, vars.get(&quot;offerTagList&quot;)+&quot;,&quot;+sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;のOfferTagList=&quot;+vars.get(&quot;offerTagList&quot;)+&quot;****************&quot;);
	}else{
		log.info(&quot;****************没有再加OfferTag****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环：设定新建几个" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建产品（随机参数）" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/offerplus/makeOfferEnd.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="初始化数据" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;


long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
Date date = new Date();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));

//生成随机offerName
DateFormat df2 = DateFormat.getDateTimeInstance();//可以精确到时分秒
//map.put(&quot;offerName&quot;, ${userId}+&quot;\&apos;s offer is created at:&quot;+df2.format(date).toString());
map.put(&quot;offerName&quot;, ${userId}+&quot;的产品创建于:&quot;+df2.format(date).toString());

//生成随机description
map.put(&quot;offerDescrip&quot;, ${userId}+&quot;的offer description，该offer创建于:&quot;+df2.format(date).toString());


//***开始生成buyprice和sellprice
//是否生成buyprice，并随机给予数值
JSONArray currencyList = commonList.getJSONArray(&quot;currencyList&quot;); 
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
	StringBuffer pattern1 = new StringBuffer();
	int index1 = random.nextInt(5);
	if(index1==0){
		pattern1.append(&quot;0&quot;);	
	}else{
		pattern1.append(&quot;0.&quot;);
		for(int i=0; i&lt;index1; i++){
			pattern1.append(&quot;#&quot;);
		}
	}
	DecimalFormat priceFormat1 = new DecimalFormat(pattern1.toString());
  	double d1 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	map.put(&quot;offerBuyPrice&quot;, priceFormat1.format(d1).toString());
	//随机币种
	map.put(&quot;offerBuyCry&quot;, currencyList.get(random.nextInt(currencyList.size())));
}

//是否生成sellprice，并随机给予数值
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	StringBuffer pattern2 = new StringBuffer();
	int index2 = random.nextInt(5);
	if(index2==0){
		pattern2.append(&quot;0&quot;);	
	}else{
		pattern2.append(&quot;0.&quot;);
		for(int j=0; j&lt;index2; j++){
			pattern2.append(&quot;#&quot;);
		}
	}
	DecimalFormat priceFormat2 = new DecimalFormat(pattern2.toString());
  	double d2 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	map.put(&quot;offerSellPrice&quot;, priceFormat2.format(d2).toString());
	//随机币种
	map.put(&quot;offerSellCry&quot;, currencyList.get(random.nextInt(currencyList.size())));
}
//赋予buyprice和sellprice结束


//***随机给予unit
JSONArray unitList = commonList.getJSONArray(&quot;unitList&quot;);
map.put(&quot;offerUnit&quot;, unitList.get(random.nextInt(unitList.size())));

//***随机取联系人种类和相应的userId：0=无，1=系统的，2=自定义的
int contactStatus = random.nextInt(2)+1;
if(contactStatus==1){
	if(!vars.get(&quot;friendGroup&quot;).equals(&quot;-1&quot;)){
		String[] friendList = vars.get(&quot;friendList&quot;).split(&quot;,&quot;);
		map.put(&quot;contactUserId&quot;, friendList[random.nextInt(friendList.length)]);
		map.put(&quot;contactStatus&quot;, &quot;1&quot;);
	}else{
		log.info(&quot;*************系统人没获取到****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}	
}else{
	if(!vars.get(&quot;customList&quot;).equals(&quot;-1&quot;)){
		String[] customList = vars.get(&quot;customList&quot;).split(&quot;,&quot;);
		map.put(&quot;contactUserId&quot;, customList[random.nextInt(customList.length)]);
		map.put(&quot;contactStatus&quot;, &quot;2&quot;);
	}else{
		log.info(&quot;*************这个Offer没联系人****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}
}

//***加入offer制作时间
map.put(&quot;makeOfferTime&quot;, String.valueOf(L));

//***是否copy的offer，0=no，1=yes
map.put(&quot;offerIsCopy&quot;, &quot;0&quot;);

//***打上offer tag
//是否传tag
if((!vars.get(&quot;offerTagList&quot;).equals(&quot;-1&quot;)) &amp;&amp; random.nextInt(2)==0){
	StringBuffer sb5 = new StringBuffer();
	String a = vars.get(&quot;offerTagList&quot;);
	String[] b = a.split(&quot;,&quot;);
	int c = random.nextInt(b.length);
	for(int p=0; p&lt;=c; p++){
	  if(p&lt;c){
	      sb5.append(b[p]).append(&quot;,&quot;);
	  }else{
	      sb5.append(b[p]);
	  }
	}
	map.put(&quot;arrTagId&quot;, sb5.toString());
}


//***随机赋予offer image
JSONArray imageList = commonList.getJSONArray(&quot;imageList&quot;);
int imageNum = random.nextInt(9)+1;
int imageIndex = -1;
StringBuffer sb4 = new StringBuffer();
sb4.append(&quot;&quot;);
for(int m=0; m&lt;imageNum; m++){
	if(m&lt;imageNum-1){
		imageIndex = random.nextInt(imageList.size());
		sb4.append(imageList.get(imageIndex)).append(&quot;,&quot;);
	}else{
		imageIndex = random.nextInt(imageList.size());
		sb4.append(imageList.get(imageIndex));
	}
}
map.put(&quot;offerImg&quot;, sb4.toString());



//***生成随机offerSheetArray
//随机取产品sheet
JSONArray sheetList = commonList.getJSONArray(&quot;sheetList&quot;);
JSONArray chosenSheet = new JSONArray();

//sheetValue的随机字符从这个string里取
String str1 = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;

int num = random.nextInt(sheetList.size());
for(int i=0; i&lt;num; i++){
	int newNum = random.nextInt(sheetList.size());
	// 随机给sheetValue赋值
	//下面这个new不能拿到循环外，不然会造成{&quot;$ref&quot;:&quot;$[0]&quot;}
	JSONObject sheet = new JSONObject();
	StringBuffer sheetValue = new StringBuffer();
	int valueLength = random.nextInt(str1.length());
	for (int k = 0; k &lt; valueLength; k++) {
		int number = random.nextInt(str1.length());
		sheetValue.append(str1.charAt(number));
	}
	log.info(&quot;**********************&quot;+sheet.toJSONString());
	sheet.put(&quot;sheetName&quot;, sheetList.get(newNum).getString(&quot;sheetName&quot;));
	sheet.put(&quot;sheetValue&quot;, sheetValue.toString());
	chosenSheet.add(sheet);
	sheetList.remove(newNum);
}
//map.put(&quot;offerArrSheet&quot;, java.net.URLEncoder.encode(ja.toString()));
if(random.nextInt(3)==0){
	map.put(&quot;offerArrSheet&quot;, chosenSheet.toJSONString());
}else{
	map.put(&quot;offerArrSheet&quot;, &quot;[]&quot;);	
}

//sheet生成结束
//***入参赋值完毕


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (str[j].equals(&quot;offerArrSheet&quot;)) {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	} else {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	}
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
		sb2.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb2.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();
vars.put(&quot;body&quot;, body);</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15.新建产品-固定参数" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="取好友列表" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取好友分组" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.tagList</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友分组" enabled="true">
                  <stringProp name="TestPlan.comments">chosenUserTag</stringProp>
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		JSONArray friendGroup = new JSONArray();
		for(int i=0; i&lt;response.size(); i++){
			if(response.getJSONObject(i).getInteger(&quot;tagNum&quot;).intValue()&gt;0 &amp;&amp; !response.getJSONObject(i).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)) 
				friendGroup.add(response.getJSONObject(i));
		}
		if(friendGroup.size()&gt;0){
			vars.put(&quot;friendGroup&quot;, friendGroup.toJSONString());
			vars.put(&quot;nextGroup&quot;, &quot;true&quot;);
			vars.put(&quot;totalFriendGroup&quot;, friendGroup.size().toString());
			vars.put(&quot;friendList&quot;, &quot;&quot;);
		}else{
			vars.put(&quot;friendGroup&quot;, &quot;-1&quot;);
			vars.put(&quot;nextGroup&quot;, &quot;false&quot;);
			Failure = true;
			log.info(&quot;****************&quot;+${userId}+&quot;没有好友分组****************&quot;);
		}
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While:有好友" enabled="true">
                <stringProp name="WhileController.condition">${nextGroup}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="按组取好友" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTagDetail.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">chosenFriend</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
try{
	${__counter(TRUE,addFriendQueue)};
	JSONArray friendGroup = JSONArray.parseArray(vars.get(&quot;friendGroup&quot;));
	map.put(&quot;tagId&quot;, friendGroup.getJSONObject(${addFriendQueue}-1).getInteger(&quot;tagId&quot;));
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取好友" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		sb.append(vars.get(&quot;friendList&quot;));
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;contactUserId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;contactUserId&quot;).toString());
			}
		}
		vars.put(&quot;friendList&quot;, sb.toString());
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="终止循环断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">try{
	if(${addFriendQueue}==Integer.valueOf(vars.get(&quot;totalFriendGroup&quot;))){
//		Failure = true;
//		FailureMessage = &quot;所有联系人遍历完毕，此处断言用来终止遍历！！！&quot;;
		vars.put(&quot;nextGroup&quot;, &quot;false&quot;);
		log.info(&quot;****************&quot;+${userId}+&quot;の好友列表=&quot;+vars.get(&quot;friendList&quot;)+&quot;****************&quot;);
	}
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取自定义人列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/customList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenCustom</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取自定义人" enabled="true">
                <stringProp name="TestPlan.comments">chosenCustom</stringProp>
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0){
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;interContactId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;interContactId&quot;).toString());
			}
		}
		vars.put(&quot;customList&quot;, sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;の自定义人=&quot;+sb.toString()+&quot;****************&quot;);
	}else{
		vars.put(&quot;customList&quot;, &quot;-1&quot;);
		log.info(&quot;****************&quot;+${userId}+&quot;没有自定义人****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取OfferTag列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/offerTagList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">chosenTagId</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="取TagList" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString());
			}
		}
		vars.put(&quot;offerTagList&quot;, sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;のOfferTagList=&quot;+sb.toString()+&quot;****************&quot;);
	}else{
		vars.put(&quot;offerTagList&quot;, &quot;-1&quot;);
		log.info(&quot;****************这个用户没有OfferTag****************&quot;);
	}
	if(response.size()&gt;49){
		vars.put(&quot;addTagOK&quot;, &quot;false&quot;);
	}else{
		vars.put(&quot;addTagOK&quot;, &quot;true&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：新建OfferTag" enabled="true">
              <stringProp name="TestPlan.comments">addTagOK需要在上个sample赋值true或false</stringProp>
              <stringProp name="IfController.condition">${addTagOK}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建随机几个tag" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/newOfferTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//定义循环控制变量
String[] offerTagList = vars.get(&quot;offerTagList&quot;).split(&quot;,&quot;);
//以下为接口可变参数
int newCount = 50 - offerTagList.length;
StringBuffer sb = new StringBuffer();
int num = random.nextInt(newCount)+1;
for(int i=0; i&lt;num; i++){
	char korean = (char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1)));
	if(i&lt;num-1){
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag&gt;&gt;&gt;&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;+&quot;,&quot;);
	}else{
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag&gt;&gt;&gt;&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;);
	}
}
map.put(&quot;offerTagName&quot;, &quot;[&quot;+sb.toString()+&quot;]&quot;);


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="新建的tag们加入tag列表" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		StringBuffer sb = new StringBuffer();
		for(int i=0; i&lt;response.size(); i++){
			if(i&lt;response.size()){
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString()).append(&quot;,&quot;);
			}else{
				sb.append(response.getJSONObject(i).getInteger(&quot;offerTagId&quot;).toString());
			}
		}
		vars.put(&quot;offerTagList&quot;, vars.get(&quot;offerTagList&quot;)+&quot;,&quot;+sb.toString());
		log.info(&quot;****************&quot;+${userId}+&quot;のOfferTagList=&quot;+vars.get(&quot;offerTagList&quot;)+&quot;****************&quot;);
	}else{
		log.info(&quot;****************没有再加OfferTag****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建产品（定制参数）" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/offerplus/makeOfferEnd.do?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">定制参数需要在脚本中自定义</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="初始化数据" enabled="true">
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;


long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
Date date = new Date();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));

//生成随机offerName
DateFormat df2 = DateFormat.getDateTimeInstance();//可以精确到时分秒
//此处自定义产品名
map.put(&quot;offerName&quot;, ${userId}+&quot;的产品创建于:&quot;+df2.format(date).toString());

//此处自定义产品description
map.put(&quot;offerDescrip&quot;, ${userId}+&quot;的offer description，该offer创建于:&quot;+df2.format(date).toString());


//***开始生成buyprice和sellprice
//是否生成buyprice，并随机给予数值
JSONArray currencyList = commonList.getJSONArray(&quot;currencyList&quot;); 
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
	StringBuffer pattern1 = new StringBuffer();
	int index1 = random.nextInt(5);
	if(index1==0){
		pattern1.append(&quot;0&quot;);	
	}else{
		pattern1.append(&quot;0.&quot;);
		for(int i=0; i&lt;index1; i++){
			pattern1.append(&quot;#&quot;);
		}
	}
	DecimalFormat priceFormat1 = new DecimalFormat(pattern1.toString());
  	double d1 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	map.put(&quot;offerBuyPrice&quot;, priceFormat1.format(d1).toString());
	//此处自定义币种
	map.put(&quot;offerBuyCry&quot;, currencyList.get(random.nextInt(currencyList.size())));
}

//是否生成sellprice，并随机给予数值
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	StringBuffer pattern2 = new StringBuffer();
	int index2 = random.nextInt(5);
	if(index2==0){
		pattern2.append(&quot;0&quot;);	
	}else{
		pattern2.append(&quot;0.&quot;);
		for(int j=0; j&lt;index2; j++){
			pattern2.append(&quot;#&quot;);
		}
	}
	DecimalFormat priceFormat2 = new DecimalFormat(pattern2.toString());
  	double d2 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	map.put(&quot;offerSellPrice&quot;, priceFormat2.format(d2).toString());
	//随机币种
	map.put(&quot;offerSellCry&quot;, currencyList.get(random.nextInt(currencyList.size())));
}
//赋予buyprice和sellprice结束


//***随机给予unit
JSONArray unitList = commonList.getJSONArray(&quot;unitList&quot;);
map.put(&quot;offerUnit&quot;, unitList.get(random.nextInt(unitList.size())));

//***随机取联系人种类和相应的userId：0=无，1=系统的，2=自定义的
int contactStatus = random.nextInt(2)+1;
if(contactStatus==1){
	if(!vars.get(&quot;friendGroup&quot;).equals(&quot;-1&quot;)){
		String[] friendList = vars.get(&quot;friendList&quot;).split(&quot;,&quot;);
		map.put(&quot;contactUserId&quot;, friendList[random.nextInt(friendList.length)]);
		map.put(&quot;contactStatus&quot;, &quot;1&quot;);
	}else{
		log.info(&quot;*************系统人没获取到****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}	
}else{
	if(!vars.get(&quot;customList&quot;).equals(&quot;-1&quot;)){
		String[] customList = vars.get(&quot;customList&quot;).split(&quot;,&quot;);
		map.put(&quot;contactUserId&quot;, customList[random.nextInt(customList.length)]);
		map.put(&quot;contactStatus&quot;, &quot;2&quot;);
	}else{
		log.info(&quot;*************这个Offer没联系人****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}
}

//***加入offer制作时间
map.put(&quot;makeOfferTime&quot;, String.valueOf(L));

//***是否copy的offer，0=no，1=yes
map.put(&quot;offerIsCopy&quot;, &quot;0&quot;);

//***打上offer tag
//是否传tag
if((!vars.get(&quot;offerTagList&quot;).equals(&quot;-1&quot;)) &amp;&amp; random.nextInt(2)==0){
	StringBuffer sb5 = new StringBuffer();
	String a = vars.get(&quot;offerTagList&quot;);
	String[] b = a.split(&quot;,&quot;);
	int c = random.nextInt(b.length);
	for(int p=0; p&lt;=c; p++){
	  if(p&lt;c){
	      sb5.append(b[p]).append(&quot;,&quot;);
	  }else{
	      sb5.append(b[p]);
	  }
	}
	map.put(&quot;arrTagId&quot;, sb5.toString());
}


//***随机赋予offer image
JSONArray imageList = commonList.getJSONArray(&quot;imageList&quot;);
int imageNum = random.nextInt(9)+1;
int imageIndex = -1;
StringBuffer sb4 = new StringBuffer();
sb4.append(&quot;&quot;);
for(int m=0; m&lt;imageNum; m++){
	if(m&lt;imageNum-1){
		imageIndex = random.nextInt(imageList.size());
		sb4.append(imageList.get(imageIndex)).append(&quot;,&quot;);
	}else{
		imageIndex = random.nextInt(imageList.size());
		sb4.append(imageList.get(imageIndex));
	}
}
map.put(&quot;offerImg&quot;, sb4.toString());



//***生成随机offerSheetArray
//随机取产品sheet
JSONArray sheetList = commonList.getJSONArray(&quot;sheetList&quot;);
JSONArray chosenSheet = new JSONArray();

//sheetValue的随机字符从这个string里取
String str1 = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;

int num = random.nextInt(sheetList.size());
for(int i=0; i&lt;num; i++){
	int newNum = random.nextInt(sheetList.size());
	JSONObject sheet = new JSONObject();
	// 随机给sheetValue赋值
	StringBuffer sheetValue = new StringBuffer();
	int valueLength = random.nextInt(str1.length());
	for (int k = 0; k &lt; valueLength; k++) {
		int number = random.nextInt(str1.length());
		sheetValue.append(str1.charAt(number));
	}
	sheet.put(&quot;sheetName&quot;, sheetList.get(newNum).getString(&quot;sheetName&quot;));
	sheet.put(&quot;sheetValue&quot;, sheetValue.toString());
	chosenSheet.add(sheet);
	sheetList.remove(newNum);
}
//map.put(&quot;offerArrSheet&quot;, java.net.URLEncoder.encode(ja.toString()));
if(random.nextInt(2)==0){
	map.put(&quot;offerArrSheet&quot;, chosenSheet.toJSONString());
}else{
	map.put(&quot;offerArrSheet&quot;, &quot;[]&quot;);	
}

//sheet生成结束
//***入参赋值完毕


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (str[j].equals(&quot;offerArrSheet&quot;)) {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	} else {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	}
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
		sb2.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb2.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();
vars.put(&quot;body&quot;, body);</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16.复制my product" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.随机获取目标offerId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;200&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		JSONObject original = response.getJSONObject(num);
		Integer originalOfferId = original.getInteger(&quot;offerId&quot;);
		vars.put(&quot;originalOfferId&quot;, originalOfferId.toString());
//		log.info(&quot;****************myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.获取此offer的详情" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;originalOfferId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存原版详情" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject original = response.getJSONObject(&quot;data&quot;);
		original.remove(&quot;makeOfferTime&quot;);
		original.remove(&quot;offerId&quot;);
		original.remove(&quot;offerNo&quot;);
		original.remove(&quot;sortTime&quot;);
		if(original.containsKey(&quot;offerArrSheet&quot;)){
			if(original.getJSONArray(&quot;offerArrSheet&quot;).size()==0){
				original.remove(&quot;offerArrSheet&quot;);
			}
		}
		
		vars.put(&quot;originalProduct&quot;, original.toJSONString());
		log.info(&quot;****************原版=&quot;+vars.get(&quot;originalProduct&quot;)+&quot;****************&quot;);
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.Copy此offer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/copyProduct.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
//如果是已删除的offerId需要单独再获取一次
map.put(&quot;offerId&quot;, vars.get(&quot;originalOfferId&quot;));
log.info(&quot;****************被copy的myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.获取Copy后的offerId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;1&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)) {
		JSONArray productList = response.getJSONArray(&quot;data&quot;);
		if(productList.size() &gt; 0) {
			JSONObject duplicate = productList.getJSONObject(0);
			Integer duplicateId = duplicate.getInteger(&quot;offerId&quot;);
			vars.put(&quot;duplicateId&quot;, duplicateId.toString());
//			log.info(&quot;****************duplicateId=&quot;+vars.get(&quot;duplicateId&quot;)+&quot;****************&quot;);
		}
	}else{
		FailureMessage = &quot;获取产品列表失败&quot; + encrypt; 
		Failure = true;
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.获取Copy后的offer详情" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;duplicateId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存副本详情并比较" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject duplicate = response.getJSONObject(&quot;data&quot;);
		duplicate.remove(&quot;makeOfferTime&quot;);
		duplicate.remove(&quot;offerId&quot;);
		duplicate.remove(&quot;offerNo&quot;);
		duplicate.remove(&quot;sortTime&quot;);
		if(duplicate.containsKey(&quot;offerArrSheet&quot;)){
			if(duplicate.getJSONArray(&quot;offerArrSheet&quot;).size()==0){
			duplicate.remove(&quot;offerArrSheet&quot;);
			}
		}
		vars.put(&quot;duplicateProduct&quot;, duplicate.toJSONString());
		if(vars.get(&quot;duplicateProduct&quot;).equals(vars.get(&quot;originalProduct&quot;))){
			Failure = false;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情一致&quot;+&quot;****************&quot;);
		}else{
			Failure = true;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情不一致&quot;+&quot;****************&quot;);
			log.info(&quot;****************副本=&quot;+vars.get(&quot;duplicateProduct&quot;)+&quot;****************&quot;);
		}
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17.复制received product" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1.从数据库获取receivedOfferId" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select offer_id, contact_user_id, RAND() sort_column from ejet_my_rece_rela where user_id = ${userId} and
del_status = 0 order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">offer_id</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">if(!(vars.get(&quot;offer_id_#&quot;).equals(&quot;0&quot;))){
	vars.put(&quot;receivedOfferId&quot;, vars.get(&quot;offer_id_1&quot;));
	Failure = false;
}else{
	vars.put(&quot;receivedOfferId&quot;, &quot;-1&quot;);
	Failure = true;
	log.info(&quot;********************&quot;+${userId}+&quot;没有receivedOfferId！！！******************&quot;);
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.获取此receivedOffer的详情" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/receOfferInfo.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;receivedOfferId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存原版详情" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject original = response.getJSONObject(&quot;data&quot;);
		JSONObject origin = new JSONObject();
		//received offer和my product详情结构不同，故只取最核心的字段验证
		origin.put(&quot;contactName&quot;, original.getString(&quot;contactName&quot;));
		origin.put(&quot;contactUserId&quot;, original.getInteger(&quot;contactUserId&quot;));
		if(original.containsKey(&quot;offerArrSheet&quot;)){
		 	origin.put(&quot;offerArrSheet&quot;, original.getJSONArray(&quot;offerArrSheet&quot;));
		}
		if(original.containsKey(&quot;offerBuyPrice&quot;)){
		 	origin.put(&quot;offerBuyPrice&quot;, original.getString(&quot;offerBuyPrice&quot;));
		 	origin.put(&quot;offerBuyCry&quot;, original.getString(&quot;offerBuyCry&quot;));
		}
		if(original.containsKey(&quot;offerSellPrice&quot;)){
		 	origin.put(&quot;offerSellPrice&quot;, original.getString(&quot;offerSellPrice&quot;));
		 	origin.put(&quot;offerSellCry&quot;, original.getString(&quot;offerSellCry&quot;));
		}
		if(original.containsKey(&quot;offerDescrip&quot;)){
			origin.put(&quot;offerDescrip&quot;, original.getString(&quot;offerDescrip&quot;));
		}
		origin.put(&quot;offerImg&quot;, original.getString(&quot;contactName&quot;));
		origin.put(&quot;offerName&quot;, original.getString(&quot;contactName&quot;));
		if(original.containsKey(&quot;offerUnit&quot;)){
			origin.put(&quot;offerUnit&quot;, original.getString(&quot;offerUnit&quot;));
		}
		vars.put(&quot;originalProduct&quot;, origin.toJSONString());
		log.info(&quot;****************原版=&quot;+vars.get(&quot;originalProduct&quot;)+&quot;****************&quot;);
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.Copy此offer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/copyProduct.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;2&quot;);
//如果是已删除的offerId需要单独再获取一次
map.put(&quot;offerId&quot;, vars.get(&quot;receivedOfferId&quot;));
log.info(&quot;****************被copy的receivedOfferId=&quot;+vars.get(&quot;receivedOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.获取Copy后的offerId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;1&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)) {
		JSONArray productList = response.getJSONArray(&quot;data&quot;);
		if(productList.size() &gt; 0) {
			JSONObject duplicate = productList.getJSONObject(0);
			Integer duplicateId = duplicate.getInteger(&quot;offerId&quot;);
			vars.put(&quot;duplicateId&quot;, duplicateId.toString());
//			log.info(&quot;****************duplicateId=&quot;+vars.get(&quot;duplicateId&quot;)+&quot;****************&quot;);
		}
	}else{
		FailureMessage = &quot;获取产品列表失败&quot; + encrypt; 
		Failure = true;
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.获取Copy后的offer详情" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;duplicateId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存副本详情并比较" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject duplicate = response.getJSONObject(&quot;data&quot;);
		JSONObject dup = new JSONObject();
		
		dup.put(&quot;contactName&quot;, duplicate.getString(&quot;contactName&quot;));
		dup.put(&quot;contactUserId&quot;, duplicate.getInteger(&quot;contactUserId&quot;));
		if(duplicate.containsKey(&quot;offerArrSheet&quot;)){
		 	dup.put(&quot;offerArrSheet&quot;, duplicate.getJSONArray(&quot;offerArrSheet&quot;));
		}
		if(duplicate.containsKey(&quot;offerBuyPrice&quot;)){
		 	dup.put(&quot;offerBuyPrice&quot;, duplicate.getString(&quot;offerBuyPrice&quot;));
		 	dup.put(&quot;offerBuyCry&quot;, duplicate.getString(&quot;offerBuyCry&quot;));
		}
		if(duplicate.containsKey(&quot;offerSellPrice&quot;)){
		 	dup.put(&quot;offerSellPrice&quot;, duplicate.getString(&quot;offerSellPrice&quot;));
		 	dup.put(&quot;offerSellCry&quot;, duplicate.getString(&quot;offerSellCry&quot;));
		}
		if(duplicate.containsKey(&quot;offerDescrip&quot;)){
			dup.put(&quot;offerDescrip&quot;, duplicate.getString(&quot;offerDescrip&quot;));
		}
		dup.put(&quot;offerImg&quot;, duplicate.getString(&quot;contactName&quot;));
		dup.put(&quot;offerName&quot;, duplicate.getString(&quot;contactName&quot;));
		if(duplicate.containsKey(&quot;offerUnit&quot;)){
			dup.put(&quot;offerUnit&quot;, duplicate.getString(&quot;offerUnit&quot;));
		}
		vars.put(&quot;duplicateProduct&quot;, dup.toJSONString());
		if(vars.get(&quot;duplicateProduct&quot;).equals(vars.get(&quot;originalProduct&quot;))){
			Failure = false;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情一致&quot;+&quot;****************&quot;);
		}else{
			Failure = true;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情不一致&quot;+&quot;****************&quot;);
			log.info(&quot;****************副本=&quot;+vars.get(&quot;duplicateProduct&quot;)+&quot;****************&quot;);
		}
	}
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18.复制company product" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.获取by member列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/companyProducts.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机获取memberId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		JSONObject member = response.getJSONObject(num);
		Integer memberId = member.getInteger(&quot;userId&quot;);
		vars.put(&quot;memberId&quot;, memberId.toString());
		log.info(&quot;****************memberId=&quot;+vars.get(&quot;memberId&quot;)+&quot;****************&quot;);
	}else{
		vars.put(&quot;memberId&quot;, &quot;-1&quot;);
		log.info(&quot;****************&quot;+${userId}+&quot;の公司里没人****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：公司有人" enabled="true">
              <stringProp name="IfController.condition">&quot;${memberId}&quot;!=&quot;-1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.随机获取TA的某个产品" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/companyUserProducts.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;userId&quot;, vars.get(&quot;memberId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size() &gt; 0) {
		int num = random.nextInt(response.size());
		JSONObject offer = response.getJSONObject(num);
		vars.put(&quot;memberOfferId&quot;, offer.getInteger(&quot;offerId&quot;).toString());
		log.info(&quot;****************memberOfferId=&quot;+vars.get(&quot;memberOfferId&quot;)+&quot;****************&quot;);
	}else{
		vars.put(&quot;offerId&quot;, &quot;-1&quot;);
		log.info(&quot;****************&quot;+${memberId}+&quot;这人没有产品****************&quot;);
	}
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.获取此offer的详情" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;1&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;memberOfferId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存原版详情" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;


if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	FailureMessage = &quot;没有获取到产品详情&quot;
	Failure = true;
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject original = response.getJSONObject(&quot;data&quot;);
		original.remove(&quot;makeOfferTime&quot;);
		original.remove(&quot;offerId&quot;);
		original.remove(&quot;offerNo&quot;);
		original.remove(&quot;sortTime&quot;);
		original.remove(&quot;userId&quot;);
		if(original.containsKey(&quot;contactCompany&quot;)){
			original.remove(&quot;contactCompany&quot;);
		}
		if(original.containsKey(&quot;contactImg&quot;)){
			original.remove(&quot;contactImg&quot;);
		}
		if(original.containsKey(&quot;contactName&quot;)){
			original.remove(&quot;contactName&quot;);
		}
		if(original.containsKey(&quot;contactStatus&quot;)){
			original.remove(&quot;contactStatus&quot;);
		}
		if(original.containsKey(&quot;contactUserId&quot;)){
			original.remove(&quot;contactUserId&quot;);
		}
		if(original.getJSONArray(&quot;offerArrSheet&quot;).size()==0){
			original.remove(&quot;offerArrSheet&quot;);
		}
		vars.put(&quot;originalProduct&quot;, original.toString());
		log.info(&quot;****************原版=&quot;+vars.get(&quot;originalProduct&quot;)+&quot;****************&quot;);
	}
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.Copy此offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/copyProduct.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;1&quot;);
//如果是已删除的offerId需要单独再获取一次
map.put(&quot;offerId&quot;, vars.get(&quot;memberOfferId&quot;));
log.info(&quot;****************被copy的memberOfferId=&quot;+vars.get(&quot;memberOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.获取Copy后的offerId" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;1&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)) {
		JSONArray productList = response.getJSONArray(&quot;data&quot;);
		if(productList.size() &gt; 0) {
			JSONObject duplicate = productList.getJSONObject(0);
			Integer duplicateId = duplicate.getInteger(&quot;offerId&quot;);
			vars.put(&quot;duplicateId&quot;, duplicateId.toString());
//			log.info(&quot;****************duplicateId=&quot;+vars.get(&quot;duplicateId&quot;)+&quot;****************&quot;);
		}
	}else{
		FailureMessage = &quot;获取产品列表失败&quot; + encrypt; 
		Failure = true;
	}
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.获取Copy后的offer详情" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;type&quot;, &quot;0&quot;);
map.put(&quot;offerId&quot;, vars.get(&quot;duplicateId&quot;));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存副本详情并比较" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	if(response.containsKey(&quot;data&quot;)){
		JSONObject duplicate = response.getJSONObject(&quot;data&quot;);
		duplicate.remove(&quot;makeOfferTime&quot;);
		duplicate.remove(&quot;offerId&quot;);
		duplicate.remove(&quot;offerNo&quot;);
		duplicate.remove(&quot;sortTime&quot;);
		duplicate.remove(&quot;userId&quot;);
		if(original.containsKey(&quot;contactUserId&quot;)){
			Failure = true;
			log.info(&quot;****************&quot;+&quot;公司产品copy过来后未将contact滤掉！！&quot;+&quot;****************&quot;);
		}
		vars.put(&quot;duplicateProduct&quot;, duplicate.toString());
		if(vars.get(&quot;duplicateProduct&quot;).equals(vars.get(&quot;originalProduct&quot;))){
			Failure = false;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情一致&quot;+&quot;****************&quot;);
		}else{
			Failure = true;
			log.info(&quot;****************&quot;+&quot;Copy后产品详情不一致&quot;+&quot;****************&quot;);
			log.info(&quot;****************副本=&quot;+vars.get(&quot;duplicateProduct&quot;)+&quot;****************&quot;);
		}
	}
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Inquiry" enabled="false"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="定义用户和询价模式" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-874851275">theOne</stringProp>
              <stringProp name="-874853343">theMin</stringProp>
              <stringProp name="-874853581">theMax</stringProp>
              <stringProp name="1899953162">inquiryMode</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="210541804">
                <stringProp name="1962660729">1051015</stringProp>
                <stringProp name="1958102671">1003001</stringProp>
                <stringProp name="1958102673">1003003</stringProp>
                <stringProp name="49">1</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">theMin不能比theMax大，inquiryMode:0=theOne发给[theMin,theMax]，1=[theMin,theMax]发给theOne（后续可以再扩展）</stringProp>
          </UserParameters>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="依询价模式而行" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="询价模式赋值" enabled="true">
              <stringProp name="TestPlan.comments">用户参数里设置的在swith控制器里不知为何不能直接用，所以暂时先用beanshell来赋值，且预设遍历条件为true</stringProp>
              <stringProp name="BeanShellSampler.query">vars.put(&quot;inquiryMode&quot;, &quot;${inquiryMode}&quot;);
vars.put(&quot;keepInquiry&quot;, &quot;true&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch:不同询价模式" enabled="true">
              <stringProp name="TestPlan.comments">inquiryMode:0=theOne发给[theMin,theMax]，1=[theMin,theMax]发给theOne（后续可以再扩展）</stringProp>
              <stringProp name="SwitchController.value">${inquiryMode}</stringProp>
            </SwitchController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="一对多询价" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录theOne" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();
Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;theOne&quot;));
log.info(&quot;****************用户：&quot;+vars.get(&quot;theOne&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;signIn&quot;, &quot;true&quot;);
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		vars.put(&quot;signIn&quot;, &quot;false&quot;);
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="遍历向多人询价" enabled="true">
                  <stringProp name="WhileController.condition">${keepInquiry}</stringProp>
                </WhileController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="生成接收询价方" enabled="true">
                    <stringProp name="BeanShellSampler.query">${__counter(TRUE,inquiryQueue)};	
vars.put(&quot;contactUserId&quot;, String.valueOf(${theMin}+${inquiryQueue}-1));

if((${theMin}+${inquiryQueue}-1)==${theOne}){
	vars.put(&quot;contactDifferent&quot;, &quot;false&quot;);
}else{
	vars.put(&quot;contactDifferent&quot;, &quot;true&quot;);
}</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:不重名才询价" enabled="true">
                    <stringProp name="IfController.condition">${contactDifferent}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:登录成功" enabled="true">
                      <stringProp name="IfController.condition">${signIn}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="私人询价" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${body}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                        <stringProp name="HTTPSampler.port">${port}</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                        <stringProp name="HTTPSampler.path">${path}/inquiry/newInquiry.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();
Random random = new Random();
Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数

//获取常用参数列表
JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));

//type：0=直接新建，1=基于product
map.put(&quot;type&quot;, 0);

//随机数量的product image
int imageNum = ${__Random(1,9,)};
StringBuffer sb1 = new StringBuffer();
sb1.append(&quot;&quot;);
for(int m=0; m&lt;imageNum; m++){
	int imageIndex = random.nextInt(commonList.getJSONArray(&quot;imageList&quot;).size());
	if(m&lt;imageNum-1){
		sb1.append(commonList.getJSONArray(&quot;imageList&quot;).getString(imageIndex)).append(&quot;,&quot;);
	}else{
		sb1.append(commonList.getJSONArray(&quot;imageList&quot;).getString(imageIndex));
	}
}
map.put(&quot;productImg&quot;, sb1.toString());

//遍历inquiry接收方的id
map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));

map.put(&quot;productName&quot;, vars.get(&quot;theOne&quot;)+&quot;向&quot;+vars.get(&quot;contactUserId&quot;)+&quot;询价于&quot;+&quot;${__time(YMDHMS,)}&quot;);


switch(map.get(&quot;type&quot;)){
case 0:
	map.put(&quot;inquiryDescrip&quot;, &quot;这是直接新建的inquiry&quot;);
	break;
case 1:
	map.put(&quot;inquiryDescrip&quot;, &quot;这是基于产品的inquiry&quot;);
	break;
}

map.put(&quot;productQuantity&quot;, ${__Random(1,999999,)});

map.put(&quot;productUnit&quot;, commonList.getJSONArray(&quot;unitList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;unitList&quot;).size())));
//随机price最多4位小数，且多余的0不显示
StringBuffer pricePattern = new StringBuffer();
//定义小数位数
int patternIndex = random.nextInt(5);
if(patternIndex==0){
	pricePattern.append(&quot;0&quot;);	
}else{
	pricePattern.append(&quot;0.&quot;);
	for(int j=0; j&lt;patternIndex; j++){
		pricePattern.append(&quot;#&quot;);
	}
}
DecimalFormat targetPriceFormat = new DecimalFormat(pricePattern.toString());
double targetPrice = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
map.put(&quot;targetPrice&quot;, targetPriceFormat.format(targetPrice).toString());

//随机币种
map.put(&quot;targetPriceCry&quot;, commonList.getJSONArray(&quot;currencyList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;currencyList&quot;).size())));

map.put(&quot;priceTerm&quot;, commonList.getJSONArray(&quot;priceTermList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;priceTermList&quot;).size())));

map.put(&quot;destinationPort&quot;, &quot;${__RandomString(20,0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,)}&quot;);

map.put(&quot;paymentTerm&quot;, commonList.getJSONArray(&quot;paymentWayList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;paymentWayList&quot;).size())));

map.put(&quot;expireDate&quot;, ${__Random(1,180,)});


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);</stringProp>
                        </BeanShellTimer>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="设置遍历结束" enabled="true">
                          <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		if(${inquiryQueue}&gt;${theMax}-${theMin}){
			vars.put(&quot;keepInquiry&quot;, &quot;false&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                          <stringProp name="BeanShellAssertion.filename"></stringProp>
                          <stringProp name="BeanShellAssertion.parameters"></stringProp>
                          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                        </BeanShellAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="多对一询价" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="遍历向单人询价" enabled="true">
                  <stringProp name="WhileController.condition">${keepInquiry}</stringProp>
                </WhileController>
                <hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="生成发送询价方" enabled="true">
                    <stringProp name="BeanShellSampler.query">${__counter(TRUE,inquiryQueue)};	
vars.put(&quot;loginName&quot;, String.valueOf(${theMin}+${inquiryQueue}-1));

if((${theMin}+${inquiryQueue}-1)==${theOne}){
	vars.put(&quot;contactDifferent&quot;, &quot;false&quot;);
}else{
	vars.put(&quot;contactDifferent&quot;, &quot;true&quot;);
}</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:不重名才询价" enabled="true">
                    <stringProp name="IfController.condition">${contactDifferent}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录此人" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${body}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${host}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                      <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                        <boolProp name="resetInterpreter">false</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();
Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;loginName&quot;));
log.info(&quot;****************用户：&quot;+vars.get(&quot;loginName&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                      </BeanShellTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                        <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;signIn&quot;, &quot;true&quot;);
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		vars.put(&quot;signIn&quot;, &quot;false&quot;);
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                        <stringProp name="BeanShellAssertion.filename"></stringProp>
                        <stringProp name="BeanShellAssertion.parameters"></stringProp>
                        <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                      </BeanShellAssertion>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:登录成功" enabled="true">
                      <stringProp name="IfController.condition">${signIn}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="私人询价" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${body}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                        <stringProp name="HTTPSampler.port">${port}</stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                        <stringProp name="HTTPSampler.path">${path}/inquiry/newInquiry.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();
Random random = new Random();
Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数

//获取常用参数列表
JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));

//type：0=直接新建，1=基于product
map.put(&quot;type&quot;, 0);

//随机数量的product image
int imageNum = ${__Random(1,9,)};
StringBuffer sb1 = new StringBuffer();
sb1.append(&quot;&quot;);
for(int m=0; m&lt;imageNum; m++){
	int imageIndex = random.nextInt(commonList.getJSONArray(&quot;imageList&quot;).size());
	if(m&lt;imageNum-1){
		sb1.append(commonList.getJSONArray(&quot;imageList&quot;).getString(imageIndex)).append(&quot;,&quot;);
	}else{
		sb1.append(commonList.getJSONArray(&quot;imageList&quot;).getString(imageIndex));
	}
}
map.put(&quot;productImg&quot;, sb1.toString());

//遍历inquiry接收方的id
map.put(&quot;contactUserId&quot;, ${theOne});

map.put(&quot;productName&quot;, vars.get(&quot;loginName&quot;)+&quot;向&quot;+vars.get(&quot;theOne&quot;)+&quot;询价于&quot;+&quot;${__time(YMDHMS,)}&quot;);


switch(map.get(&quot;type&quot;)){
case 0:
	map.put(&quot;inquiryDescrip&quot;, &quot;这是直接新建的inquiry&quot;);
	break;
case 1:
	map.put(&quot;inquiryDescrip&quot;, &quot;这是基于产品的inquiry&quot;);
	break;
}

map.put(&quot;productQuantity&quot;, ${__Random(1,999999,)});

map.put(&quot;productUnit&quot;, commonList.getJSONArray(&quot;unitList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;unitList&quot;).size())));
//随机price最多4位小数，且多余的0不显示
StringBuffer pricePattern = new StringBuffer();
//定义小数位数
int patternIndex = random.nextInt(5);
if(patternIndex==0){
	pricePattern.append(&quot;0&quot;);	
}else{
	pricePattern.append(&quot;0.&quot;);
	for(int j=0; j&lt;patternIndex; j++){
		pricePattern.append(&quot;#&quot;);
	}
}
DecimalFormat targetPriceFormat = new DecimalFormat(pricePattern.toString());
double targetPrice = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
map.put(&quot;targetPrice&quot;, targetPriceFormat.format(targetPrice).toString());

//随机币种
map.put(&quot;targetPriceCry&quot;, commonList.getJSONArray(&quot;currencyList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;currencyList&quot;).size())));

map.put(&quot;priceTerm&quot;, commonList.getJSONArray(&quot;priceTermList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;priceTermList&quot;).size())));

map.put(&quot;destinationPort&quot;, &quot;${__RandomString(20,0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,)}&quot;);

map.put(&quot;paymentTerm&quot;, commonList.getJSONArray(&quot;paymentWayList&quot;).get(random.nextInt(commonList.getJSONArray(&quot;paymentWayList&quot;).size())));

map.put(&quot;expireDate&quot;, ${__Random(1,180,)});


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);</stringProp>
                        </BeanShellTimer>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="设置遍历结束" enabled="true">
                          <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		if(${inquiryQueue}&gt;${theMax}-${theMin}){
			vars.put(&quot;keepInquiry&quot;, &quot;false&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                          <stringProp name="BeanShellAssertion.filename"></stringProp>
                          <stringProp name="BeanShellAssertion.parameters"></stringProp>
                          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                        </BeanShellAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Membership" enabled="true"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="谁想充值" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-649439915">memberId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1456994559">
                <stringProp name="1958102671">1003001</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">memberId就是被充钱的帐号</stringProp>
          </UserParameters>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录并取会员状态" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;memberId&quot;));
log.info(&quot;****************用户：&quot;+vars.get(&quot;memberId&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token和memberStatus" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;));
		switch(response.getJSONObject(&quot;data&quot;).getInteger(&quot;userType&quot;)){
			case 0:
				switch(response.getJSONObject(&quot;data&quot;).getInteger(&quot;memberStatus&quot;)){
					case 0:
						vars.put(&quot;rechargeType&quot;, &quot;0&quot;);
						break;
					case 1:
						vars.put(&quot;rechargeType&quot;, &quot;1&quot;);
						break;
					case 2:
//					这种情况既可以续费，也可以购买额外包
						vars.put(&quot;rechargeType&quot;, String.valueOf(${__Random(1,2)}));
						break;
					case 3:
						vars.put(&quot;rechargeType&quot;, &quot;1&quot;);
						break;
				}
				break;
			case 1:
				switch(response.getJSONObject(&quot;data&quot;).getInteger(&quot;memberStatus&quot;)){
					case 0:
						log.error(&quot;****************主账号的memberStatus不可能为0，故为脏数据****************&quot;);
						break;
					case 1:
						vars.put(&quot;rechargeType&quot;, &quot;1&quot;);
						break;
					case 2:
//					这种情况既可以续费，也可以购买额外包,下面这样是随机的
						vars.put(&quot;rechargeType&quot;, String.valueOf(${__Random(1,2)}));
						break;
					case 3:
						vars.put(&quot;rechargeType&quot;, &quot;1&quot;);
						break;
				}
				break;
			case 2:
				vars.put(&quot;rechargeType&quot;, &quot;-1&quot;);
				log.error(&quot;****************这号是子账号不能充值****************&quot;);
				break;	
		}
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
	
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="保持APP登录的走法" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select token_id from ejet_user_separate where user_id = 1001999 and server_type = &quot;C&quot; order by token_over_time desc limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">token_id,</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;tokenId&quot;, &quot;${token_id_1}&quot;);
vars.put(&quot;rechargeType&quot;, &quot;2&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="随机选择充值方" enabled="true">
            <stringProp name="BeanShellSampler.query">Random random = new Random();
int choice = random.nextInt(4);
switch(choice){
	case 0:
		vars.put(&quot;choice&quot;, &quot;pay/alipay.do&quot;);
		break;
	case 1:
		vars.put(&quot;choice&quot;, &quot;pay/wechatPay.do&quot;);
		break;
	case 2:
		vars.put(&quot;choice&quot;, &quot;pay/paypalToken.do&quot;);
		break;
	case 3:
		vars.put(&quot;choice&quot;, &quot;pay/creditToken.do&quot;);
		break;	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="由会员状态决定充值类型" enabled="true">
            <stringProp name="TestPlan.comments">0=首充，1=续费，2=额外包</stringProp>
            <stringProp name="SwitchController.value">${rechargeType}</stringProp>
          </SwitchController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="首充" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/${choice}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
//首充的type=0
map.put(&quot;type&quot;, &quot;0&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取outTradeNo" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import java.net.URLDecoder;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;outTradeNo&quot;, &quot;-1&quot;);
	try{
		if(vars.get(&quot;choice&quot;).equals(&quot;pay/alipay.do&quot;)){
			String data = URLDecoder.decode(vars.get(&quot;data&quot;));
			Pattern pattern = Pattern.compile(&quot;\&quot;out_trade_no\&quot;:\&quot;\\w+\&quot;&quot;);
			Matcher matcher = pattern.matcher(data);
			while (matcher.find()){
				Pattern pattern1 = Pattern.compile(&quot;:\&quot;\\w+\&quot;&quot;);
				Matcher matcher1 = pattern1.matcher(matcher.group());
				while (matcher1.find()){
					vars.put(&quot;outTradeNo&quot;, matcher.group().substring(matcher1.start()+2, matcher1.end()-1));
					log.info(&quot;****************此人进行了首充****************&quot;);
				}
			}
		}else{
			JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
			vars.put(&quot;outTradeNo&quot;, response.getString(&quot;orderId&quot;));
			log.info(&quot;****************此人进行了首充****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="续费" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/${choice}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();
Random random =  new Random();
Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
//续费的type=1,续费的时候不能加子账号和产品名额
map.put(&quot;type&quot;, &quot;1&quot;);



//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取outTradeNo" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import java.net.URLDecoder;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;outTradeNo&quot;, &quot;-1&quot;);
	try{
		if(vars.get(&quot;choice&quot;).equals(&quot;pay/alipay.do&quot;)){
			String data = URLDecoder.decode(vars.get(&quot;data&quot;));
			Pattern pattern = Pattern.compile(&quot;\&quot;out_trade_no\&quot;:\&quot;\\w+\&quot;&quot;);
			Matcher matcher = pattern.matcher(data);
			while (matcher.find()){
				Pattern pattern1 = Pattern.compile(&quot;:\&quot;\\w+\&quot;&quot;);
				Matcher matcher1 = pattern1.matcher(matcher.group());
				while (matcher1.find()){
					vars.put(&quot;outTradeNo&quot;, matcher.group().substring(matcher1.start()+2, matcher1.end()-1));
					log.info(&quot;****************此人进行了续费****************&quot;);
				}
			}
		}else{
			JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
			vars.put(&quot;outTradeNo&quot;, response.getString(&quot;orderId&quot;));
			log.info(&quot;****************此人进行了续费****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="额外包" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/${choice}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();
Random random =  new Random();
Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
//额外包的type=2
map.put(&quot;type&quot;, &quot;2&quot;);
//随机要买的子账号数和产品名额,上下限定义如右rand.nextInt((max - min) + 1) + min
map.put(&quot;subAccountTotal&quot;, random.nextInt((5-1)+1)+1);
map.put(&quot;productTotal&quot;, random.nextInt((5-1)+1)+1);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取outTradeNo" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import java.net.URLDecoder;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;outTradeNo&quot;, &quot;-1&quot;);
	try{
		if(vars.get(&quot;choice&quot;).equals(&quot;pay/alipay.do&quot;)){
			String data = URLDecoder.decode(vars.get(&quot;data&quot;));
			Pattern pattern = Pattern.compile(&quot;\&quot;out_trade_no\&quot;:\&quot;\\w+\&quot;&quot;);
			Matcher matcher = pattern.matcher(data);
			while (matcher.find()){
				Pattern pattern1 = Pattern.compile(&quot;:\&quot;\\w+\&quot;&quot;);
				Matcher matcher1 = pattern1.matcher(matcher.group());
				while (matcher1.find()){
					vars.put(&quot;outTradeNo&quot;, matcher.group().substring(matcher1.start()+2, matcher1.end()-1));
					log.info(&quot;****************此人买了额外包****************&quot;);
				}
			}
		}else{
			JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
			vars.put(&quot;outTradeNo&quot;, response.getString(&quot;orderId&quot;));
			log.info(&quot;****************此人买了额外包****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完成支付回调" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/pay/publicNotify.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
if(!vars.get(&quot;outTradeNo&quot;).equals(&quot;-1&quot;)){
	map.put(&quot;outTradeNo&quot;, vars.get(&quot;outTradeNo&quot;));
}else{
	log.info(&quot;****************获取outTradeNo失败****************&quot;);	
}
Date time = new Date();
SimpleDateFormat format = new SimpleDateFormat(&quot;yyMMddHHmmss&quot;) ;
map.put(&quot;tradeNo&quot;, vars.get(&quot;memberId&quot;)+format.format(time));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Quotation" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="基于PI报价" enabled="true">
            <stringProp name="TestPlan.comments">PI=public inquiry</stringProp>
          </GenericController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="定义PI与报价方" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1288482599">publicInquiryId</stringProp>
                <stringProp name="-1482120964">quoterMin</stringProp>
                <stringProp name="-1482121202">quoterMax</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1267082664">
                  <stringProp name="1541082499">473674</stringProp>
                  <stringProp name="1958102737">1003025</stringProp>
                  <stringProp name="1958102738">1003026</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="定义循环条件" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;keepQuote&quot;,&quot;true&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="遍历登录报价方并报价" enabled="true">
              <stringProp name="WhileController.condition">${keepQuote}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录用户" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


try{
long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
${__counter(TRUE,queue)};
map.put(&quot;loginName&quot;, String.valueOf(${quoterMin}+${queue}-1));
log.info(&quot;****************用户：&quot;+map.get(&quot;loginName&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));









//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="进行报价" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/pub/inquiry/officialQuota.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();

JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));
JSONArray priceTermList = commonList.getJSONArray(&quot;priceTermList&quot;);
JSONArray paymentWayList = commonList.getJSONArray(&quot;paymentWayList&quot;);
JSONArray imageList = commonList.getJSONArray(&quot;imageList&quot;);


Random random = new Random();
String text = &quot;鑫森淼焱垚犇骉猋鱻贔掱劦晶磊毳畾刕叒壵尛孨歮惢皛三众叒品晿雥矗&quot;;
String sheetText = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;

//固定入参
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//入参输入
map.put(&quot;inquiryId&quot;, vars.get(&quot;publicInquiryId&quot;));

map.put(&quot;quotationId&quot;, String.valueOf(${quoterMin}+${queue}-1)+&quot; on &quot;+ vars.get(&quot;publicInquiryId&quot;));

//type:0=正式，1=草稿
map.put(&quot;type&quot;, 0);

map.put(&quot;products&quot;, oujia.randomProduct(${__Random(1,20,)}, commonList));

JSONArray fees = new JSONArray();
for(int n=0; n&lt;10; n++){
	JSONObject fee = new JSONObject();
	fee.put(&quot;fees&quot;, &quot;第&quot;+String.valueOf(n)+&quot;种 Other Fee&quot;);
	StringBuffer feePattern = new StringBuffer();
	int feeIndex = random.nextInt(5);
	if(feeIndex==0){
		feePattern.append(&quot;0&quot;);
	}else{
		feePattern.append(&quot;0.&quot;);
		for(int j=0; j&lt;feeIndex; j++){
			feePattern.append(&quot;#&quot;);
		}
	}
	DecimalFormat feeFormat = new DecimalFormat(feePattern.toString());
	double d13 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	fee.put(&quot;price&quot;, feeFormat.format(d13).toString());
	fees.add(fee);
}
map.put(&quot;otherFees&quot;, fees.toJSONString());

map.put(&quot;priceTerms&quot;, priceTermList.get(random.nextInt(priceTermList.size())));

map.put(&quot;placeDelivery&quot;, &quot;这是Place of Delivery&quot;);

map.put(&quot;deliveryTime&quot;, ${__Random(1,9999,)});

map.put(&quot;validateTime&quot;, 10*${__Random(1,6,)});

map.put(&quot;paymentWay&quot;, paymentWayList.get(random.nextInt(paymentWayList.size())));

JSONObject bankAccount = new JSONObject();
bankAccount.put(&quot;accountNum&quot;, vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;accountName&quot;, &quot;account name:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;swiftCode&quot;, vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;beneficiaryBank&quot;, &quot;bank:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;bank address:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;remark&quot;, &quot;bank account remark:&quot;+vars.get(&quot;publicInquiryId&quot;));
map.put(&quot;bankAccount&quot;, bankAccount.toJSONString());

JSONArray tradeTerms = new JSONArray();
for(int o=0; o&lt;${__Random(1,10,)}; o++){
	String tradeTerm = &quot;这是第&quot;+String.valueOf(o)+&quot;种 Trade Term&quot;;
	tradeTerms.add(tradeTerm);    
}
map.put(&quot;tradeTerms&quot;, tradeTerms.toJSONString());

map.put(&quot;remark&quot;, &quot;这是基于public inquiry的quotation&quot;);

//***随机赋予remark image
int a1 = random.nextInt(6)+1;
map.put(&quot;remarkImg&quot;, oujia.randomImage(a1, imageList));

//入参输入结束



//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Beanshell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		if((${quoterMin}+${queue}-1)&gt;=${quoterMax}){
			vars.put(&quot;keepQuote&quot;, &quot;false&quot;);
			log.info(&quot;**********************Quote结束************************&quot;);
		}
		
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="公共方法" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环：批量改头像" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="输入用户名和密码" enabled="true">
              <stringProp name="BeanShellSampler.query">int loginUser = 1003002;
${__counter(TRUE,user)};
String loginPassword = &quot;f492a324fbf16d306ee09f5d0ac5e1eb&quot;;
vars.put(&quot;loginUser&quot;, String.valueOf(${user}+1003001));
vars.put(&quot;loginPassword&quot;, loginPassword);
log.info(&quot;****************&quot;+${user}+&quot;****************&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录这个用户" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;loginUser&quot;));
map.put(&quot;password&quot;, vars.get(&quot;loginPassword&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
		log.info(&quot;****************&quot;+vars.get(&quot;loginUser&quot;)+&quot;登录成功获取tokenId****************&quot;);
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改头像" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/editHeadImg.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//头像列表
String[] headImageList = {&quot;2066c008-8d77-11e8-836c-206a8a7896d1&quot;,&quot;20e32050-8d77-11e8-89c5-206a8a7896d1&quot;,&quot;20e7f9cc-8d77-11e8-abf9-206a8a7896d1&quot;,&quot;20ee6a42-8d77-11e8-bb55-206a8a7896d1&quot;,&quot;20f55a10-8d77-11e8-b4b5-206a8a7896d1&quot;,&quot;20fab800-8d77-11e8-b22c-206a8a7896d1&quot;,&quot;2101ac74-8d77-11e8-8a66-206a8a7896d1&quot;,&quot;2106cc24-8d77-11e8-97b5-206a8a7896d1&quot;,&quot;210ff72c-8d77-11e8-9824-206a8a7896d1&quot;,&quot;2116f9ec-8d77-11e8-93b2-206a8a7896d1&quot;,&quot;215dc398-8d77-11e8-8111-206a8a7896d1&quot;,&quot;21680fda-8d77-11e8-a045-206a8a7896d1&quot;,&quot;21acfe94-8d77-11e8-bf72-206a8a7896d1&quot;,&quot;21b70690-8d77-11e8-a16c-206a8a7896d1&quot;,&quot;21bd3b5c-8d77-11e8-b98d-206a8a7896d1&quot;,&quot;21c46624-8d77-11e8-b31b-206a8a7896d1&quot;,&quot;21cb95a8-8d77-11e8-a79e-206a8a7896d1&quot;,&quot;21d15b18-8d77-11e8-9e41-206a8a7896d1&quot;,&quot;21d7ce40-8d77-11e8-bab9-206a8a7896d1&quot;,&quot;21dd91f0-8d77-11e8-9234-206a8a7896d1&quot;,&quot;21e42dae-8d77-11e8-90a8-206a8a7896d1&quot;,&quot;21ea2b38-8d77-11e8-9caf-206a8a7896d1&quot;,&quot;21efec9a-8d77-11e8-87be-206a8a7896d1&quot;,&quot;21fc784a-8d77-11e8-8059-206a8a7896d1&quot;,&quot;2202550a-8d77-11e8-9314-206a8a7896d1&quot;,&quot;2209a546-8d77-11e8-8788-206a8a7896d1&quot;,&quot;220ec836-8d77-11e8-8e5b-206a8a7896d1&quot;,&quot;2214870c-8d77-11e8-bc0e-206a8a7896d1&quot;,&quot;221bee64-8d77-11e8-a34c-206a8a7896d1&quot;,&quot;2222c65c-8d77-11e8-8559-206a8a7896d1&quot;,&quot;222b241a-8d77-11e8-ab06-206a8a7896d1&quot;,&quot;22314a54-8d77-11e8-b760-206a8a7896d1&quot;,&quot;22397ad0-8d77-11e8-81e5-206a8a7896d1&quot;,&quot;22407810-8d77-11e8-9278-206a8a7896d1&quot;,&quot;22469454-8d77-11e8-ac82-206a8a7896d1&quot;,&quot;2277b870-8d77-11e8-ae4e-206a8a7896d1&quot;,&quot;227dd6dc-8d77-11e8-8629-206a8a7896d1&quot;,&quot;22840cd4-8d77-11e8-a3b7-206a8a7896d1&quot;,&quot;229775de-8d77-11e8-a141-206a8a7896d1&quot;,&quot;229f63b0-8d77-11e8-9846-206a8a7896d1&quot;,&quot;22a60776-8d77-11e8-b6ca-206a8a7896d1&quot;,&quot;22da966c-8d77-11e8-bb9c-206a8a7896d1&quot;,&quot;22e18a6c-8d77-11e8-b9e2-206a8a7896d1&quot;,&quot;22e89c80-8d77-11e8-bb4f-206a8a7896d1&quot;,&quot;231660ec-8d77-11e8-a93c-206a8a7896d1&quot;,&quot;231dc5e2-8d77-11e8-a2ec-206a8a7896d1&quot;,&quot;2325835c-8d77-11e8-b051-206a8a7896d1&quot;,&quot;232be686-8d77-11e8-9c2b-206a8a7896d1&quot;,&quot;2331dd30-8d77-11e8-91f3-206a8a7896d1&quot;,&quot;23393ddc-8d77-11e8-95cf-206a8a7896d1&quot;,&quot;233f5098-8d77-11e8-a056-206a8a7896d1&quot;,&quot;23479850-8d77-11e8-beb1-206a8a7896d1&quot;,&quot;234e9438-8d77-11e8-b57a-206a8a7896d1&quot;,&quot;2354b7a8-8d77-11e8-a5a3-206a8a7896d1&quot;,&quot;235acdb4-8d77-11e8-ae1b-206a8a7896d1&quot;,&quot;2360f57e-8d77-11e8-a62f-206a8a7896d1&quot;,&quot;23679ba8-8d77-11e8-81ca-206a8a7896d1&quot;,&quot;236edd2c-8d77-11e8-9f78-206a8a7896d1&quot;,&quot;2374fc82-8d77-11e8-bfdb-206a8a7896d1&quot;,&quot;237b99d4-8d77-11e8-9a6a-206a8a7896d1&quot;,&quot;23813f7e-8d77-11e8-8581-206a8a7896d1&quot;,&quot;23896518-8d77-11e8-a976-206a8a7896d1&quot;,&quot;239f62e6-8d77-11e8-b4cc-206a8a7896d1&quot;,&quot;23a64026-8d77-11e8-aebb-206a8a7896d1&quot;,&quot;23f225b4-8d77-11e8-9316-206a8a7896d1&quot;,&quot;23ff64fe-8d77-11e8-b326-206a8a7896d1&quot;,&quot;24077f3e-8d77-11e8-99ec-206a8a7896d1&quot;,&quot;240d6546-8d77-11e8-a101-206a8a7896d1&quot;,&quot;2416902c-8d77-11e8-b7df-206a8a7896d1&quot;,&quot;241d3c36-8d77-11e8-a716-206a8a7896d1&quot;,&quot;246d6e88-8d77-11e8-95d8-206a8a7896d1&quot;,&quot;24b2cfee-8d77-11e8-a077-206a8a7896d1&quot;,&quot;24be9082-8d77-11e8-bf66-206a8a7896d1&quot;,&quot;24c90b6e-8d77-11e8-9286-206a8a7896d1&quot;,&quot;24d72cae-8d77-11e8-ad95-206a8a7896d1&quot;,&quot;24e18136-8d77-11e8-9644-206a8a7896d1&quot;,&quot;24e9abc2-8d77-11e8-bb22-206a8a7896d1&quot;,&quot;24f481a2-8d77-11e8-a68f-206a8a7896d1&quot;,&quot;24fd8a9e-8d77-11e8-9cfe-206a8a7896d1&quot;,&quot;2547c1e4-8d77-11e8-a599-206a8a7896d1&quot;,&quot;2555723e-8d77-11e8-83d4-206a8a7896d1&quot;,&quot;255ea8b0-8d77-11e8-a52a-206a8a7896d1&quot;,&quot;2570d288-8d77-11e8-b7e2-206a8a7896d1&quot;,&quot;25c08078-8d77-11e8-8a8a-206a8a7896d1&quot;,&quot;260f9ac0-8d77-11e8-a9a1-206a8a7896d1&quot;,&quot;261ee29a-8d77-11e8-a5af-206a8a7896d1&quot;,&quot;26374880-8d77-11e8-9d2a-206a8a7896d1&quot;,&quot;2640758c-8d77-11e8-9ce3-206a8a7896d1&quot;,&quot;26498324-8d77-11e8-b320-206a8a7896d1&quot;,&quot;265362d4-8d77-11e8-8ad0-206a8a7896d1&quot;,&quot;2660bca8-8d77-11e8-8b4b-206a8a7896d1&quot;,&quot;26ae2612-8d77-11e8-881b-206a8a7896d1&quot;,&quot;26b62688-8d77-11e8-a5da-206a8a7896d1&quot;,&quot;26c0879a-8d77-11e8-a687-206a8a7896d1&quot;,&quot;26faa7c0-8d77-11e8-9d34-206a8a7896d1&quot;,&quot;270822a2-8d77-11e8-b94e-206a8a7896d1&quot;,&quot;2715cdca-8d77-11e8-a7ef-206a8a7896d1&quot;,&quot;271ea326-8d77-11e8-9127-206a8a7896d1&quot;,&quot;2726dbd8-8d77-11e8-865b-206a8a7896d1&quot;,&quot;2731cf7a-8d77-11e8-be67-206a8a7896d1&quot;,&quot;273b398c-8d77-11e8-ba6d-206a8a7896d1&quot;,&quot;27483210-8d77-11e8-a2d6-206a8a7896d1&quot;,&quot;274cdffe-8d77-11e8-b360-206a8a7896d1&quot;,&quot;27562798-8d77-11e8-b442-206a8a7896d1&quot;,&quot;275f4954-8d77-11e8-81de-206a8a7896d1&quot;,&quot;276620fa-8d77-11e8-9c1d-206a8a7896d1&quot;,&quot;276b7a86-8d77-11e8-8587-206a8a7896d1&quot;,&quot;2773ad5e-8d77-11e8-8f0f-206a8a7896d1&quot;,&quot;27bad738-8d77-11e8-a3fc-206a8a7896d1&quot;,&quot;27c5b070-8d77-11e8-91e4-206a8a7896d1&quot;,&quot;27cd4dd0-8d77-11e8-9f4a-206a8a7896d1&quot;,&quot;27d4fb08-8d77-11e8-b749-206a8a7896d1&quot;,&quot;27dc895c-8d77-11e8-b11a-206a8a7896d1&quot;,&quot;27e435e2-8d77-11e8-bce2-206a8a7896d1&quot;,&quot;27ea4f30-8d77-11e8-bec8-206a8a7896d1&quot;,&quot;27f1c29c-8d77-11e8-baae-206a8a7896d1&quot;,&quot;27f7ccd0-8d77-11e8-8a40-206a8a7896d1&quot;,&quot;2839ca48-8d77-11e8-9e7b-206a8a7896d1&quot;,&quot;2842d01a-8d77-11e8-bf4e-206a8a7896d1&quot;,&quot;284a4682-8d77-11e8-8939-206a8a7896d1&quot;,&quot;28755de8-8d77-11e8-9bab-206a8a7896d1&quot;,&quot;28a79d86-8d77-11e8-99ec-206a8a7896d1&quot;,&quot;28ae0c12-8d77-11e8-ac0a-206a8a7896d1&quot;,&quot;28b271ca-8d77-11e8-9588-206a8a7896d1&quot;,&quot;28b80cc2-8d77-11e8-8f54-206a8a7896d1&quot;,&quot;28bee7b4-8d77-11e8-9942-206a8a7896d1&quot;,&quot;2902ecc6-8d77-11e8-b0be-206a8a7896d1&quot;,&quot;290bf2c8-8d77-11e8-934c-206a8a7896d1&quot;,&quot;291e4464-8d77-11e8-a408-206a8a7896d1&quot;,&quot;292534a2-8d77-11e8-9458-206a8a7896d1&quot;,&quot;292cac10-8d77-11e8-81cf-206a8a7896d1&quot;,&quot;2975b598-8d77-11e8-bfac-206a8a7896d1&quot;,&quot;29b4640c-8d77-11e8-9388-206a8a7896d1&quot;,&quot;29eb8b6c-8d77-11e8-ab00-206a8a7896d1&quot;,&quot;2a371b42-8d77-11e8-900b-206a8a7896d1&quot;,&quot;2a3ef10a-8d77-11e8-b96a-206a8a7896d1&quot;,&quot;2a4661b8-8d77-11e8-96b1-206a8a7896d1&quot;,&quot;2a4c6ac6-8d77-11e8-9890-206a8a7896d1&quot;,&quot;2a529662-8d77-11e8-83ce-206a8a7896d1&quot;,&quot;2a589fa2-8d77-11e8-840f-206a8a7896d1&quot;,&quot;2aa3a386-8d77-11e8-ba8d-206a8a7896d1&quot;,&quot;2aadbe0a-8d77-11e8-8b3f-206a8a7896d1&quot;,&quot;2ab90b22-8d77-11e8-af7c-206a8a7896d1&quot;,&quot;2ac084e8-8d77-11e8-b150-206a8a7896d1&quot;,&quot;2ac5c914-8d77-11e8-81ef-206a8a7896d1&quot;,&quot;2acbec1c-8d77-11e8-b5e1-206a8a7896d1&quot;,&quot;2ad13ee8-8d77-11e8-945b-206a8a7896d1&quot;,&quot;2ad6004a-8d77-11e8-902f-206a8a7896d1&quot;,&quot;2add7410-8d77-11e8-b849-206a8a7896d1&quot;};

//以下为接口可变参数
int number = random.nextInt(headImageList.length);
map.put(&quot;headImg&quot;, headImageList[number]);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：新建OfferTag" enabled="true">
            <stringProp name="TestPlan.comments">addTagOK需要在上个sample赋值true或false</stringProp>
            <stringProp name="IfController.condition">${addTagOK}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建随机几个tag" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${path}/newOfferTag.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//定义循环控制变量
${__counter(TRUE,addTagQueue)};
//以下为接口可变参数
int newCount = 50-Integer.valueOf(vars.get(&quot;tagcount_1&quot;));
StringBuffer sb = new StringBuffer();
int num = random.nextInt(newCount)+1;
for(int i=0; i&lt;num; i++){
	char korean = (char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1)));
	if(i&lt;num-1){
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag:&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;+&quot;,&quot;);
	}else{
	 sb.append(&quot;\&quot;&quot;+vars.get(&quot;userId&quot;)+&quot;のtag:&quot;+korean+Integer.toString(random.nextInt(10000))+korean+&quot;\&quot;&quot;);
	}
}
map.put(&quot;offerTagName&quot;, &quot;[&quot;+sb.toString()+&quot;]&quot;);


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加好友" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="确定添加模式" enabled="true">
              <stringProp name="BeanShellSampler.query">//添加模式：
//0=只有这两个互相成为好友即一对一，minUser和maxUser两者之间
//1=某些人成为某个人的好友即一对多，theOne和minUser到maxUser之间的用户
//2=两者之间的人互相都成为好友即多对多，minUser和maxUser之间的用户
vars.put(&quot;howAdd&quot;, &quot;1&quot;);
//min必须比max小
vars.put(&quot;minUser&quot;, &quot;1001200&quot;);
vars.put(&quot;maxUser&quot;, &quot;1001210&quot;);
//一对多需要在此定义这个一是谁，多在上面的minUser和maxUser定义
vars.put(&quot;theOne&quot;, &quot;1001199&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：一对一加好友" enabled="true">
              <stringProp name="IfController.condition">&quot;${howAdd}&quot;==&quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录加人方" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;minUser&quot;));
log.info(&quot;****************发送方：&quot;+vars.get(&quot;minUser&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取senderTagId" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		if(tagList.size()&lt;1){
			log.info(&quot;****************这位用户没有好友分组****************&quot;);
		}else{
			while(true){
				int choice = random.nextInt(tagList.size());
				if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
					vars.put(&quot;senderTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
					log.info(&quot;****************获取分组成功****************&quot;);
					break;
				}
			}
		}		
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="加人方发送请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/addStangeUser.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));


//以下为接口可变参数

map.put(&quot;stranUserId&quot;, vars.get(&quot;maxUser&quot;));
map.put(&quot;addRemark&quot;, String.valueOf(${minUser})+&quot; request to add &quot;+map.get(&quot;stranUserId&quot;)+&quot; as friend&quot;);
map.put(&quot;tagId&quot;, vars.get(&quot;senderTagId&quot;));
//加好友来源，0=search，1=contacts，2=name card，3=custom contacts
map.put(&quot;from&quot;, String.valueOf(random.nextInt(4)));
map.put(&quot;nickName&quot;, vars.get(&quot;minUser&quot;)+&quot;对&quot;+vars.get(&quot;maxUser&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录被加方" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;maxUser&quot;));
log.info(&quot;****************接收方：&quot;+vars.get(&quot;maxUser&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取receiverTagId" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		while(true){
			int choice = random.nextInt(tagList.size());
			if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
				vars.put(&quot;receiverTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
				log.info(&quot;****************获取分组成功****************&quot;);
				break;
			}
		}	
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="被加方同意" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/acceptStangeUser.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

//以下为接口可变参数
map.put(&quot;stranUserId&quot;, vars.get(&quot;minUser&quot;));
map.put(&quot;tagId&quot;, vars.get(&quot;receiverTagId&quot;));
map.put(&quot;nickName&quot;, vars.get(&quot;maxUser&quot;)+&quot;对&quot;+vars.get(&quot;minUserder&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：一对多加好友" enabled="true">
              <stringProp name="IfController.condition">&quot;${howAdd}&quot;==&quot;1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="初始化结束遍历条件" enabled="true">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;AddOK&quot;, &quot;true&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录加人方" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
vars.put(&quot;sender&quot;, vars.get(&quot;theOne&quot;));
map.put(&quot;loginName&quot;, vars.get(&quot;sender&quot;));
log.info(&quot;****************发送方：&quot;+vars.get(&quot;sender&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;senderTokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While：没遍历完" enabled="true">
                <stringProp name="WhileController.condition">${AddOK}</stringProp>
              </WhileController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="确认被加方数组" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.ArrayList;


try{
//	如果max和min之间
	int min = Integer.valueOf(vars.get(&quot;minUser&quot;));
	int max = Integer.valueOf(vars.get(&quot;maxUser&quot;));
	int[] users = new int[max-min+1];
	for(int i=0; i&lt;max-min+1; i++){
		users[i] = min + i;
	}
	vars.put(&quot;total&quot;, String.valueOf(max-min+1));
	${__counter(TRUE,queue)};
	vars.put(&quot;receiver&quot;, users[${queue}-1].toString());
	log.info(&quot;****************Receiver=&quot;+vars.get(&quot;receiver&quot;)+&quot;****************&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;senderTokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取senderTagId" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		if(tagList.size()&lt;1){
			log.info(&quot;****************这位用户没有好友分组****************&quot;);
		}else{
			while(true){
				int choice = random.nextInt(tagList.size());
				if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
					vars.put(&quot;senderTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
					log.info(&quot;****************获取分组成功****************&quot;);
					break;
				}
			}
		}		
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="加人方发送请求" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/addStangeUser.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;senderTokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));


//以下为接口可变参数

map.put(&quot;stranUserId&quot;, vars.get(&quot;receiver&quot;));
map.put(&quot;addRemark&quot;, map.get(&quot;stranUserId&quot;)+&quot; request to add &quot;+String.valueOf(${minUser})+&quot; as friend&quot;);
map.put(&quot;tagId&quot;, vars.get(&quot;senderTagId&quot;));
//加好友来源，0=search，1=contacts，2=name card，3=custom contacts
map.put(&quot;from&quot;, String.valueOf(random.nextInt(4)));
map.put(&quot;nickName&quot;, vars.get(&quot;sender&quot;)+&quot;对&quot;+vars.get(&quot;receiver&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录被加方" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;receiver&quot;));
log.info(&quot;****************接收方：&quot;+vars.get(&quot;receiver&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;receiverTokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;receiverTokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取receiverTagId" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		while(true){
			int choice = random.nextInt(tagList.size());
			if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
				vars.put(&quot;receiverTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
				log.info(&quot;****************获取分组成功****************&quot;);
				break;
			}
		}	
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="被加方同意" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/acceptStangeUser.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;receiverTokenId&quot;));

//以下为接口可变参数
map.put(&quot;stranUserId&quot;, vars.get(&quot;sender&quot;));
map.put(&quot;tagId&quot;, vars.get(&quot;receiverTagId&quot;));
map.put(&quot;nickName&quot;, vars.get(&quot;receiver&quot;)+&quot;对&quot;+vars.get(&quot;sender&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="终止循环断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">try{
	if(${queue}==Integer.valueOf(vars.get(&quot;total&quot;))){
		Failure = true;
		FailureMessage = &quot;所有加好友组合遍历完毕，此处断言用来终止遍历！！！&quot;;
		vars.put(&quot;AddOK&quot;, &quot;false&quot;);
	}
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：多对多加好友" enabled="true">
              <stringProp name="IfController.condition">&quot;${howAdd}&quot;==&quot;2&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="初始化结束遍历条件" enabled="true">
                <stringProp name="BeanShellSampler.query">vars.put(&quot;AddOK&quot;, &quot;true&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While：没遍历完" enabled="true">
                <stringProp name="WhileController.condition">${AddOK}</stringProp>
              </WhileController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="确认要添加的双方" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.ArrayList;


try{
//	如果max和min之间
	int min = Integer.valueOf(vars.get(&quot;minUser&quot;));
	int max = Integer.valueOf(vars.get(&quot;maxUser&quot;));
	int[] users = new int[max-min+1];
	for(int i=0; i&lt;max-min+1; i++){
	  users[i] = min + i;
	}
	int first = max-min;
	int second = max-min;
	int third = 2;
	//这里用ArrayList&lt;ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt;  list = new ArrayList&lt;ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt;()直接定义三维动态数组方便点，可惜jmeter不支持泛型
	int[][][] combination = new int[first][second][third];
	for(int j=0; j&lt;first; j++){
		for(int k=j; k&lt;second; k++){
			combination[j][k][0] = users[j];
			combination[j][k][1] = users[k+1];
		}
	}
	int total = (max-min)*(max-min+1)/2;
	vars.put(&quot;total&quot;, String.valueOf(total));
	
	ArrayList combine = new ArrayList();
	for(int l=0; l&lt;first; l++){
		for(int m=0; m&lt;second; m++){
			if(combination[l][m][0]!=0 &amp;&amp; combination[l][m][1]!=0){
				combine.add(combination[l][m][0]);
				combine.add(combination[l][m][1]);
			}
		}
	}
	${__counter(TRUE,queue)};
	vars.put(&quot;sender&quot;, String.valueOf(combine.get(2*${queue}-2)));
	vars.put(&quot;receiver&quot;, String.valueOf(combine.get(2*${queue}-1)));
	log.info(&quot;****************Sender=&quot;+vars.get(&quot;sender&quot;)+&quot;****************&quot;);
	log.info(&quot;****************Receiver=&quot;+vars.get(&quot;receiver&quot;)+&quot;****************&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}

//三维动态数组写法
//int min = Integer.valueOf(vars.get(&quot;minUser&quot;));
//int max = Integer.valueOf(vars.get(&quot;maxUser&quot;))
//ArrayList&lt;Integer&gt; users = new ArrayList&lt;Integer&gt;();
//for(int i=0; i&lt;(max-min+1); i++){
//	users.add(min+i);
//}
//int num = (max-min)*(max-min+1)/2;
////用类似手机信号的模型去模拟，每一轮共max-min个，然后将头部的那个去掉，剩下的再开始一轮，这样就不会重复了
//ArrayList&lt;ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt;  list = new ArrayList&lt;ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt;();
//for(int j=0; j&lt;(max-min+1); j++){
//	ArrayList&lt;ArrayList&lt;Integer&gt;&gt; listSub = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
//	for(int k=j+1; k&lt;(max-min+1); k++){
//		ArrayList&lt;Integer&gt; listSubSub = new ArrayList&lt;Integer&gt;();
//		listSubSub.add(users.get(j));
//		listSubSub.add(users.get(k));
//		listSub.add(listSubSub);
//	}
//	list.add(listSub);//二维数组放到集合中
//}
//ArrayList combination = new ArrayList();
//for(int l=0; l&lt;list.size(); l++){
//	for(int m=0; m&lt;list.get(l).size(); m++){
//		combination.add(list.get(l).get(m));
//	}
//}</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录加人方" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;sender&quot;));
log.info(&quot;****************发送方：&quot;+vars.get(&quot;sender&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取senderTagId" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		if(tagList.size()&lt;1){
			log.info(&quot;****************这位用户没有好友分组****************&quot;);
		}else{
			while(true){
				int choice = random.nextInt(tagList.size());
				if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
					vars.put(&quot;senderTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
					log.info(&quot;****************获取分组成功****************&quot;);
					break;
				}
			}
		}		
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="加人方发送请求" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/addStangeUser.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
Random random = new Random();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));


//以下为接口可变参数

map.put(&quot;stranUserId&quot;, vars.get(&quot;receiver&quot;));
map.put(&quot;addRemark&quot;, map.get(&quot;stranUserId&quot;)+&quot; request to add &quot;+String.valueOf(${minUser})+&quot; as friend&quot;);
map.put(&quot;tagId&quot;, vars.get(&quot;senderTagId&quot;));
//加好友来源，0=search，1=contacts，2=name card，3=custom contacts
map.put(&quot;from&quot;, String.valueOf(random.nextInt(4)));
map.put(&quot;nickName&quot;, vars.get(&quot;sender&quot;)+&quot;对&quot;+vars.get(&quot;receiver&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录被加方" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/login.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;loginName&quot;, vars.get(&quot;receiver&quot;));
log.info(&quot;****************接收方：&quot;+vars.get(&quot;receiver&quot;)+&quot;登录****************&quot;);
map.put(&quot;password&quot;, oujia.saltyPwd(&quot;Aa123456&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取token" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;data&quot;)) {
		vars.put(&quot;tokenId&quot;, response.getJSONObject(&quot;data&quot;).getString(&quot;tokenId&quot;).toString());
	}else{
		log.info(&quot;****************登录失败****************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取其好友分组" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/queryUserTag.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
//以下为接口可变参数







//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取receiverTagId" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;response&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回&quot;;
}else{
	Failure = false;
	JSONObject response = JSONObject.parseObject(vars.get(&quot;response&quot;));
	if(response.containsKey(&quot;tagList&quot;)){
		JSONArray tagList = response.getJSONArray(&quot;tagList&quot;);
		while(true){
			int choice = random.nextInt(tagList.size());
			if(!tagList.getJSONObject(choice).getString(&quot;tagName&quot;).equals(&quot;Custom Supplier&quot;)){
				vars.put(&quot;receiverTagId&quot;, tagList.getJSONObject(choice).getString(&quot;tagId&quot;));
				log.info(&quot;****************获取分组成功****************&quot;);
				break;
			}
		}	
	}else{
		log.info(&quot;*****************这位用户没有好友分组***************&quot;);
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="被加方同意" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${path}/acceptStangeUser.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

//以下为接口可变参数
map.put(&quot;stranUserId&quot;, vars.get(&quot;sender&quot;));
map.put(&quot;tagId&quot;, vars.get(&quot;receiverTagId&quot;));
map.put(&quot;nickName&quot;, vars.get(&quot;receiver&quot;)+&quot;对&quot;+vars.get(&quot;sender&quot;)+&quot;の昵称&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="终止循环断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">try{
	if(${queue}==Integer.valueOf(vars.get(&quot;total&quot;))){
		Failure = true;
		FailureMessage = &quot;所有加好友组合遍历完毕，此处断言用来终止遍历！！！&quot;;
		vars.put(&quot;AddOK&quot;, &quot;false&quot;);
	}
}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TEMPLATE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${path}/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();
Random random = new Random();
Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Beanshell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size() &gt; 0) {
			int num = random.nextInt(response.size());
			vars.put(&quot;&quot;, response.getJSONObject(num).getInteger(&quot;&quot;).toString());
			log.info(&quot;****************=&quot;++&quot;****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="在此DEBUG" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.HashMap;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.AesUtils;

try {
//	在这里输入代码可以报出完整的error

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
AesUtils aes = new AesUtils();

JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));
JSONArray unitList = commonList.getJSONArray(&quot;unitList&quot;);
JSONArray priceTermList = commonList.getJSONArray(&quot;priceTermList&quot;);
JSONArray paymentWayList = commonList.getJSONArray(&quot;paymentWayList&quot;);
JSONArray imageList = commonList.getJSONArray(&quot;imageList&quot;);
JSONArray sheetList = commonList.getJSONArray(&quot;sheetList&quot;);
JSONArray currencyList = commonList.getJSONArray(&quot;currencyList&quot;);

Random random = new Random();
String text = &quot;鑫森淼焱垚犇骉猋鱻贔掱劦晶磊毳畾刕叒壵尛孨歮惢皛三众叒品晿雥矗&quot;;
String sheetText = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;

//固定入参
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//入参输入
vars.put(&quot;publicInquiryId&quot;, &quot;47223&quot;);
map.put(&quot;inquiryId&quot;, vars.get(&quot;publicInquiryId&quot;));

map.put(&quot;quotationId&quot;, String.valueOf(2)+&quot; on &quot;+ vars.get(&quot;publicInquiryId&quot;));

//type:0=正式，1=草稿
map.put(&quot;type&quot;, 0);

JSONArray quoteProducts = new JSONArray();
//币种需要相同
String uniformCurrency = currencyList.get(random.nextInt(currencyList.size()));
for(int i=0; i&lt;${__Random(1,20,)}; i++){
	
	JSONObject product = new JSONObject();

	product.put(&quot;productName&quot;, &quot;这是QuotationのProduct&quot;+ text.substring(0,random.nextInt(31)));
	
	int imageNum = random.nextInt(9)+1;
	int imageIndex = -1;
	StringBuffer productImg = new StringBuffer();
	for(int m=0; m&lt;imageNum; m++){
		if(m&lt;imageNum-1){
			imageIndex = random.nextInt(imageList.size());
			productImg.append(imageList.get(imageIndex)).append(&quot;,&quot;);
		}else{
			imageIndex = random.nextInt(imageList.size());
			productImg.append(imageList.get(imageIndex));
		}
	}
	product.put(&quot;productImg&quot;, productImg.toString());
	
	product.put(&quot;productQuantity&quot;, random.nextInt(100)+1);
	
	StringBuffer pricePattern = new StringBuffer();
	int index2 = random.nextInt(5);
	if(index2==0){
		pricePattern.append(&quot;0&quot;);
	}else{
		pricePattern.append(&quot;0.&quot;);
		for(int j=0; j&lt;index2; j++){
			pricePattern.append(&quot;#&quot;);
		}
	}
	DecimalFormat priceFormat2 = new DecimalFormat(pricePattern.toString());
	double d2 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	product.put(&quot;productPrice&quot;, priceFormat2.format(d2).toString());
	
	product.put(&quot;productPriceCry&quot;, uniformCurrency);
	
	product.put(&quot;productUnit&quot;, unitList.get(random.nextInt(unitList.size())));

	JSONArray chosenSheet = new JSONArray();
	int num = random.nextInt(sheetList.size());
	for(int l=0; l&lt;num; l++){
		int newNum = random.nextInt(sheetList.size());
		// 随机给sheetValue赋值
		//下面这个new不能拿到循环外，不然会造成{&quot;$ref&quot;:&quot;$[0]&quot;}
		JSONObject sheet = new JSONObject();
		StringBuffer sheetValue = new StringBuffer();
		int valueLength = random.nextInt(sheetText.length());
		for (int k = 0; k &lt; valueLength; k++) {
			int number = random.nextInt(sheetText.length());
			sheetValue.append(sheetText.charAt(number));
		}
		sheet.put(&quot;sheetName&quot;, sheetList.get(newNum).getString(&quot;sheetName&quot;));
		sheet.put(&quot;sheetValue&quot;, sheetValue.toString());
		chosenSheet.add(sheet);
		sheetList.remove(newNum);
	}
	product.put(&quot;productArrSheet&quot;, chosenSheet.toJSONString());
	
	product.put(&quot;remark&quot;, &quot;This is Quotation Remark&quot;);

	int remarkImgNum = random.nextInt(6)+1;
	int remarkImageIndex = -1;
	StringBuffer remarkImg = new StringBuffer();
	for(int m=0; m&lt;remarkImgNum; m++){
		if(m&lt;remarkImgNum-1){
			remarkImageIndex = random.nextInt(imageList.size());
			remarkImg.append(imageList.get(remarkImageIndex)).append(&quot;,&quot;);
		}else{
			remarkImageIndex = random.nextInt(imageList.size());
			remarkImg.append(imageList.get(remarkImageIndex));
		}
	}
	product.put(&quot;remarkImg&quot;, remarkImg.toString());
	quoteProducts.add(product);
}
map.put(&quot;products&quot;, quoteProducts.toJSONString());

JSONArray fees = new JSONArray();
for(int n=0; n&lt;10; n++){
	JSONObject fee = new JSONObject();
	fee.put(&quot;fees&quot;, &quot;第&quot;+String.valueOf(n)+&quot;种 Other Fee&quot;);
	StringBuffer feePattern = new StringBuffer();
	int feeIndex = random.nextInt(5);
	if(feeIndex==0){
		feePattern.append(&quot;0&quot;);
	}else{
		feePattern.append(&quot;0.&quot;);
		for(int j=0; j&lt;feeIndex; j++){
			feePattern.append(&quot;#&quot;);
		}
	}
	DecimalFormat feeFormat = new DecimalFormat(feePattern.toString());
	double d13 = random.nextFloat()*(Math.pow(10, random.nextInt(6)));
	fee.put(&quot;price&quot;, feeFormat.format(d13).toString());
	fees.add(fee);
}
map.put(&quot;otherFees&quot;, fees.toJSONString());

map.put(&quot;priceTerms&quot;, priceTermList.get(random.nextInt(priceTermList.size())));

map.put(&quot;placeDelivery&quot;, &quot;这是Place of Delivery&quot;);

map.put(&quot;deliveryTime&quot;, ${__Random(1,9999,)});

map.put(&quot;validateTime&quot;, 10*${__Random(1,6,)});

map.put(&quot;paymentWay&quot;, paymentWayList.get(random.nextInt(paymentWayList.size())));

JSONObject bankAccount = new JSONObject();
bankAccount.put(&quot;accountNum&quot;, vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;accountName&quot;, &quot;account name:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;swiftCode&quot;, vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;beneficiaryBank&quot;, &quot;bank:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;bank address:&quot;+vars.get(&quot;publicInquiryId&quot;));
bankAccount.put(&quot;remark&quot;, &quot;bank account remark:&quot;+vars.get(&quot;publicInquiryId&quot;));
map.put(&quot;bankAccount&quot;, bankAccount.toJSONString());

JSONArray tradeTerms = new JSONArray();
for(int o=0; o&lt;${__Random(1,10,)}; o++){
	String tradeTerm = &quot;这是第&quot;+String.valueOf(o)+&quot;种 Trade Term&quot;;
	tradeTerms.add(tradeTerm);    
}
map.put(&quot;tradeTerms&quot;, tradeTerms.toJSONString());

map.put(&quot;remark&quot;, &quot;这是基于public inquiry的quotation&quot;);

//***随机赋予remark image
int a1 = random.nextInt(6)+1;
int a3 = -1;
StringBuffer a2 = new StringBuffer();
for(int m=0; m&lt;a1; m++){
	if(m&lt;a1-1){
		a3 = random.nextInt(imageList.size());
		a2.append(imageList.get(a3)).append(&quot;,&quot;);
	}else{
		a3 = random.nextInt(imageList.size());
		a2.append(imageList.get(a3));
	}
}
map.put(&quot;remarkImg&quot;, a2.toString());

}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组：Customer" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="配置用户" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1370822415">loginUserId</stringProp>
            <stringProp name="1216985755">password</stringProp>
            <stringProp name="3208616">host</stringProp>
            <stringProp name="3446913">port</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-922664929">
              <stringProp name="1958102679">1003009</stringProp>
              <stringProp name="2138274831">f492a324fbf16d306ee09f5d0ac5e1eb</stringProp>
              <stringProp name="-2071820130">hzdev.offerplus.com</stringProp>
              <stringProp name="1786">82</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录用户并获取Cookie" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">user/login.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数

String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
request.put(&quot;loginName&quot;, vars.get(&quot;loginUserId&quot;));
request.put(&quot;password&quot;, vars.get(&quot;password&quot;));

String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);

map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));

map.put(&quot;timestamp&quot;, String.valueOf(L));


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message">主账号没有登录成功！！！</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="取register mode" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		vars.put(&quot;emailRegister&quot;, &quot;false&quot;);
		vars.put(&quot;phoneRegister&quot;, &quot;false&quot;);
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;registerMode&quot;)){
			//0：邮箱注册，1：手机注册
			if(response.getString(&quot;registerMode&quot;).equals(&quot;0&quot;)){
				vars.put(&quot;emailRegister&quot;, &quot;true&quot;);
				log.info(&quot;***************此人邮箱注册的*************&quot;);
			}else{
				vars.put(&quot;phoneRegister&quot;, &quot;true&quot;);
				log.info(&quot;***************此人手机注册的*************&quot;);
			}
		}else{
			log.info(&quot;***************此人没有注册方式*************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Account" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.获取Profile" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">account/profile.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.修改头像" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改头像" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/editHeadImg.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));
JSONArray imageList = commonList.getJSONArray(&quot;imageList&quot;);
//保存新图片用于断言 
String newImage = oujia.randomImage(1, imageList);
request.put(&quot;headImg&quot;, newImage);
vars.put(&quot;newImage&quot;, newImage);

//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证修改成功" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/profile.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言是否返回新头像" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;headImg&quot;)) {
			if(response.getString(&quot;headImg&quot;).equals(vars.get(&quot;newImage&quot;))){
				Failure = false;	
				log.info(&quot;******************头像修改成功*******************&quot;);
			}else{
				Failure = true;
				log.info(&quot;******************头像修改失败*******************&quot;);
			}
		}else{
			Failure = true;
			log.info(&quot;******************头像都没有了*******************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.修改用户名" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改用户名" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/editUserName.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();

Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;firstName&quot;, vars.get(&quot;loginUserId&quot;)+&quot;の姓&quot;+(char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1))));
request.put(&quot;lastName&quot;, vars.get(&quot;loginUserId&quot;)+&quot;の名&quot;+(char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1))));
vars.put(&quot;newName&quot;, request.getString(&quot;firstName&quot;)+&quot; &quot;+request.getString(&quot;lastName&quot;));
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证修改成功" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/profile.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言是否返回新名字" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;userName&quot;)) {
			if(response.getString(&quot;userName&quot;).equals(vars.get(&quot;newName&quot;))){
				Failure = false;	
				log.info(&quot;******************用户名修改成功*******************&quot;);
			}else{
				Failure = true;
				log.info(&quot;******************用户名修改失败*******************&quot;);
			}
		}else{
			Failure = true;
			log.info(&quot;******************用户名都没有了*******************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.申请试用" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">这个接口适合手动调试，压测时建议屏蔽</stringProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请试用" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/requestTrial.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();

Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//type:0判断公司审核情况 1提交试用申请
request.put(&quot;type&quot;, &quot;0&quot;);
request.put(&quot;productTotal&quot;, ${__Random(1,10,)});
request.put(&quot;subAccountTotal&quot;, ${__Random(1,10,)});
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.获取和修改个人设置" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改个人设置" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/settings/save.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;userStrangeStatus&quot;, ${__Random(0,1,)});
request.put(&quot;userSearchStatus&quot;, ${__Random(0,1,)});
vars.put(&quot;privateSetting&quot;, request.getString(&quot;userStrangeStatus&quot;)+request.getString(&quot;userStrangeStatus&quot;));
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取个人设置" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">account/settings.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="判断修改是否生效" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;bindCountry&quot;) &amp;&amp; response.containsKey(&quot;userSearchStatus&quot;) &amp;&amp; response.containsKey(&quot;userStrangeStatus&quot;) &amp;&amp; (response.containsKey(&quot;bindPhone&quot;) || response.containsKey(&quot;userEmail&quot;))) {
			if((response.getString(&quot;userStrangeStatus&quot;)+response.getString(&quot;userStrangeStatus&quot;)).equals(vars.get(&quot;privateSetting&quot;))){
				log.info(&quot;****************个人设置保存成功****************&quot;);
			}else{
				log.info(&quot;****************个人设置保存失败****************&quot;);
			}			
			
		}else{
			log.info(&quot;****************必有参数中少了几个****************&quot;);	
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.绑定/解绑" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：手机注册可改邮箱" enabled="true">
              <stringProp name="IfController.condition">${phoneRegister}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="看看有无邮箱" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">account/settings.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="判断是否有邮箱" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		vars.put(&quot;userHasEmail&quot;, &quot;false&quot;);
		vars.put(&quot;userNoEmail&quot;, &quot;false&quot;);
		if(response.containsKey(&quot;bindCountry&quot;) &amp;&amp; response.containsKey(&quot;userSearchStatus&quot;) &amp;&amp; response.containsKey(&quot;userStrangeStatus&quot;) &amp;&amp; (response.containsKey(&quot;bindPhone&quot;) || response.containsKey(&quot;userEmail&quot;))) {
			if(response.containsKey(&quot;userEmail&quot;)){
				vars.put(&quot;userHasEmail&quot;, &quot;true&quot;);
				vars.put(&quot;hisEmail&quot;, response.getString(&quot;userEmail&quot;));
				log.info(&quot;****************这人现在有邮箱可以换绑****************&quot;);
			}else{
				vars.put(&quot;userNoEmail&quot;, &quot;true&quot;);
				log.info(&quot;****************这人没邮箱得先绑定****************&quot;);
			}			
		}else{
			log.info(&quot;****************必有参数中少了几个****************&quot;);	
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:有邮箱" enabled="true">
                <stringProp name="IfController.condition">${userHasEmail}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请解绑验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">email/loginSendEmailCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;email&quot;, vars.get(&quot;hisEmail&quot;));
//checkType：2绑定邮箱 3解绑邮箱 4修改密码
request.put(&quot;checkType&quot;, &quot;3&quot;);
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取解绑验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_checkcode where email = &quot;${hisEmail}&quot; and check_type = 3 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">unBindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请换绑验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">email/loginSendEmailCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
if(vars.get(&quot;hisEmail&quot;).length()%2==0){
	vars.put(&quot;hisNewEmail&quot;, vars.get(&quot;loginUserId&quot;)+&quot;@oujia.com&quot;);	
}else{
	vars.put(&quot;hisNewEmail&quot;, vars.get(&quot;loginUserId&quot;)+&quot;K@oujia.com&quot;);
}

request.put(&quot;email&quot;, vars.get(&quot;hisNewEmail&quot;));
//checkType：2绑定邮箱 3解绑邮箱 4修改密码
request.put(&quot;checkType&quot;, &quot;2&quot;);
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取换绑验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_checkcode where email = &quot;${hisNewEmail}&quot; and check_type = 2 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">bindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="换绑邮箱" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">account/replaceEmail.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

JSONObject request = new JSONObject();
//入参输入

request.put(&quot;email&quot;, vars.get(&quot;hisNewEmail&quot;));
request.put(&quot;unbindCode&quot;, ${unBindCode_1});
request.put(&quot;bindCode&quot;, ${bindCode_1});
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证换帮成功" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;userEmail&quot;)) {
			if(response.getString(&quot;userEmail&quot;).equals(vars.get(&quot;hisNewEmail&quot;))){
				Failure = false;
				log.info(&quot;****************换绑成功****************&quot;);
			}else{
				log.info(&quot;****************换绑失败****************&quot;);
			}
			
		}else{
			log.info(&quot;****************必然返回的邮箱却没有****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:无邮箱" enabled="true">
                <stringProp name="IfController.condition">${userNoEmail}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请绑定验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">email/loginSendEmailCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
vars.put(&quot;hisEmail&quot;, vars.get(&quot;loginUserId&quot;)+&quot;@oujia.com&quot;);
request.put(&quot;email&quot;, vars.get(&quot;hisEmail&quot;));
//checkType：2绑定邮箱 3解绑邮箱 4修改密码
request.put(&quot;checkType&quot;, &quot;2&quot;);
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取绑定验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_checkcode where email = &quot;${hisEmail}&quot; and check_type = 2 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">bindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="绑定邮箱" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">account/bindEmail.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

JSONObject request = new JSONObject();
//入参输入

request.put(&quot;email&quot;, vars.get(&quot;hisEmail&quot;));
request.put(&quot;checkCode&quot;, ${bindCode_1});
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证绑定成功" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;email&quot;)) {
			if(response.getString(&quot;email&quot;).equals(vars.get(&quot;hisEmail&quot;))){
				Failure = false;
				log.info(&quot;****************绑定成功****************&quot;);
			}else{
				log.info(&quot;****************绑定失败****************&quot;);
			}
			
		}else{
			log.info(&quot;****************必然返回的邮箱却没有****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：邮箱注册可改手机" enabled="true">
              <stringProp name="IfController.condition">${emailRegister}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="看看有无手机" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">account/settings.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="判断是否有手机" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		vars.put(&quot;userHasPhone&quot;, &quot;false&quot;);
		vars.put(&quot;userNoPhone&quot;, &quot;false&quot;);
		if(response.containsKey(&quot;userSearchStatus&quot;) &amp;&amp; response.containsKey(&quot;userStrangeStatus&quot;) &amp;&amp; (response.containsKey(&quot;bindPhone&quot;) || response.containsKey(&quot;userEmail&quot;))) {
			if(response.containsKey(&quot;bindPhone&quot;)){
				vars.put(&quot;userHasPhone&quot;, &quot;true&quot;);
				//目前都是中国，所以用86前缀
				vars.put(&quot;hisPhone&quot;, response.getString(&quot;bindPhone&quot;));
				vars.put(&quot;hisCountry&quot;, response.getString(&quot;bindCountry&quot;));
				vars.put(&quot;hisWholePhone&quot;, response.getString(&quot;bindCountry&quot;).split(&quot;_&quot;)[1]+vars.get(&quot;hisPhone&quot;));
				log.info(&quot;****************这人现在有手机可以换绑****************&quot;);
			}else{
				vars.put(&quot;userNoPhone&quot;, &quot;true&quot;);
				log.info(&quot;****************这人没手机得先绑定****************&quot;);
			}			
		}else{
			log.info(&quot;****************必有参数中少了几个****************&quot;);	
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:有手机" enabled="true">
                <stringProp name="IfController.condition">${userHasPhone}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请解绑验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">phone/loginSendPhoneCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();

//入参输入
//checkType：0绑定 1 解绑 2修改密码
request.put(&quot;checkType&quot;, &quot;1&quot;);
//入参输入结束

map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取解绑验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_sms_code where phone = &quot;${hisWholePhone}&quot; and check_type = 1 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">unBindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout">60</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请换绑验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">phone/loginSendPhoneCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();


if(Long.parseLong(vars.get(&quot;hisPhone&quot;))%2==0){
	vars.put(&quot;hisNewPhone&quot;, vars.get(&quot;loginUserId&quot;)+&quot;2333&quot;);	
}else{
	vars.put(&quot;hisNewPhone&quot;, vars.get(&quot;loginUserId&quot;)+&quot;6666&quot;);
}
vars.put(&quot;hisNewWholePhone&quot;, vars.get(&quot;hisCountry&quot;).split(&quot;_&quot;)[1]+vars.get(&quot;hisNewPhone&quot;));
request.put(&quot;bindPhone&quot;, vars.get(&quot;hisNewPhone&quot;));
request.put(&quot;bindCountry&quot;, vars.get(&quot;hisCountry&quot;));
//checkType：0绑定 1 解绑 2修改密码
request.put(&quot;checkType&quot;, &quot;0&quot;);
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取换绑验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_sms_code where phone = &quot;${hisNewWholePhone}&quot; and check_type = 0 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">bindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout">60</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="换绑手机" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">account/replacePhone.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

JSONObject request = new JSONObject();
//入参输入

request.put(&quot;bindPhone&quot;, vars.get(&quot;hisNewPhone&quot;));
request.put(&quot;bindCountry&quot;, vars.get(&quot;hisCountry&quot;));
request.put(&quot;unBindCode&quot;, ${unBindCode_1});
request.put(&quot;bindCode&quot;, ${bindCode_1});
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证换绑成功" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;bindPhone&quot;)&amp;&amp;response.containsKey(&quot;bindCountry&quot;)) {
			if(response.getString(&quot;bindPhone&quot;).equals(vars.get(&quot;hisNewPhone&quot;))){
				Failure = false;
				log.info(&quot;****************换绑成功****************&quot;);
			}else{
				log.info(&quot;****************换绑失败****************&quot;);
			}
			
		}else{
			log.info(&quot;****************必然返回的手机却没有****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:无手机" enabled="true">
                <stringProp name="IfController.condition">${userNoPhone}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请绑定验证码" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">phone/loginSendPhoneCode.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
vars.put(&quot;hisNewWholePhone&quot;, &quot;86&quot;+vars.get(&quot;loginUserId&quot;)+&quot;2333&quot;);
vars.put(&quot;hisNewPhone&quot;, vars.get(&quot;loginUserId&quot;)+&quot;2333&quot;);

request.put(&quot;bindPhone&quot;, vars.get(&quot;hisNewPhone&quot;));
request.put(&quot;bindCountry&quot;, &quot;China_86&quot;);
//checkType：0绑定 1 解绑 2修改密码
request.put(&quot;checkType&quot;, &quot;0&quot;);
//入参输入结束

String encrypted = oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取绑定验证码" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select check_code from ejet_sms_code where phone = &quot;${hisNewWholePhone}&quot; and check_type = 0 order by update_time desc limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">bindCode</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout">60</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="绑定手机" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">account/bindPhone.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();

JSONObject request = new JSONObject();
//入参输入

request.put(&quot;bindPhone&quot;, vars.get(&quot;hisNewPhone&quot;));
request.put(&quot;bindCountry&quot;, &quot;China_86&quot;);
request.put(&quot;checkCode&quot;, ${bindCode_1});
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证绑定成功" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.containsKey(&quot;bindPhone&quot;)) {
			if(response.getString(&quot;bindPhone&quot;).equals(vars.get(&quot;hisNewPhone&quot;))){
				Failure = false;
				log.info(&quot;****************绑定成功****************&quot;);
			}else{
				log.info(&quot;****************绑定失败****************&quot;);
			}
			
		}else{
			log.info(&quot;****************必然返回的邮箱却没有****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Catalog" enabled="false">
          <stringProp name="TestPlan.comments">自动跑的流程，如果要手动调试的话注意1和4是必须开的</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.Catalog一级列表" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">catalog/list.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 50);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
//request.put(&quot;searchFilts&quot;, &quot;&quot;);
//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);
//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);	
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取CategoryId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;notCategoryMax&quot;, &quot;false&quot;);
	vars.put(&quot;hasCategory&quot;, &quot;false&quot;);
	try{
		JSONObject data = JSONObject.parseObject(vars.get(&quot;data&quot;));
		JSONArray response = data.getJSONArray(&quot;list&quot;);
		JSONArray result = new JSONArray();
		if(data.getInteger(&quot;total&quot;)&gt;0){
			//判断category是否超限		
			if(data.getInteger(&quot;total&quot;)&lt;50){
				vars.put(&quot;notCategoryMax&quot;, &quot;true&quot;);
			}
			if(response.size()&gt;0){
				vars.put(&quot;hasCategory&quot;, &quot;true&quot;);
				//去要删的category id
				vars.put(&quot;toDeleteCategoryId&quot;, String.valueOf(response.getJSONObject(random.nextInt(response.size())).getInteger(&quot;categoryId&quot;)));
				//从category中随机取一个category id用于改名和新增
				vars.put(&quot;categoryId&quot;, String.valueOf(response.getJSONObject(random.nextInt(response.size())).getInteger(&quot;categoryId&quot;)));		
			}
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.重命名Category" enabled="false">
            <stringProp name="IfController.condition">${hasCategory}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="重命名Category" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">catalog/rename.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;categoryId&quot;, vars.get(&quot;categoryId&quot;));
request.put(&quot;catalogName&quot;, &quot;这是&quot;+vars.get(&quot;loginUserId&quot;)+&quot;のCategory&quot;+vars.get(&quot;categoryId&quot;));
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="3.新增Category" enabled="true">
            <stringProp name="IfController.condition">${notCategoryMax}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增Category" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">catalog/add.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;catalogName&quot;, &quot;这是&quot;+vars.get(&quot;loginUserId&quot;)+&quot;のCategory&quot;+L);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="4.Catalog二级列表" enabled="true">
            <stringProp name="IfController.condition">${hasCategory}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Catalog二级列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">catalog/product/list.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 30);
request.put(&quot;categoryId&quot;, vars.get(&quot;categoryId&quot;));

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);
JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);
//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="判断能否增删" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		vars.put(&quot;canAddProduct&quot;, &quot;false&quot;);
		vars.put(&quot;canDeleteProduct&quot;, &quot;false&quot;);
		vars.put(&quot;categoryProductList&quot;, &quot;[]&quot;);
		JSONObject data = JSONObject.parseObject(vars.get(&quot;data&quot;));
		JSONArray response = data.getJSONArray(&quot;list&quot;);
		if(data.getInteger(&quot;total&quot;)&lt;200){
			vars.put(&quot;canAddProduct&quot;, &quot;true&quot;);
			log.info(&quot;****************产品未满200个可以往里面加产品****************&quot;);
		}
		if(data.getInteger(&quot;total&quot;)&gt;0){
			vars.put(&quot;canDeleteProduct&quot;, &quot;true&quot;);
			log.info(&quot;****************there are products that can be deleted****************&quot;);
			vars.put(&quot;categoryProductList&quot;, response.toJSONString());
			vars.put(&quot;existedProductTotal&quot;, String.valueOf(data.getInteger(&quot;total&quot;)));
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="5.增删产品" enabled="true">
            <stringProp name="IfController.condition">${hasCategory}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:能增加产品" enabled="true">
              <stringProp name="IfController.condition">${canAddProduct}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by time一级列表" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 50);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="列表是否为空" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size()&gt;0) {
			vars.put(&quot;hasProduct&quot;, &quot;true&quot;);
			vars.put(&quot;productList&quot;, response.toJSONString());
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:列表非空" enabled="true">
                <stringProp name="IfController.condition">${hasProduct}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="增加产品" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">catalog/product/add.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
Random random = new Random();
//入参输入

try{

JSONArray productList = JSONArray.parseArray(vars.get(&quot;productList&quot;));
JSONArray categoryProductList = JSONArray.parseArray(vars.get(&quot;categoryProductList&quot;));
JSONArray toAddId = new JSONArray();

int addNumber = random.nextInt(200-Integer.parseInt(vars.get(&quot;existedProductTotal&quot;)))+1;
int index = -1;
for(int i=0; i&lt;addNumber; i++){
	if(productList.size()&gt;0){
		index = random.nextInt(productList.size());
		toAddId.add(productList.getJSONObject(index).getInteger(&quot;offerId&quot;));
		productList.remove(index);	
	}
}
request.put(&quot;categoryId&quot;, vars.get(&quot;categoryId&quot;));
request.put(&quot;productId&quot;, toAddId.toJSONString().substring(1,toAddId.toJSONString().length()-1));

}
catch (Throwable ex) {
    log.error(&quot;Something went wrong&quot;, ex);
    throw ex;
}

//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if:能删除产品" enabled="true">
              <stringProp name="IfController.condition">${canDeleteProduct}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除产品" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">catalog/product/remove.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
Random random = new Random();
JSONArray categoryProductList = JSONArray.parseArray(vars.get(&quot;categoryProductList&quot;));
JSONArray toDeleteId = new JSONArray();

int deleteNumber = random.nextInt(categoryProductList.size())+1;
int index = -1;
for(int i=0; i&lt;deleteNumber; i++){
	if(categoryProductList.size()&gt;0){
		index = random.nextInt(categoryProductList.size());
		toDeleteId.add(categoryProductList.getJSONObject(index).getInteger(&quot;productId&quot;));
		categoryProductList.remove(index);
	}
}

request.put(&quot;categoryId&quot;, vars.get(&quot;categoryId&quot;));
request.put(&quot;productId&quot;, toDeleteId.toJSONString().substring(1,toDeleteId.toJSONString().length()-1));
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="6.删除Category" enabled="false">
            <stringProp name="IfController.condition">${hasCategory}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除Category" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">catalog/delete.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;categoryId&quot;, vars.get(&quot;toDeleteCategoryId&quot;));

//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Product" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.by time一级列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.by tag一级列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/byTag.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 50);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取offerTagId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		JSONArray result = new JSONArray();
		vars.put(&quot;notEmptyTag&quot;, &quot;false&quot;);
		if(response.size()&gt;0) {
			for(int i=0; i&lt;response.size(); i++){
				if(response.getJSONObject(i).getInteger(&quot;productTotal&quot;).equals(0)){
					continue;
				}else{
					result.add(response.getJSONObject(i));
				}	
			}
			if(result.size()&gt;0){
				vars.put(&quot;offerTagId&quot;, result.getJSONObject(random.nextInt(result.size())).getInteger(&quot;offerTagId&quot;).toString());
				vars.put(&quot;notEmptyTag&quot;, &quot;true&quot;);
			}else{
				log.info(&quot;*************这个用户的所有tag都没有产品**************&quot;);	
			}
		}else{
			log.info(&quot;*************这个用户没有任何tag**************&quot;);	
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.by tag二级列表" enabled="false"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：选的tag有产品" enabled="true">
              <stringProp name="IfController.condition">${notEmptyTag}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="by tag二级列表" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">product/byTag/list.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);
request.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="4.by tag一级重命名" enabled="false">
            <stringProp name="IfController.condition">${notEmptyTag}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="by tag一级重命名" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">product/byTag/rename.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));
request.put(&quot;name&quot;, vars.get(&quot;loginUserId&quot;)+&quot;のTag&quot;+vars.get(&quot;offerTagId&quot;));

//request.put(&quot;offerTagId&quot;, &quot;24251&quot;);
//request.put(&quot;name&quot;, &quot;201807241447&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.by tag一级移除" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/byTag/del.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            <stringProp name="TestPlan.comments">这个只是把tag给移除掉，这个产品是还在的</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.by tag一级新增" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/byTag/add.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;name&quot;, vars.get(&quot;loginUserId&quot;)+&quot;のTag&quot;+(char) ( 44032 + (int)(Math.random() * (55203 - 44032 + 1))));

//request.put(&quot;name&quot;, &quot;201807241447&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.by supplier一级列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/bySupplier.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取supplier" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		vars.put(&quot;notEmptySupplier&quot;, &quot;false&quot;);
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size() &gt; 0) {
			int num = random.nextInt(response.size());
			vars.put(&quot;contactUserId&quot;, response.getJSONObject(num).getInteger(&quot;contactUserId&quot;).toString());
			vars.put(&quot;contactStatus&quot;, response.getJSONObject(num).getInteger(&quot;contactStatus&quot;).toString());
			vars.put(&quot;notEmptySupplier&quot;, &quot;true&quot;);
		}else{
			log.info(&quot;*****************这人by supplier都没人****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="8.by supplier二级列表" enabled="false"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if：by supplier一级非空" enabled="true">
              <stringProp name="IfController.condition">${notEmptySupplier}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="by supplier二级列表" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">product/bySupplier/list.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);
request.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
request.put(&quot;contactStatus&quot;, vars.get(&quot;contactStatus&quot;));

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="9.by supplier一级删除" enabled="false">
            <stringProp name="IfController.condition">${notEmptySupplier}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="by supplier一级列表删除" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">product/bySupplier/del.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
request.put(&quot;contactStatus&quot;, vars.get(&quot;contactStatus&quot;));

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.by member一级列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">product/byMember.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机取member" enabled="true">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		vars.put(&quot;notEmptyMember&quot;, &quot;false&quot;);
		JSONArray result = new JSONArray();
		if(response.size()&gt;0) {
			for(int i=0; i&lt;response.size(); i++){
				if(response.getJSONObject(i).getInteger(&quot;productTotal&quot;).equals(0)){
					continue;
				}else{
					result.add(response.getJSONObject(i));
				}	
			}
			if(result.size()&gt;0){
                    vars.put(&quot;userId&quot;, String.valueOf(result.getJSONObject(random.nextInt(result.size())).getInteger(&quot;userId&quot;)));
				vars.put(&quot;notEmptyMember&quot;, &quot;true&quot;);
			}else{
				log.info(&quot;*************这个用户的所有member都没有产品**************&quot;);	
			}
		}else{
			log.info(&quot;*************这个用户没有任何member**************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="11.by member二级列表" enabled="false">
            <stringProp name="IfController.condition">${notEmptyMember}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="by member二级列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">product/byMember/list.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);
request.put(&quot;contactUserId&quot;, vars.get(&quot;userId&quot;));

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

//排序字段
//request.put(&quot;sortField&quot;, &quot;&quot;);

//排序规则
//request.put(&quot;sortOrder&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12.复制my product" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
            <stringProp name="TestPlan.comments">目前判断一次只能复制一个</stringProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.随机获取目标offerId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数

//以下为接口可变参数
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId和存详情" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size()&gt;0) {
		JSONObject original = response.getJSONObject(random.nextInt(response.size()));
		vars.put(&quot;hasProduct&quot;, &quot;true&quot;);
		vars.put(&quot;originalOfferId&quot;, String.valueOf(original.getInteger(&quot;offerId&quot;)));
		
		original.remove(&quot;createTime&quot;);
		original.remove(&quot;offerId&quot;);
		original.remove(&quot;offerNo&quot;);
		vars.put(&quot;originalProduct&quot;, original.toJSONString());
		
//		log.info(&quot;****************myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.if:有产品可复制" enabled="true">
              <stringProp name="IfController.condition">${hasProduct}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Copy此offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">product/copy.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();


//以下为接口可变参数
//productFrom:0=my product 1=公司产品 2received
request.put(&quot;productFrom&quot;, &quot;0&quot;);
//如果是已删除的offerId需要单独再获取一次
request.put(&quot;offerIds&quot;, vars.get(&quot;originalOfferId&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));
//log.info(&quot;****************被copy的myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取Copy后详情" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();

request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="与原版进行比较" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size()&gt;0) {
			JSONObject duplicate = response.getJSONObject(0);
			duplicate.remove(&quot;createTime&quot;);
			duplicate.remove(&quot;offerId&quot;);
			duplicate.remove(&quot;offerNo&quot;);
			if(duplicate.toJSONString().equals(vars.get(&quot;originalProduct&quot;))){
				Failure = false;
			}else{
				Failure = true;
				FailureMessage = &quot;复制后详情不一致&quot;;
			}
			vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
			vars.put(&quot;originalProduct&quot;, &quot;-1&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13.复制公司产品" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
            <stringProp name="TestPlan.comments">目前判断一次只能复制一个</stringProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.获取by member列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">product/byMember.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//以下为接口必传参数
request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="随机获取memberId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;hasMember&quot;, &quot;false&quot;);
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	JSONArray result = new JSONArray();
	if(response.size()&gt;0){
		for(int i=0; i&lt;response.size(); i++){
			if(response.getJSONObject(i).getInteger(&quot;productTotal&quot;)&gt;0){
				result.add(response.getJSONObject(i));
			}
		}
		if(result.size()&gt;0){
			JSONObject member = response.getJSONObject(random.nextInt(response.size()));
			vars.put(&quot;memberId&quot;, String.valueOf(member.getInteger(&quot;contactUserId&quot;)));
			vars.put(&quot;hasMember&quot;, &quot;true&quot;);
		}
		
	}else{
		vars.put(&quot;memberId&quot;, &quot;-1&quot;);
		log.info(&quot;****************公司里没人****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.if：公司有人" enabled="true">
              <stringProp name="IfController.condition">${hasMember}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.随机获取TA的某个产品" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">product/byMember/list.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();

request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 20);
request.put(&quot;contactUserId&quot;, vars.get(&quot;memberId&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));


//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId与详情" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size()&gt;0) {
		JSONObject original = response.getJSONObject(random.nextInt(response.size()));
		vars.put(&quot;hasProduct&quot;, &quot;true&quot;);
		vars.put(&quot;originalOfferId&quot;, String.valueOf(original.getInteger(&quot;offerId&quot;)));
		
		original.remove(&quot;createTime&quot;);
		original.remove(&quot;offerId&quot;);
		original.remove(&quot;offerNo&quot;);
		if(original.containsKey(&quot;contact&quot;)){
			original.remove(&quot;contact&quot;);
		}
		if(original.containsKey(&quot;offerTagName&quot;)){
			original.remove(&quot;offerTagName&quot;);
		}
		vars.put(&quot;originalProduct&quot;, original.toJSONString());
		
//		log.info(&quot;****************myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.if:有产品可复制" enabled="true">
                <stringProp name="IfController.condition">${hasProduct}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Copy此offer" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">product/copy.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();


//以下为接口可变参数
//productFrom:0=my product 1=公司产品 2received
request.put(&quot;productFrom&quot;, &quot;1&quot;);
//如果是已删除的offerId需要单独再获取一次
request.put(&quot;offerIds&quot;, vars.get(&quot;originalOfferId&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));
//log.info(&quot;****************被copy的myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取Copy后详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${body}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();

request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="与原版进行比较" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size()&gt;0) {
			JSONObject duplicate = response.getJSONObject(0);
			duplicate.remove(&quot;createTime&quot;);
			duplicate.remove(&quot;offerId&quot;);
			duplicate.remove(&quot;offerNo&quot;);
			if((!duplicate.getJSONObject(&quot;contact&quot;).getInteger(&quot;contactStatus&quot;).equals(0))||duplicate.containsKey(&quot;offerTagName&quot;)){
				Failure = true;
				FailureMessage = &quot;复制公司产品时未将contact和tag过滤掉&quot;;
			}else{
				duplicate.remove(&quot;contact&quot;);
				if(duplicate.toJSONString().equals(vars.get(&quot;originalProduct&quot;))){
					Failure = false;
				}else{
					Failure = true;
					FailureMessage = &quot;复制后详情不一致&quot;;
				}
			}
			vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
			vars.put(&quot;originalProduct&quot;, &quot;-1&quot;);
			vars.put(&quot;originalOfferId&quot;, &quot;-1&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14.删除my product" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">目前判断一次只能删除一个</stringProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.随机获取目标offerId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${body}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数

//以下为接口可变参数
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
                <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
	JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
	if(response.size()&gt;0) {
		JSONObject original = response.getJSONObject(random.nextInt(response.size()));
		vars.put(&quot;hasProduct&quot;, &quot;true&quot;);
		vars.put(&quot;originalOfferId&quot;, String.valueOf(original.getInteger(&quot;offerId&quot;)));
		
//		log.info(&quot;****************myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.if:有产品可删除" enabled="true">
              <stringProp name="IfController.condition">${hasProduct}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除此offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">product/delete.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">offerId从by time/tag/supplier等接口获取，含有已删除和未删除的offer</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();

request.put(&quot;offerIds&quot;, vars.get(&quot;originalOfferId&quot;));
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));
//log.info(&quot;****************被copy的myProductId=&quot;+vars.get(&quot;originalOfferId&quot;)+&quot;****************&quot;);

//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取删除后产品列表" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${body}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">product/byTime.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数

//以下为接口可变参数
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
request.put(&quot;page&quot;, &quot;1&quot;);
request.put(&quot;pageNum&quot;, &quot;20&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.list</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="确认没有被删产品" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size()&gt;0) {
			for(int i=0; i&lt;response.size(); i++){
				if(response.getJSONObject(i).getInteger(&quot;offerId&quot;).toString().equals(vars.get(&quot;originalOfferId&quot;))){
					Failure = true;
					FailureMessage = &quot;被删的产品还在&quot;;
				}
			}
		}
		vars.put(&quot;hasProduct&quot;, &quot;false&quot;);
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Favorite" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取收藏的产品列表" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">favorite/product/list.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="取收藏的询价列表" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">favorite/inquiry/list.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;page&quot;, 1);
request.put(&quot;pageNum&quot;, 15);

JSONArray intervalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray searchFilts = new JSONArray();
//request.put(&quot;searchFilts&quot;, &quot;&quot;);

JSONArray equalFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);

JSONArray multiFilts = new JSONArray();
//request.put(&quot;intervalFilts&quot;, intervalFilts);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TEMPLATE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;


long L = System.currentTimeMillis();

Map map = new HashMap();
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;&quot;, &quot;&quot;);
request.put(&quot;&quot;, &quot;&quot;);
//入参输入结束
map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString(), props.get(&quot;webKey&quot;))));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Beanshell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		JSONObject response = JSONObject.parseObject(vars.get(&quot;data&quot;));
		if(response.size() &gt; 0) {
			int num = random.nextInt(response.size());
			vars.put(&quot;&quot;, String.valueOf(response.getJSONObject(num).getInteger(&quot;&quot;)));
			log.info(&quot;****************=&quot;++&quot;****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DEBUG" enabled="false">
          <stringProp name="BeanShellSampler.query">import offerplus.Oujia;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;


Oujia oujia = new Oujia();
JSONObject commonList = JSONObject.parseObject(props.get(&quot;commonList&quot;));
String a = oujia.saltyPwd(&quot;Aa123456&quot;);
log.info(&quot;****************&quot;+a+&quot;*************&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组：Company" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="配置主账号" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1496737826">adminAccount</stringProp>
            <stringProp name="1216985755">password</stringProp>
            <stringProp name="3208616">host</stringProp>
            <stringProp name="3446913">port</stringProp>
            <stringProp name="3433509">path</stringProp>
            <stringProp name="1636031437">subAccount</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1552893459">
              <stringProp name="1958102672">1003002</stringProp>
              <stringProp name="2138274831">f492a324fbf16d306ee09f5d0ac5e1eb</stringProp>
              <stringProp name="-2071820130">hzdev.offerplus.com</stringProp>
              <stringProp name="1786">82</stringProp>
              <stringProp name="98689">com</stringProp>
              <stringProp name="1958102672">1003002</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环：要修改哪些子账号" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改子账号权限" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/account/authority/modify.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import offerplus.Oujia;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
${__counter(TRUE,order)};
//request.put(&quot;userId&quot;, Integer.valueOf(vars.get(&quot;order&quot;))+${adminAccount});
request.put(&quot;userId&quot;, String.valueOf(${subAccount}));
request.put(&quot;firstName&quot;, &quot;1003001の&quot;);
request.put(&quot;lastName&quot;, &quot;员工&quot;+request.getString(&quot;userId&quot;));

//是否能看company products 0=否，1=是
request.put(&quot;accessCompanyProducts&quot;, 1-random.nextInt(1));

//是否将我的产品加入company products 0=否，1=是
request.put(&quot;showProductOnCompany&quot;, 1-random.nextInt(1));

//是否属于company home页的contact列表
request.put(&quot;isContact&quot;, 1-random.nextInt(1));

//是否封禁这个帐号 0=否，1=是
request.put(&quot;accountStatus&quot;, random.nextInt(1));

//是否允许登录公司后台 0=否，1=是
if(random.nextInt(1)==1){
	request.put(&quot;allowAdmin&quot;, 1);
	//可以访问的模块，逗号隔开的字符串 account,public,insight,data
	request.put(&quot;accessModel&quot;, &quot;account&quot;);
}else{
	request.put(&quot;allowAdmin&quot;, 0);
}

//这个帐号的职位
request.put(&quot;position&quot;, &quot;开发部の员工No.&quot;+String.valueOf(Integer.valueOf(vars.get(&quot;order&quot;))+1));

//入参输入结束
String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改子账号名额" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}/account/setproductnum.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import offerplus.Oujia;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入

request.put(&quot;userId&quot;, 1003005);
request.put(&quot;count&quot;, 1);


//入参输入结束
String encrypted = oujia.webEncrypt(request.toJSONString(), KEY);
map.put(&quot;data&quot;, java.net.URLEncoder.encode(encrypted));
map.put(&quot;timestamp&quot;, String.valueOf(L));





//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TEMPLATE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${path}/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="拼接入参" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import offerplus.Oujia;

long L = System.currentTimeMillis();

Map map = new HashMap();
String KEY = &quot;viFZiOhDArcQTjkC&quot;;
Oujia oujia = new Oujia();
JSONObject request = new JSONObject();
//入参输入
request.put(&quot;&quot;, &quot;&quot;);
request.put(&quot;&quot;, &quot;&quot;);
//入参输入结束

map.put(&quot;data&quot;, java.net.URLEncoder.encode(oujia.webEncrypt(request.toJSONString())));
map.put(&quot;timestamp&quot;, String.valueOf(L));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">data</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">&quot;-1&quot;</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Beanshell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
Random random = new Random();
if(vars.get(&quot;data&quot;).equals(&quot;-1&quot;)){
	Failure = true;
	FailureMessage = &quot;无返回data&quot;;
}else{
	Failure = false;
	try{
		JSONArray response = JSONArray.parseArray(vars.get(&quot;data&quot;));
		if(response.size() &gt; 0) {
			int num = random.nextInt(response.size());
			vars.put(&quot;&quot;, response.getJSONObject(num).getInteger(&quot;&quot;).toString());
			log.info(&quot;****************=&quot;++&quot;****************&quot;);
		}
	}catch (Throwable ex) {
		log.error(&quot;Something went wrong&quot;, ex);
		throw ex;
	}
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DEBUG" enabled="false">
          <stringProp name="BeanShellSampler.query">${__counter(TRUE,order)};
log.info(&quot;***&quot;+vars.get(&quot;order&quot;)+&quot;***&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
