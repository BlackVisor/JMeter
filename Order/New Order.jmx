<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522115682000</longProp>
        <longProp name="ThreadGroup.end_time">1522115682000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">order.csv</stringProp>
          <stringProp name="fileEncoding">utf-8</stringProp>
          <stringProp name="variableNames">host,port,userId,packageName,appType,version,languagePack,source,isEncrypt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-CN;q=1</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">close</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Apache-HttpClient/4.2.5 (java 1.5)</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-开发" enabled="false">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://offerplus.imwork.net:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号的token" enabled="false">
            <stringProp name="dataSource">DB</stringProp>
            <stringProp name="query">select token_id from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">tokenId</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;tokenId_1&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="false">
            <stringProp name="dataSource">DB</stringProp>
            <stringProp name="query">select contact_user_id from (

SELECT user_id, contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = (SELECT user_id from ejet_user where user_id = &apos;${userId}&apos;) and contact_status = 0 limit 100

) t order by sort_column limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">contact_user_id</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contact_user_id_1&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="false">
            <stringProp name="dataSource">DB</stringProp>
            <stringProp name="query">select inter_contact_id from (

select inter_contact_id,RAND() sort_column from ejet_interim_contacts  where user_id = 
(SELECT user_id from ejet_user where user_id = &apos;${userId}&apos;) limit 100

) t order by sort_column limit 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">inter_contact_id</stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;interContactId&quot;, vars.get(&quot;inter_contact_id_1&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New Order" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${postData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/tradeOrder/newOrder.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">localhost</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="初始化数据" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

Random rand = new Random();
int r1 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
if(r1==1){
	map.put(&quot;contactType&quot;,&quot;1&quot;);//用户类型 0用户 1自定义联系人
	map.put(&quot;contactUserId&quot;, vars.get(&quot;interContactId&quot;));
}else{
	map.put(&quot;contactType&quot;,&quot;0&quot;);//用户类型 0用户 1自定义联系人
	map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
}
int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
map.put(&quot;role&quot;,r3.toString());//0买家 1卖家
int r4 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r4.toString());//部分发货：0否 1是

int irandom = rand.nextInt(1000) + 1;
String oid = &quot;O-&quot; + ${userId} + &quot;-&quot; + irandom;
map.put(&quot;orderId&quot;,oid);


JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 11; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

    int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;);
    json2.put(&quot;sheetValue&quot;, &quot;Brand:&quot;+i);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;+i);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    
    product.put(&quot;productName&quot;, &quot;new order&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is new order description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
    DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
    float f1 = rand3.nextFloat() * 10000;
    BigDecimal re1=new BigDecimal(Float.toString(f1));  
    s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is new order remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;leadTime&quot;, &quot;8999&quot;);
map.put(&quot;remark&quot;, &quot;this is order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

//delivery address
JSONObject deliveryAddress = new JSONObject();
deliveryAddress.put(&quot;deliveryAddress&quot;, &quot;Ningbo Port&quot;);
deliveryAddress.put(&quot;destination&quot;, &quot;BingJiang JiangNan Rord 128&quot;);
deliveryAddress.put(&quot;companyName&quot;, &quot;ICBC&quot;);
deliveryAddress.put(&quot;notifyParty&quot;, &quot;BingJiang JiangNan Rord 256&quot;);
deliveryAddress.put(&quot;tel&quot;, &quot;010-8888888&quot;);
deliveryAddress.put(&quot;email&quot;, &quot;5623186545@qq.com&quot;);
deliveryAddress.put(&quot;country&quot;, &quot;china&quot;);

map.put(&quot;deliveryAddress&quot;, JSONObject.toJSONString(deliveryAddress));
vars.put(&quot;deliveryAddress&quot;, JSONObject.toJSONString(deliveryAddress));

//bank account
JSONObject bankAccount = new JSONObject();
bankAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
bankAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
bankAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
bankAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
bankAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
bankAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(bankAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(bankAccount));

map.put(&quot;paymentWay&quot;, &quot;Pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;) || str[j].equals(&quot;deliveryAddress&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String postData = &quot;&quot;;

postData = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;postPro&quot;, java.net.URLEncoder.encode(postPro));
vars.put(&quot;postData&quot;, postData);</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取接口返回结果" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	//String encrypt = vars.get(&quot;data&quot;);
	String encrypt = -1;
	
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 

			// quotnId正则表达式规则
	          //String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
	          // 编译正则表达式
	          //Pattern pattern = Pattern.compile(regEx);
	          // 忽略大小写的写法
	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	          //Matcher matcher = pattern.matcher(jsonStr);
	          // 查找字符串中是否有匹配正则表达式的字符/字符串
	          //while(matcher.find()) {
	        	   //获取匹配字符串
		        //String rs = matcher.group(1);
		        //vars.put(&quot;sendQuotnId&quot;, rs);
               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
