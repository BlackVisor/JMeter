<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522115682000</longProp>
        <longProp name="ThreadGroup.end_time">1522115682000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">order.csv</stringProp>
          <stringProp name="fileEncoding">utf-8</stringProp>
          <stringProp name="variableNames">host,port,userId,packageName,appType,version,languagePack,source,isEncrypt,</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-CN;q=1</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">close</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Apache-HttpClient/4.2.5 (java 1.5)</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-开发" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://offerplus.imwork.net:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="参数配置" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="确定买卖双方ID" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;seller&quot;, &quot;1001200&quot;);//卖家
vars.put(&quot;buyer&quot;, &quot;1001221&quot;);//买家
vars.put(&quot;userId&quot;, vars.get(&quot;supplier&quot;));
vars.put(&quot;contactUserId&quot;, vars.get(&quot;buyer&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号的token" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select token_id from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">tokenId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;tokenId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select contact_user_id from (

SELECT user_id, contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = (SELECT user_id from ejet_user where user_id = &apos;${userId}&apos;) and contact_status = 0 limit 100

) order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contact_user_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contact_user_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select inter_contact_id, inter_contact_email from (

select inter_contact_id, inter_contact_email, RAND() sort_column from ejet_interim_contacts  where user_id = 
${userId} and inter_contact_email &lt;&gt; &apos;&apos; and inter_contact_status = 0 limit 100

) order by sort_column limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;interContactId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;interContactEmail&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1-1 新建订单-对方是自定义联系人" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.自定义联系人邮箱非空" enabled="true">
              <stringProp name="IfController.condition">&quot;${interContactEmail}&quot; != &quot;&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="3.自定义联系人id非空" enabled="true">
                <stringProp name="IfController.condition">${interContactId} &gt; 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="4.自定义联系人邮箱有没有注册" enabled="true">
                  <stringProp name="dataSource">DB</stringProp>
                  <stringProp name="query">
/* 这里是要找下邮箱存不存在 */
select user_email from ejet_user where user_email =&apos;${interContactEmail}&apos;   limit 1</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">user_email</stringProp>
                </JDBCSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">vars.put(&quot;customEmail&quot;, vars.get(&quot;user_email_1&quot;));</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="new order for custom" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${PostPro}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/offerplus/tradeOrder/newOrder.do?</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

//-----------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------
//----------------------------以上为必传参数-------------------------------------------------------
//-----------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------

Random rand = new Random();
int r0 = rand.nextInt(100) % 2;//随机 0，1，用于区分这个订单我是卖家还是买家
//int r0 = 1;
map.put(&quot;role&quot;,r0);//自己角色 0买家 1卖家

map.put(&quot;contactType&quot;,&quot;1&quot;);
map.put(&quot;contactUserId&quot;, vars.get(&quot;interContactId&quot;));
if(vars.get(&quot;customEmail&quot;) != null ){
	map.put(&quot;replace&quot;,&quot;1&quot;);//contacttype为1时，表示替换自定义联系人为邮箱注册人 自定义联系人有email时可不传email 没有是必传email字段
	map.put(&quot;email&quot;,vars.get(&quot;customEmail&quot;));
}else{
	map.put(&quot;replace&quot;,&quot;0&quot;);
	map.put(&quot;email&quot;,vars.get(&quot;interContactEmail&quot;));
}

int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
int r4 = rand.nextInt(100) % 2;int r5 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r5);//是否允许部分发货 0否 1是

int irandom = rand.nextInt(100000) + 1;
String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
map.put(&quot;orderId&quot;,oid);


JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

//-----------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------
//----------------------------以下为参数组装-------------------------------------------------------
//-----------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                  </BeanShellTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">data</stringProp>
                    <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">-1</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1-2.新建订单系统联系人" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1-2.3系统联系人有没有注册" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">
select user_id validContactUserId from ejet_user where user_id = &apos;${contactUserId}&apos;   limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">validContactUserId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;validContactUserId&quot;, vars.get(&quot;validContactUserId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="2.验证系统联系人" enabled="true">
              <stringProp name="IfController.condition">${validContactUserId} != null</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="newOrder sys" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/newOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

Random rand = new Random();
int r0 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
//int r0 = 1;
map.put(&quot;role&quot;,r0);//自己角色 0买家 1卖家

map.put(&quot;contactType&quot;,&quot;0&quot;);
map.put(&quot;contactUserId&quot;, vars.get(&quot;validContactUserId&quot;));

//int r2 = rand.nextInt(100) % 2;
int r2 = 0;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
int r4 = rand.nextInt(100) % 2;
int r5 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r5);//是否允许部分发货 0否 1是

int irandom = rand.nextInt(100000) + 1;
String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
map.put(&quot;orderId&quot;,oid);


JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

//for (int j = 0; j &lt; str.length; j ++) {
//  sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//  if (j != str.length -1) {
//      sb2.append(&quot;&amp;&quot;);
//  }
//  if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
//      continue;
//  } else {
//      sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//      if (j != str.length -1) {
//          sb.append(&quot;&amp;&quot;);
//      }
//  } 
//}

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
String jsonStr = vars.get(&quot;data&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
	try{
		jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
		FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr;                
	}catch(Exception e){
		FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
		Failure = true;			
	}	
} 
else {
	FailureMessage = &quot;成功，未解密的json串：&quot; + jsonStr; 
	vars.put(&quot;jsonStr&quot;, jsonStr);
		vars.put(&quot;jsonStr1&quot;, jsonStr);
		// quotnId正则表达式规则
	String regEx = &quot;\&quot;oId\&quot;:(.+?)}&quot;;
	// 编译正则表达式
	Pattern pattern = Pattern.compile(regEx);
	// 忽略大小写的写法
	// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(jsonStr);
	// 查找字符串中是否有匹配正则表达式的字符/字符串
	boolean isfind = false;
	while(matcher.find()) {
		   //获取匹配字符串
		String rs = matcher.group(1);
		//		      System.out.println(rs);
		vars.put(&quot;o_id&quot;, rs);
		isfind = true;
		break;
	 }
	 if(!isfind){
	 	vars.put(&quot;o_id&quot;, &quot;&quot;);
	 }		
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.卖家确认order" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute*/
/* &apos;${userId}&apos;  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 0 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirmOrder.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/confirmOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="切换买家" enabled="false"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;userId&quot;, vars.get(&quot;userId2&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的tokenId" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">SELECT token_id from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">tokenId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;tokenId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">

select contact_user_id from (
SELECT contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = ${userId} and contact_status = 0 limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contactUserId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">
/* 这里是要找下邮箱存不存在 */
/* select * from ejet_interim_contacts where inter_contact_email in () */
/* inter_contact_id = 7171 and */

select inter_contact_id,inter_contact_email from (
	select inter_contact_id,inter_contact_email,RAND() sort_column from ejet_interim_contacts  where 	
	user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos;   and inter_contact_status = 0
	limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;inter_contact_id&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;inter_contact_email&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数量汇总" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="orderFilter.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/orderFilter.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.确认order" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute*/
/* &apos;${userId}&apos;  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 0 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirmOrder.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/confirmOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="切换卖家" enabled="false"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;userId&quot;, vars.get(&quot;userId1&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的tokenId" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">SELECT token_id from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">tokenId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;tokenId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">

select contact_user_id from (
SELECT contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = ${userId} and contact_status = 0 limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contactUserId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">
/* 这里是要找下邮箱存不存在 */
/* select * from ejet_interim_contacts where inter_contact_email in () */
/* inter_contact_id = 7171 and */

select inter_contact_id,inter_contact_email from (
	select inter_contact_id,inter_contact_email,RAND() sort_column from ejet_interim_contacts  where 	
	user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos;   and inter_contact_status = 0
	limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;inter_contact_id&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;inter_contact_email&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.请求取消order" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*  0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* &apos;${userId}&apos;  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 1 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="requestCancel.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/requestCancel.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.同意取消order" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*  0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 0
) and order_status &lt;&gt; -1 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="agreeCancel.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/agreeCancel.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="切换买家" enabled="false"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;userId&quot;, vars.get(&quot;userId2&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的tokenId" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">SELECT token_id from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">tokenId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;tokenId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">

select contact_user_id from (
SELECT contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = ${userId} and contact_status = 0 limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contactUserId</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">
/* 这里是要找下邮箱存不存在 */
/* select * from ejet_interim_contacts where inter_contact_email in () */
/* inter_contact_id = 7171 and */

select inter_contact_id,inter_contact_email from (
	select inter_contact_id,inter_contact_email,RAND() sort_column from ejet_interim_contacts  where 	
	user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos;   and inter_contact_status = 0
	limit 100
) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;inter_contact_id&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;inter_contact_email&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.拒绝取消order" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*  0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 0
) and order_status &lt;&gt; -1 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="refuseCancel.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/refuseCancel.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.发起争议" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 1  and is_creater = 0
) and order_status = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="hasDispute.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/hasDispute.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7.关闭争议closeDispute " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*  0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 1  and is_creater = 0
) and order_status = 1 and  on_dispute = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="hasDispute.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/hasDispute.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8.确认收货" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and is_creater = 0
) and order_status = 6 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirmReceive.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/confirmReceive.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9.完成订单completeOrder " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 1  and is_creater = 0
) and order_status = 7 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="completeOrder.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/completeOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13.Order进行到完全发货 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status = 1  and is_creater = 1
) and order_status = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sellerDeliveryStatus.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/sellerDeliveryStatus.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
map.put(&quot;productIds&quot;, &quot;22&quot;);

//orderStatus (Integer  2:on production  3:producted  4:part on board  5:all on board)
map.put(&quot;orderStatus&quot;, 5);

//productIds (待定  部分发货携带的产品信息)


map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15.订单列表" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/list.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));


//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16.订单详情" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="订单详情-0" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">
select o_id from (

select o_id,RAND() sort_column from ejet_trade_order  where user_id = 
(SELECT user_id from ejet_user where bind_phone = &apos;${loginPhoneNo}&apos;) limit 100

) t order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="订单详情-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/detail.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id_1&quot;));//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17.update列表头部信息 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status &lt;&gt; -1  and is_creater = 0
) and order_status &lt;&gt; -1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="top.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/update/top.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18.update列表" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status &lt;&gt; -1  and is_creater = 0
) and order_status &lt;&gt; -1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/update/list.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="19.timeline一级页面" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status &lt;&gt; -1  and is_creater = 0
) and order_status &lt;&gt; -1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timeline操作列表" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/timeline/list.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
String jsonStr = vars.get(&quot;data&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
	try{
		jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
		FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr;                
	}catch(Exception e){
		FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
		Failure = true;			
	}	
} 
else {
	FailureMessage = &quot;成功，未解密的json串：&quot; + jsonStr; 
	vars.put(&quot;jsonStr&quot;, jsonStr);
		vars.put(&quot;jsonStr1&quot;, jsonStr);
		// quotnId正则表达式规则
	String regEx = &quot;\&quot;timelineId\&quot;:\\d+&quot;;
	// 编译正则表达式
	Pattern pattern = Pattern.compile(regEx);
	// 忽略大小写的写法
	// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(jsonStr);
	// 查找字符串中是否有匹配正则表达式的字符/字符串
	boolean isfind = false;
	while(matcher.find()) {
		   //获取匹配字符串
		String rs = matcher.group(0);
        rs=rs.substring(13);
        vars.put(&quot;timelineId&quot;, rs);
		isfind = true;
		break;
	 }
	 if(!isfind){
	 	vars.put(&quot;timelineId&quot;, &quot;&quot;);
	 }		
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="20.timeline操作列表（二级页面） " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;timelineId&quot;, &quot;1217&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="operate.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/timeline/operate.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;timelineId&quot;, vars.get(&quot;timelineId&quot;));

//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
String jsonStr = vars.get(&quot;data&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
	try{
		jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
		FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr;                
	}catch(Exception e){
		FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
		Failure = true;			
	}	
} 
else {
	FailureMessage = &quot;成功，未解密的json串：&quot; + jsonStr; 
	vars.put(&quot;jsonStr&quot;, jsonStr);
		vars.put(&quot;jsonStr1&quot;, jsonStr);
		// quotnId正则表达式规则
	String regEx = &quot;\&quot;timelineId\&quot;:\\d+&quot;;
	// 编译正则表达式
	Pattern pattern = Pattern.compile(regEx);
	// 忽略大小写的写法
	// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(jsonStr);
	// 查找字符串中是否有匹配正则表达式的字符/字符串
	boolean isfind = false;
	while(matcher.find()) {
		   //获取匹配字符串
		String rs = matcher.group(0);
        rs=rs.substring(13);
        vars.put(&quot;timelineId&quot;, rs);
		isfind = true;
		break;
	 }
	 if(!isfind){
	 	vars.put(&quot;timelineId&quot;, &quot;&quot;);
	 }		
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="21.timeline各级详情 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;timelineOperId&quot;, &quot;1225&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="operateInfo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/timeline/operateInfo.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;timelineOperId&quot;, vars.get(&quot;timelineOperId&quot;));

//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
String jsonStr = vars.get(&quot;data&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
	try{
		jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
		FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr;                
	}catch(Exception e){
		FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
		Failure = true;			
	}	
} 
else {
	FailureMessage = &quot;成功，未解密的json串：&quot; + jsonStr; 
	vars.put(&quot;jsonStr&quot;, jsonStr);
		vars.put(&quot;jsonStr1&quot;, jsonStr);
		// quotnId正则表达式规则
	String regEx = &quot;\&quot;timelineId\&quot;:\\d+&quot;;
	// 编译正则表达式
	Pattern pattern = Pattern.compile(regEx);
	// 忽略大小写的写法
	// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(jsonStr);
	// 查找字符串中是否有匹配正则表达式的字符/字符串
	boolean isfind = false;
	while(matcher.find()) {
		   //获取匹配字符串
		String rs = matcher.group(0);
        rs=rs.substring(13);
        vars.put(&quot;timelineId&quot;, rs);
		isfind = true;
		break;
	 }
	 if(!isfind){
	 	vars.put(&quot;timelineId&quot;, &quot;&quot;);
	 }		
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="22.timeline修改详情的明细 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;timelineUdId&quot;, &quot;1225&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="modifyInfo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/timeline/modifyInfo.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;timelineOperId&quot;, vars.get(&quot;timelineOperId&quot;));

//map.put(&quot;orderStatus&quot;, &quot;2&quot;);//全部不传 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4: on board 5: Delivered 6: Completed 7: Cancelled 8:dispute
map.put(&quot;sort&quot;, &quot;0&quot;);//0 by create 1by update


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
String jsonStr = vars.get(&quot;data&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
	try{
		jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
		FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr;                
	}catch(Exception e){
		FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
		Failure = true;			
	}	
} 
else {
	FailureMessage = &quot;成功，未解密的json串：&quot; + jsonStr; 
	vars.put(&quot;jsonStr&quot;, jsonStr);
		vars.put(&quot;jsonStr1&quot;, jsonStr);
		// quotnId正则表达式规则
	String regEx = &quot;\&quot;timelineId\&quot;:\\d+&quot;;
	// 编译正则表达式
	Pattern pattern = Pattern.compile(regEx);
	// 忽略大小写的写法
	// Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
	Matcher matcher = pattern.matcher(jsonStr);
	// 查找字符串中是否有匹配正则表达式的字符/字符串
	boolean isfind = false;
	while(matcher.find()) {
		   //获取匹配字符串
		String rs = matcher.group(0);
        rs=rs.substring(13);
        vars.put(&quot;timelineId&quot;, rs);
		isfind = true;
		break;
	 }
	 if(!isfind){
	 	vars.put(&quot;timelineId&quot;, &quot;&quot;);
	 }		
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="23.检查ORDERID是否被占用" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkOrderIdExist.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/checkOrderIdExist.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;orderId&quot;, &quot;O-1000684-12&quot;);//


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="24.updateOrderBind绑定情况下卖家上传更新 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status &lt;&gt; -1  and is_creater = 1
) and order_status = 1 and is_bind = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateOrderBind.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/updateOrderBind.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

Random rand = new Random();
int r1 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
//if(r1==1){
//	map.put(&quot;contactType&quot;,&quot;1&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
//}else{
//	map.put(&quot;contactType&quot;,&quot;0&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));
//}
int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
map.put(&quot;role&quot;,r3.toString());//0买家 1卖家
int r4 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r4.toString());//0否 1是

//int irandom = rand.nextInt(1000) + 1;
//String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
//map.put(&quot;orderId&quot;,oid);
map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

//for (int j = 0; j &lt; str.length; j ++) {
//  sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//  if (j != str.length -1) {
//      sb2.append(&quot;&amp;&quot;);
//  }
//  if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
//      continue;
//  } else {
//      sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//      if (j != str.length -1) {
//          sb.append(&quot;&amp;&quot;);
//      }
//  } 
//}

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="25.order修改预加载  " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */
/* ejet_order_user ,role: 0买家 1卖家 2不协同绑定的只能看order的用户 */
select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; 
and order_status &lt;&gt; -1  and role=1
) and order_status = 1 and is_bind = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="previewUpdateOrder.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/previewUpdateOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;operateRemark&quot;, &quot;this is operate remark&quot;);

Random rand = new Random();
int r1 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
//if(r1==1){
//	map.put(&quot;contactType&quot;,&quot;1&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
//}else{
//	map.put(&quot;contactType&quot;,&quot;0&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));
//}
int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
map.put(&quot;role&quot;,r3.toString());//0买家 1卖家
int r4 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r4.toString());//0否 1是

//int irandom = rand.nextInt(1000) + 1;
//String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
//map.put(&quot;orderId&quot;,oid);
map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

//for (int j = 0; j &lt; str.length; j ++) {
//  sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//  if (j != str.length -1) {
//      sb2.append(&quot;&amp;&quot;);
//  }
//  if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
//      continue;
//  } else {
//      sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//      if (j != str.length -1) {
//          sb.append(&quot;&amp;&quot;);
//      }
//  } 
//}

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="26.requestChangeOrder判断是否有存在未同意的修改 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */


select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 0 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="requestChangeOrder" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/requestChangeOrder.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="27.requestChangeOrder 卖家请求更新" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态 role:0买家 1卖家 2不协同绑定的只能看order的用户  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and role = 1
) and order_status = 1 and is_bind = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateOrderBind.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/updateOrderBind.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;operateRemark&quot;, &quot;operate remark 1234&quot;);

Random rand = new Random();
int r1 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
//if(r1==1){
//	map.put(&quot;contactType&quot;,&quot;1&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
//}else{
//	map.put(&quot;contactType&quot;,&quot;0&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));
//}
int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
map.put(&quot;role&quot;,r3.toString());//0买家 1卖家
int r4 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r4.toString());//0否 1是

//int irandom = rand.nextInt(1000) + 1;
//String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
//map.put(&quot;orderId&quot;,oid);
map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

//for (int j = 0; j &lt; str.length; j ++) {
//  sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//  if (j != str.length -1) {
//      sb2.append(&quot;&amp;&quot;);
//  }
//  if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
//      continue;
//  } else {
//      sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//      if (j != str.length -1) {
//          sb.append(&quot;&amp;&quot;);
//      }
//  } 
//}

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="28.agreeUpdate买家同意更新 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态 role:0买家 1卖家 2不协同绑定的只能看order的用户  */

select t.o_id from (
select a.o_id,a.user_id,b.o_id boid from ejet_trade_order a
left join ejet_order_wait_update b on a.o_id = b.o_id
) t where t.boid &gt; 0 and t.user_id = &apos;${userId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="agreeUpdate.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/agreeUpdate.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id_1&quot;));

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="30.feedback" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */
/* is_custom 自定义联系人*/
/* select product_ids from ejet_trade_order */
/* role: 0买家 1卖家 2不协同绑定的只能看order的用户 */

select o_id,product_ids from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;  and role = 0
) and order_status = 1 and is_bind=1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id,product_ids</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));
vars.put(&quot;product_ids&quot;, vars.get(&quot;product_ids_1&quot;));
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="feedBack.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/feedBack.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
map.put(&quot;productIds&quot;, vars.get(&quot;product_ids_1&quot;));

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="31.发送remark " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */
/* is_custom 自定义联系人*/
/* select product_ids from ejet_trade_order */
/* role: 0买家 1卖家 2不协同绑定的只能看order的用户 */

select o_id,product_ids from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and role = 1
)  limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id,product_ids</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));
vars.put(&quot;product_ids&quot;, vars.get(&quot;product_ids_1&quot;));
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id_1} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sellerRemark.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/sellerRemark.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
map.put(&quot;productIds&quot;, vars.get(&quot;product_ids&quot;));

map.put(&quot;operateRemark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;operateRemarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="32.updateOrderUnBind非绑定更新order " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */

/* 需判断订单进入发货或送达状态  */

select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos; and order_status &lt;&gt; -1  and is_creater = 1
) and order_status = 1 and is_bind = 1 limit 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateOrderUnBind.do" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/updateOrderUnBind.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DecimalFormat;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

Random rand = new Random();
int r1 = rand.nextInt(100) % 2;//随机 0，1，用于判断是否自定义联系人
//if(r1==1){
//	map.put(&quot;contactType&quot;,&quot;1&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
//}else{
//	map.put(&quot;contactType&quot;,&quot;0&quot;);//用户类型 0用户 1自定义联系人
//	map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId_1&quot;));
//}
int r2 = rand.nextInt(100) % 2;
map.put(&quot;isBind&quot;,r2.toString());//0不绑定 1绑定
int r3 = rand.nextInt(100) % 2;
map.put(&quot;role&quot;,r3.toString());//0买家 1卖家
int r4 = rand.nextInt(100) % 2;
map.put(&quot;allowPartialShipment&quot;,r4.toString());//0否 1是

//int irandom = rand.nextInt(1000) + 1;
//String oid = &quot;O-&quot; + vars.get(&quot;userId_1&quot;) + &quot;-&quot; + irandom;
//map.put(&quot;orderId&quot;,oid);
map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));

JSONArray productsList = new JSONArray();
for (int i = 0; i &lt; 6; i ++) {
    
    //新建一个产品
    JSONObject product = new JSONObject();
    
    //产品sheet
    JSONArray ja = new JSONArray();
    JSONObject json1 = new JSONObject();
    JSONObject json2 = new JSONObject();
    JSONObject json3 = new JSONObject();
    JSONObject json4 = new JSONObject();
    JSONObject json5 = new JSONObject();

	int r10 = rand.nextInt(100) + 1;
    json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;+i);
    json1.put(&quot;sheetValue&quot;, &quot;MOQ:&quot;+i);
    ja.add(json1);
    json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;+i);
    json2.put(&quot;sheetValue&quot;, &quot;Brand &quot;);
    ja.add(json2);
    json3.put(&quot;sheetName&quot;, &quot;Stock&quot;+i);
    json3.put(&quot;sheetValue&quot;, &quot;Stock:&quot;);
    ja.add(json3);
    json4.put(&quot;sheetName&quot;, &quot;Port&quot;+i);
    json4.put(&quot;sheetValue&quot;, &quot;Port:&quot;+i);
    ja.add(json4);
    json5.put(&quot;sheetName&quot;, &quot;CBM&quot;+i);
    json5.put(&quot;sheetValue&quot;, &quot;CBM:&quot;+i);
    ja.add(json5);
    
    product.put(&quot;productArrSheet&quot;, ja);
    product.put(&quot;productName&quot;, &quot;newOrder&quot; + i);
    product.put(&quot;productImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);
    product.put(&quot;productDescrip&quot;, &quot;this is newOrder description&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;productQuantity&quot;, r10.toString());

    Random rand3 = new Random();
	DecimalFormat dcmFmt = new DecimalFormat(&quot;#.00&quot;);
	float f1 = rand3.nextFloat() * 10000;
	BigDecimal re1=new BigDecimal(Float.toString(f1));  
	s1 = dcmFmt.format(re1);

    product.put(&quot;productPrice&quot;, s1);
    product.put(&quot;productPriceCry&quot;, &quot;USD&quot;);
    product.put(&quot;productUnit&quot;, &quot;PCS&quot;);
    product.put(&quot;remark&quot;, &quot;this is newOrder remark&quot; + i + &quot;-&quot; + r10.toString());
    product.put(&quot;remarkImg&quot;, &quot;FtMuoocpgtHtS_TV0vuhm4Ka3NT0,FmyQFC3_y0_em0Y7fepdPqDP7e_M&quot;);
    
    //将此product添加到productsList列表
    productsList.add(product);
}

map.put(&quot;products&quot;, JSONObject.toJSONString(productsList));
vars.put(&quot;products&quot;, JSONObject.toJSONString(productsList));

//otherFees
JSONArray otherFees = new JSONArray();
JSONObject otherFee1 = new JSONObject();
JSONObject otherFee2 = new JSONObject();
JSONObject otherFee3 = new JSONObject();

Random rand2 = new Random();
DecimalFormat dcmFmt = new DecimalFormat(&quot;#.0000&quot;);
float f1 = rand2.nextFloat() * 10000;
BigDecimal re1=new BigDecimal(Float.toString(f1));  
s1 = dcmFmt.format(re1);

float f2 = rand2.nextFloat() * 10000;
BigDecimal re2=new BigDecimal(Float.toString(f2));  
s2 = dcmFmt.format(re2);

float f3 = rand2.nextFloat() * 10000;
BigDecimal re3=new BigDecimal(Float.toString(f3));  
s3 = dcmFmt.format(re3);
 

otherFee1.put(&quot;fees&quot;, &quot;trans&quot;);
otherFee1.put(&quot;price&quot;, s1);
otherFees.add(otherFee1);
otherFee2.put(&quot;fees&quot;, &quot;eat&quot;);
otherFee2.put(&quot;price&quot;, s2);
otherFees.add(otherFee2);
otherFee3.put(&quot;fees&quot;, &quot;shop&quot;);
otherFee3.put(&quot;price&quot;, s3);
otherFees.add(otherFee3);

map.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));
vars.put(&quot;otherFees&quot;, JSONObject.toJSONString(otherFees));

map.put(&quot;feeCurrency&quot;, &quot;USD&quot;);
map.put(&quot;priceTerms&quot;, &quot;FOB&quot;);
map.put(&quot;placeDelivery&quot;, &quot;shanghai Port&quot;);
map.put(&quot;deliveryTime&quot;, 30);
map.put(&quot;validateTime&quot;, 30);
map.put(&quot;remark&quot;, &quot;this is Order remark&quot;);
map.put(&quot;remarkImg&quot;, &quot;Fij5kQdOosNqfImLyO2eqbZubbcj123,FjlqdhImVfzsFxwBVYHF3XzCFJbr456&quot;);

JSONObject backAccount = new JSONObject();
backAccount.put(&quot;accountNum&quot;, &quot;600620178965563&quot;);
backAccount.put(&quot;accountName&quot;, &quot;Oujia Network&quot;);
backAccount.put(&quot;swiftCode&quot;, &quot;95596&quot;);
backAccount.put(&quot;beneficiaryBank&quot;, &quot;ICBC&quot;);
backAccount.put(&quot;beneficiaryBankAddress&quot;, &quot;HangZhou BingJiang JiangNan Rord 128&quot;);
backAccount.put(&quot;remark&quot;, &quot;received bank Account&quot;);

map.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));
vars.put(&quot;bankAccount&quot;, JSONObject.toJSONString(backAccount));

map.put(&quot;paymentWay&quot;, &quot;pay By Bank Account&quot;);

String tradeTerms = &quot;[\&quot;payment term1\&quot;, \&quot;payment term2\&quot;, \&quot;payment term3\&quot;]&quot;;

vars.put(&quot;tradeTerms&quot;, tradeTerms.toString());
map.put(&quot;tradeTerms&quot;, tradeTerms.toString());

map.put(&quot;send&quot;, &quot;true&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
StringBuffer sb2 = new StringBuffer();

sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
    str[i] = (String) it.next();
    i ++;
}

//排序
Arrays.sort(str);

//for (int j = 0; j &lt; str.length; j ++) {
//  sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//  if (j != str.length -1) {
//      sb2.append(&quot;&amp;&quot;);
//  }
//  if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
//      continue;
//  } else {
//      sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
//      if (j != str.length -1) {
//          sb.append(&quot;&amp;&quot;);
//      }
//  } 
//}

for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;products&quot;) || str[j].equals(&quot;otherFees&quot;) || str[j].equals(&quot;bankAccount&quot;) || str[j].equals(&quot;tradeTerms&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j])));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String PostPro = &quot;&quot;;
//if (sb3.toString().lastIndexOf(&quot;&amp;&quot;) == (sb.toString().length() -1)){
//  PostPro = sb3.append(&quot;sign=&quot;).append(sign).toString();
//} else {
//  PostPro = sb3.append(&quot;&amp;sign=&quot;).append(sign).toString();
//}
PostPro = sb2.append(&quot;&amp;sign=&quot;).append(sign).toString();

//vars.put(&quot;PostPro&quot;, java.net.URLEncoder.encode(PostPro));
vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="33.检查邮件是否已注册checkEmailRegistered" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEmailRegistered.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}tradeOrder/checkEmailRegistered.do?${PostPro}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

//vars.put(&quot;aaaaaaa&quot;, &quot;aaaaaaa&quot;);

map.put(&quot;email&quot;, &quot;abcdefg@qq.com&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
              </BeanShellTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">data</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="34.acceptOrderBind注册" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */


select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 0 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="acceptOrderBind" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/acceptOrderBind.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="35.rejectOrderBind注册 " enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的ORDER信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/* ejet_trade_order 0:On confirmation 1:Confirmed 2:On Production 3:Produced 4:Part on board 5:All on board 6:Delivered 7:Completed 8:Cancelled  */
/* ejet_order_user 0未确认 1已确认 2发起cancel 3canceled 4发起complete 5completed  */
/* &apos;${userId}&apos;  */


select o_id from ejet_trade_order where o_id in (
select distinct o_id from ejet_order_user where is_custom = 0 and contact_user_id = &apos;${userId}&apos;
) and order_status = 0 limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">o_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;o_id&quot;, vars.get(&quot;o_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${o_id} &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rejectOrderBind" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}tradeOrder/rejectOrderBind.do?${PostPro}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

map.put(&quot;oId&quot;, vars.get(&quot;o_id&quot;));
//map.put(&quot;oId&quot;, &quot;22&quot;);

map.put(&quot;remark&quot;, &quot;this is remark of &quot;+vars.get(&quot;o_id&quot;));
map.put(&quot;remarkImg&quot;, &quot;2d406077-6051-45ba-a2ae-074842c3b1b7,aea82417-9b4e-4004-a9d3-c5ce29a64bfb,e0200d34-fd48-4ef2-94b2-3db52630117f,859aa84d-a708-4c1c-addf-8f067c851e5b,be50b008-2fe2-44a4-8741-8fcb2d6c71cc&quot;);


String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String PostPro = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;PostPro&quot;, PostPro);
</stringProp>
                </BeanShellTimer>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">data</stringProp>
                  <stringProp name="RegexExtractor.regex">(.+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">-1</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
