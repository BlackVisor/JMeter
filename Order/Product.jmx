<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522115682000</longProp>
        <longProp name="ThreadGroup.end_time">1522115682000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">config-外网.csv</stringProp>
          <stringProp name="fileEncoding">utf-8</stringProp>
          <stringProp name="variableNames">host,port,userId,packageName,appType,version,languagePack,source,isEncrypt,path</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="代理JMeter请求到Fiddler" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.proxyHost">192.168.1.70</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-CN;q=1</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">close</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Apache-HttpClient/4.2.5 (java 1.5)</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-内网" enabled="false">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.1.7:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-外网" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://hzdev.offerplus.com:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="参数配置" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="确定买卖双方ID" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;supplier&quot;, &quot;1001200&quot;);//卖家
vars.put(&quot;buyer&quot;, &quot;1001221&quot;);//买家
vars.put(&quot;userId&quot;, vars.get(&quot;supplier&quot;));
vars.put(&quot;contactUserId&quot;, vars.get(&quot;buyer&quot;));
//打印日志时，用vars.get,不能直接用${}
log.info(&quot;*****************userId=&quot;+vars.get(&quot;userId&quot;)+&quot;*******************&quot;);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号的token和appType" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*${var}需要添加引号，如果var本身没有引号的话*/
select token_id, app_type from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">token_id,app_type</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;token_id_1&quot;));
log.info(&quot;**************appType is &quot; + vars.get(&quot;app_type_1&quot;)+&quot;*******************&quot;);
if(vars.get(&quot;app_type_1&quot;) == &quot;A&quot;){
	vars.put(&quot;appType&quot;, &quot;A&quot;);
	vars.put(&quot;packageName&quot;, &quot;com.oujia.offerplus&quot;);
	}
else{
	vars.put(&quot;appType&quot;, &quot;I&quot;);
	vars.put(&quot;packageName&quot;, &quot;com.Ejetsolutions.offerplus&quot;);
	}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*sort_column用来随机排序*/
select contact_user_id from (
	SELECT user_id, contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = 
		(SELECT user_id from ejet_user where user_id = ${userId}) 
	and contact_status = 0 limit 100
) this order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contact_user_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;contactUserId&quot;, vars.get(&quot;contact_user_id_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义联系人信息" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select inter_contact_id, inter_contact_email from (
	select inter_contact_id, inter_contact_email, RAND() sort_column from ejet_interim_contacts  where user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos; 							    
	and inter_contact_status = 0 limit 100
) this order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;interContactId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;interContactEmail&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by time的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;200&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by time的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by tag的tag列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTag.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerTagId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerTagId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		      vars.put(&quot;offerTagId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerTagId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取tag下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTagDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取tag下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by supplier的supplier列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplier.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取contactUserId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;contactUserId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p4 = Pattern.compile(&quot;\&quot;contactStatus\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	Matcher m4 = p4.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  m4.find();
		  String a = m1.group();
		  String b = m2.group();
		  String c = m4.group();
		  Matcher m5 = p3.matcher(a);
		  Matcher m6 = p3.matcher(b);
		  Matcher m7 = p3.matcher(c);
		  m5.find();
		  m6.find();
		  m7.find();
		  if(!m6.group().equals(0)){
		      vars.put(&quot;contactUserId&quot;, m5.group().toString());
		      vars.put(&quot;contactStatus&quot;, m7.group().toString());
		      log.info(&quot;**************contactUserId=&quot;+vars.get(&quot;contactUserId&quot;)+&quot;***************&quot;);
		      log.info(&quot;**************contactStatus=&quot;+vars.get(&quot;contactStatus&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取supplier下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplierDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
map.put(&quot;contactStatus&quot;, vars.get(&quot;contactStatus&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取supplier下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取by member的member列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取userId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;userId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		  	 //为避免与userId冲突，所以用memberId
		      vars.put(&quot;memberId&quot;, m3.group().toString());
		      log.info(&quot;**************userId=&quot;+vars.get(&quot;memberId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取member下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyUserProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;userId&quot;, vars.get(&quot;memberId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取member下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存productSetting" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/saveProductSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import java.util.*;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
Random random = new Random();
//随机取币种
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
int currencyListLength = currencyList.length;
int randomCurrency = random.nextInt(currencyListLength);
map.put(&quot;productDefaultCry&quot;, currencyList[randomCurrency]);
//随机取相机开启
int camera = random.nextInt(2);
map.put(&quot;productStartCamera&quot;, camera);
//随机取添加买入价
int addBuyPrice = random.nextInt(2);
map.put(&quot;productAddBuyPrice&quot;, addBuyPrice);
//随机取产品sheet
String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing \&quot;}]&quot;;
List&lt;String&gt; list = JSON.parseArray(jsonString, String.class);
//num=随机取得sheet个数，如果指定sheet个数可以赋值给它
int num = random.nextInt(list.size());
ArrayList sheetArray = new ArrayList();
for(int  i =0 ; i&lt;num ; i++){
  int newNum = random.nextInt(list.size());
  sheetArray.add(list.get(newNum));
  list.remove(newNum);
}
map.put(&quot;productDefaultSheet&quot;, sheetArray);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="productSetting是否保存成功" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取productSetting" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="productSetting是否保存成功" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="接口请求模板" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">data</stringProp>
            <stringProp name="RegexExtractor.regex">(.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
