<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <longProp name="ThreadGroup.start_time">1522115682000</longProp>
        <longProp name="ThreadGroup.end_time">1522115682000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data 内网" enabled="true">
          <stringProp name="filename">config-内网.csv</stringProp>
          <stringProp name="fileEncoding">utf-8</stringProp>
          <stringProp name="variableNames">host,port,userId,packageName,appType,version,languagePack,source,isEncrypt,path</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-内网" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.1.7:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="代理JMeter请求到Fiddler" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.proxyHost">192.168.1.70</stringProp>
          <stringProp name="HTTPSampler.proxyPort">8888</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data 外网" enabled="false">
          <stringProp name="filename">config-外网.csv</stringProp>
          <stringProp name="fileEncoding">utf-8</stringProp>
          <stringProp name="variableNames">host,port,userId,packageName,appType,version,languagePack,source,isEncrypt,path</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库-外网" enabled="false">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://hzdev.offerplus.com:3306/cn_offerplus</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="username">root</stringProp>
          <stringProp name="password">R7evMxOvLX</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en,zh</stringProp>
            </elementProp>
            <elementProp name="Connection" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">close</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Apache-HttpClient/4.2.5 (java 1.5)</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Charset</stringProp>
              <stringProp name="Header.value">utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Product模块" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="参数配置" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="确定买卖双方ID" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;supplier&quot;, &quot;1001200&quot;);//卖家
vars.put(&quot;buyer&quot;, &quot;1001221&quot;);//买家
vars.put(&quot;userId&quot;, vars.get(&quot;supplier&quot;));
vars.put(&quot;contactUserId&quot;, vars.get(&quot;buyer&quot;));
//打印日志时，用vars.get,不能直接用${}
log.info(&quot;*****************userId=&quot;+vars.get(&quot;userId&quot;)+&quot;*******************&quot;);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号的token和appType" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*${var}需要添加引号，如果var本身没有引号的话*/
select token_id, app_type from ejet_user_separate where user_id = ${userId} and server_type = &quot;C&quot; limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">token_id,app_type</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;tokenId&quot;, vars.get(&quot;token_id_1&quot;));
log.info(&quot;**************appType is &quot; + vars.get(&quot;app_type_1&quot;)+&quot;*******************&quot;);
if(vars.get(&quot;app_type_1&quot;) == &quot;A&quot;){
	vars.put(&quot;appType&quot;, &quot;A&quot;);
	vars.put(&quot;packageName&quot;, &quot;com.oujia.offerplus&quot;);
	}
else{
	vars.put(&quot;appType&quot;, &quot;I&quot;);
	vars.put(&quot;packageName&quot;, &quot;com.Ejetsolutions.offerplus&quot;);
	}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的系统联系人信息" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*sort_column用来随机排序*/
select contact_user_id from (
	SELECT user_id, contact_user_id ,RAND() sort_column from ejet_user_contact where user_id = 
		(SELECT user_id from ejet_user where user_id = ${userId}) 
	and contact_status = 0 limit 100
) this order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">contact_user_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if(!vars.get(&quot;contact_user_id_#&quot;).equals(&quot;0&quot;)){
	vars.put(&quot;contactUserId&quot;, vars.get(&quot;contact_user_id_1&quot;));
}else{
	vars.put(&quot;contactUserId&quot;, &quot;-1&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义人-有邮箱" enabled="false">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select inter_contact_id, inter_contact_email from (
	select inter_contact_id, inter_contact_email, RAND() sort_column from ejet_interim_contacts  where user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos; 							    
	and inter_contact_status = 0 limit 100
) this order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id,inter_contact_email</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;interContactId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
vars.put(&quot;interContactEmail&quot;, vars.get(&quot;inter_contact_email_1&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的自定义人" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">select inter_contact_id, inter_contact_email from (
	select inter_contact_id, inter_contact_email, RAND() sort_column from ejet_interim_contacts  where user_id = ${userId} and inter_contact_email &lt;&gt; &apos;&apos; 							    
	and inter_contact_status = 0 limit 100
) this order by sort_column limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">inter_contact_id</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if(!vars.get(&quot;inter_contact_id_#&quot;).equals(&quot;0&quot;)){
	vars.put(&quot;interContactId&quot;, vars.get(&quot;inter_contact_id_1&quot;));
}else{
	vars.put(&quot;interContactId&quot;, &quot;-1&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取当前账号下的offerTagId" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">/*sort_column用来随机排序*/
select GROUP_CONCAT(offer_tag_id), count(offer_tag_id) from (SELECT offer_tag_id, RAND() sort_column FROM `ejet_offer_tag` where user_id = ${userId} and del_status = 0) this order by sort_column</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">taglist,tagcount</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if(!(${tagcount_1}==0)){
	vars.put(&quot;offerTagId&quot;, vars.get(&quot;taglist_1&quot;));
}else{
	vars.put(&quot;offerTagId&quot;, &quot;-1&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.获取by time的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/myProductList.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;200&quot;);
//进行搜索要加下面这个参数
//map.put(&quot;searchName&quot;, &quot;200&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.获取by time的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.获取by tag的tag列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTag.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerTagId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerTagId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		      vars.put(&quot;offerTagId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerTagId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.获取tag下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/byTagDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;offerTagId&quot;, vars.get(&quot;offerTagId&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.获取tag下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.获取by supplier的supplier列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplier.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取contactUserId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	log.info(&quot;**************&quot;+vars.get(&quot;encrypt&quot;)+&quot;***************&quot;);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;contactUserId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p4 = Pattern.compile(&quot;\&quot;contactStatus\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	Matcher m4 = p4.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  m4.find();
		  String a = m1.group();
		  String b = m2.group();
		  String c = m4.group();
		  Matcher m5 = p3.matcher(a);
		  Matcher m6 = p3.matcher(b);
		  Matcher m7 = p3.matcher(c);
		  m5.find();
		  m6.find();
		  m7.find();
		  if(!m6.group().equals(0)){
		      vars.put(&quot;contactUserId&quot;, m5.group().toString());
		      vars.put(&quot;contactStatus&quot;, m7.group().toString());
		      log.info(&quot;**************contactUserId=&quot;+vars.get(&quot;contactUserId&quot;)+&quot;***************&quot;);
		      log.info(&quot;**************contactStatus=&quot;+vars.get(&quot;contactStatus&quot;)+&quot;***************&quot;);
		      break;
		  }
	}
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.获取supplier下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/bySupplierDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;page&quot;, &quot;1&quot;);
map.put(&quot;pageNum&quot;, &quot;20&quot;);
map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
map.put(&quot;contactStatus&quot;, vars.get(&quot;contactStatus&quot;));
//搜索时需要加上下面这个参数
//map.put(&quot;searchName&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8.获取supplier下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9.获取by member的member列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取userId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Console connect = System.console();
	System.out.println(encrypt);
	Pattern p1 = Pattern.compile(&quot;\&quot;userId\&quot;:\\d+&quot;);
	Pattern p2 = Pattern.compile(&quot;\&quot;productTotal\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	Matcher m2 = p2.matcher(encrypt);
	while (m1.find()) {
		  m2.find();
		  String a = m1.group();
		  String b = m2.group();
		  Matcher m3 = p3.matcher(a);
		  Matcher m4 = p3.matcher(b);
		  m3.find();
		  m4.find();
		  if(!m4.group().equals(0)){
		  	 //为避免与userId冲突，所以用memberId
		      vars.put(&quot;memberId&quot;, m3.group().toString());
		      log.info(&quot;**************userId=&quot;+vars.get(&quot;memberId&quot;)+&quot;***************&quot;);
		      break;
		  }
	}	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.获取member下的产品列表" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/companyUserProducts.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;userId&quot;, vars.get(&quot;memberId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="获取offerId" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      vars.put(&quot;offerId&quot;, m3.group().toString());
		      log.info(&quot;**************offerId=&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      break;
		  }
	} 
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.获取member下的产品详情" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productDetail.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;offerId&quot;, vars.get(&quot;offerId&quot;));






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="入参出参的offerId是否一致" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //判断入参的offerId是否与出参的offerId相同
     String encrypt = vars.get(&quot;data&quot;);
	Pattern p1 = Pattern.compile(&quot;\&quot;offerId\&quot;:\\d+&quot;);
	Pattern p3 = Pattern.compile(&quot;\\d+&quot;);
	Matcher m1 = p1.matcher(encrypt);
	while (m1.find()) {
		  String a = m1.group();
		  Matcher m3 = p3.matcher(a);
		  m3.find();
		  if(!m3.group().equals(0)){
		      if(!m3.group().equals(vars.get(&quot;offerId&quot;))){
		      	log.info(&quot;**************&quot;+vars.get(&quot;offerId&quot;)+&quot;***************&quot;);
		      	Failure = true;
		      	}
		  }
	} 
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.保存productSetting" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/saveProductSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import java.util.*;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
Random random = new Random();
//随机取币种
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
int currencyListLength = currencyList.length;
int randomCurrency = random.nextInt(currencyListLength);
map.put(&quot;productDefaultCry&quot;, currencyList[randomCurrency]);
//随机取相机开启
int camera = random.nextInt(2);
map.put(&quot;productStartCamera&quot;, camera);
//随机取添加买入价
int addBuyPrice = random.nextInt(2);
map.put(&quot;productAddBuyPrice&quot;, addBuyPrice);
//随机取产品sheet
String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing \&quot;}]&quot;;
//这里如果用List&lt;String&gt; list = new ArrayList&lt;String&gt;();会报错
list = new ArrayList();
list = JSON.parseArray(jsonString, String.class);
//num=随机取得sheet个数，如果指定sheet个数可以赋值给它
int num = random.nextInt(list.size());
ArrayList sheetArray = new ArrayList();
for(int  i =0 ; i&lt;num ; i++){
	int newNum = random.nextInt(list.size());
	sheetArray.add(list.get(newNum));
	list.remove(newNum);
}
//下面对sheetArray的处理是为了把arraylist输出时多余的空格取出
String result = &quot;&quot;;
if (sheetArray.size() &gt; 0) {
	for (Object item : sheetArray) {
     // 把列表中的每条数据用逗号分割开来，然后拼接成字符串
	result += item.toString() + &quot;,&quot;;
  }
  // 去掉最后一个逗号
	result = result.substring(0, result.length() - 1);
}
result = &apos;[&apos;+result+&apos;]&apos;;
JSONArray productSheet = JSON.parseArray(result);
map.put(&quot;productDefaultSheet&quot;, productSheet);

//存下各个设置项用于检验是否保存成功
vars.put(&quot;productDefaultCry&quot;,map.get(&quot;productDefaultCry&quot;).toString());
vars.put(&quot;productStartCamera&quot;,map.get(&quot;productStartCamera&quot;).toString());
vars.put(&quot;productAddBuyPrice&quot;,map.get(&quot;productAddBuyPrice&quot;).toString());
vars.put(&quot;productDefaultSheet&quot;,map.get(&quot;productDefaultSheet&quot;).toString());
log.info(&quot;*********&quot;+vars.get(&quot;productDefaultSheet&quot;)+&quot;****************&quot;);



//拼接入参
String[] str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

//对非int
for (int j = 0; j &lt; str.length; j ++) {
    if(str[j].equals(&quot;productDefaultCry&quot;) || str[j].equals(&quot;productDefaultSheet&quot;)) {
        sb2.append(str[j]).append(&quot;=&quot;).append(java.net.URLEncoder.encode(map.get(str[j]).toString()));
    } else {
        sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    }
    sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
    if (j != str.length -1) {
        sb.append(&quot;&amp;&quot;);
    }
    if (j != str.length -1) {
        sb2.append(&quot;&amp;&quot;);
    }
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="保存所传设定值" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.获取productSetting" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/productSetting.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数




//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="比较返回的设定值是否是所传的" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	String encrypt = vars.get(&quot;data&quot;);
	JSONObject response = JSONObject.parseObject(encrypt);
	String buyPrice  = response.getJSONObject(&quot;data&quot;).getString(&quot;productAddBuyPrice&quot;);
	String currency = response.getJSONObject(&quot;data&quot;).getString(&quot;productDefaultCry&quot;);
	String camera = response.getJSONObject(&quot;data&quot;).getString(&quot;productStartCamera&quot;);
	String sheet = response.getJSONObject(&quot;data&quot;).getString(&quot;productDefaultSheet&quot;);
	if(vars.get(&quot;productAddBuyPrice&quot;).equals(buyPrice) &amp;&amp; vars.get(&quot;productDefaultCry&quot;).equals(currency) &amp;&amp; vars.get(&quot;productStartCamera&quot;).equals(camera) &amp;&amp; vars.get(&quot;productDefaultSheet&quot;).equals(sheet)){
		Failure = false;
	}else{
		FailureMessage = &quot;设置没有保存成功！！！&quot;;
		Failure = true;
		}
		
     
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.新建product-随机参数" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/offerplus/makeOfferEnd.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="初始化数据" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;


long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
Date date = new Date();
DecimalFormat priceFormat = new DecimalFormat(&quot;0.####&quot;);//确定price的格式
int beishu = 10*(random.nextInt(5)+1);//增加price的位数变化

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//生成随机offerName
DateFormat df2 = DateFormat.getDateTimeInstance();//可以精确到时分秒
map.put(&quot;offerName&quot;, ${userId}+&quot;\&apos;s offer is created at:&quot;+df2.format(date).toString());

//生成随机description
map.put(&quot;offerDescrip&quot;, ${userId}+&quot;的offer description，该offer创建于:&quot;+df2.format(date).toString());


//***开始生成buyprice和sellprice
//是否生成buyprice，并随机给予数值
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
int buyPriceIndex = random.nextInt(currencyList.length);
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	float f1 = random.nextFloat()*beishu;
	map.put(&quot;offerBuyPrice&quot;, priceFormat.format(f1).toString());
	//随机币种
	map.put(&quot;offerBuyCry&quot;, currencyList[buyPriceIndex]);
}

//是否生成sellprice，并随机给予数值
int sellPriceIndex = random.nextInt(currencyList.length);
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	float f2 = random.nextFloat()*beishu;
	map.put(&quot;offerSellPrice&quot;, priceFormat.format(f2).toString());
	//随机币种
	map.put(&quot;offerSellCry&quot;, currencyList[sellPriceIndex]);
}
//赋予buyprice和sellprice结束


//***随机给予unit
String[] unitList = {&quot;PCS&quot;, &quot;Set&quot;, &quot;Box&quot;, &quot;Pal&quot;, &quot;Doz&quot;, &quot;Pack&quot;, &quot;Pair&quot;, &quot;20ft&quot;, &quot;40ft&quot;, &quot;40ftHQ&quot;, &quot;g&quot;, &quot;kg&quot;, &quot;t&quot;, &quot;lb&quot;, &quot;ml&quot;, &quot;mm&quot;, &quot;l&quot;, &quot;cm&quot;, &quot;m&quot;, &quot;Inch&quot;, &quot;m2&quot;, &quot;w&quot;, &quot;v&quot;, &quot;a&quot;};
int unitIndex = random.nextInt(unitList.length); 
map.put(&quot;offerUnit&quot;, unitList[unitIndex]);

//***随机取联系人种类和相应的userId：0=无，1=系统的，2=自定义的
int contactStatus = random.nextInt(2)+1;
if(contactStatus==1){
	if(!vars.get(&quot;contactUserId&quot;).equals(&quot;-1&quot;)){
		map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
		map.put(&quot;contactStatus&quot;, &quot;1&quot;);
	}else{
		log.info(&quot;*************系统人没获取到****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}	
}else{
	if(!vars.get(&quot;interContactId&quot;).equals(&quot;-1&quot;)){
		map.put(&quot;contactUserId&quot;, vars.get(&quot;interContactId&quot;));
		map.put(&quot;contactStatus&quot;, &quot;2&quot;);
	}else{
		log.info(&quot;*************自定义人没获取到****************&quot;);
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}
}

//***加入offer制作时间
map.put(&quot;makeOfferTime&quot;, String.valueOf(L));

//***是否copy的offer，0=no，1=yes
map.put(&quot;offerIsCopy&quot;, &quot;0&quot;);

//***打上offer tag
//是否传tag
if((!vars.get(&quot;offerTagId&quot;).equals(&quot;-1&quot;)) &amp;&amp; random.nextInt(2)==0){
	StringBuffer sb5 = new StringBuffer();
	String a = vars.get(&quot;offerTagId&quot;);
	String[] b = a.split(&quot;,&quot;);
	int c = random.nextInt(b.length);
	for(int p=0; p&lt;=c; p++){
	  if(p&lt;c){
	      sb5.append(b[p]).append(&quot;,&quot;);
	  }else{
	      sb5.append(b[p]);
	  }
	}
	map.put(&quot;arrTagId&quot;, sb5.toString());
}


//***随机赋予offer image
String[] imageList = {&quot;0026a683-93d9-41fc-9c71-540cc9110f90&quot;,&quot;003e3b9a-0977-4d58-b492-397792424482&quot;,&quot;00412efc-c20d-4d36-8f2a-2aca32fd9044&quot;,&quot;004898c0-a52f-4c88-8d85-387a4ddd1002&quot;,&quot;004c047d-13d0-4d83-b473-1dbd3a9946c1&quot;,&quot;00588ea5-fe2b-46dc-91bc-7b339b832230&quot;,&quot;005ae564-bd63-4e0e-be7d-cfa7d4cb6784&quot;,&quot;00749fb9-ff53-4aad-a769-177dc600ca33&quot;,&quot;0087d105-fe6c-486c-aa3e-da1c3e1b1264&quot;,&quot;00c571c6-575e-4c0f-9802-61d1b5992c93&quot;,&quot;00cf9d13-68f1-4a7c-a4c2-786a8bbf3d01&quot;,&quot;00f2bc5a-f1cc-4d79-ab66-f3d710f94ba0&quot;,&quot;010bb208-74a2-4646-92eb-464c38a623af&quot;,&quot;0128f51e-09f4-4cba-bda7-47662df91e0b&quot;,&quot;012ec868-6dff-45b5-bcea-f874a512c78b&quot;,&quot;0136ec2c-2325-48ab-a36d-87544480c284&quot;,&quot;0137fb2d-0116-4fd9-9b80-975b329b3a9a&quot;,&quot;0146df9b-8bc5-4804-989f-ab8f005711a7&quot;,&quot;01766464-194c-43d4-84b6-1d86ddf8f5ec&quot;,&quot;01a4c1d1-8663-4e2c-8030-41c66029a9a8&quot;,&quot;01ad954d-8574-4044-95a7-d58889e45160&quot;,&quot;01af3e27-096c-4d3d-8071-d78e8cdbf026&quot;,&quot;01d3f1df-0130-4957-bae3-231df5e83df8&quot;,&quot;01db2317-a68a-48b5-be2b-fbac4aa1715a&quot;,&quot;01edd2da-2337-4cc7-9087-34ccdc0a5df0&quot;,&quot;023fd0d9-88bd-4d57-a212-a3098100b7c8&quot;,&quot;02795747-736f-47d2-bf84-a9ad395a6c02&quot;,&quot;02921b20-05b6-4eae-bd91-e6a1cc9e9767&quot;,&quot;0293b4f8-5fe6-437c-a02a-8f1787ef596d&quot;,&quot;02b234eb-c2ae-4a62-8e7f-ca6d52a2f9c0&quot;,&quot;02c80463-7485-45f8-a055-2eaff49cde3c&quot;,&quot;02ce094d-d253-4fe9-816a-0765c1dd452d&quot;,&quot;03161402-744b-4f4a-b7c6-22660d836c88&quot;,&quot;0351147e-0d42-4a63-a071-a175c1585f49&quot;,&quot;0363b7e1-678a-4880-a1d0-85d9345d563e&quot;,&quot;03701dfe-1676-47ab-8ea8-c8945b0409fa&quot;,&quot;039c2870-d0ff-49dd-94f1-2229e478a175&quot;,&quot;03ad6588-a179-4492-a121-8882eaa7164a&quot;,&quot;03add517-7b9d-4d63-940b-0b2f6cfc9bfa&quot;,&quot;03ea9321-4c16-47b5-94ae-5bea8ae0056f&quot;,&quot;04193181-5e01-4935-a891-2e7d2012437e&quot;,&quot;04332850-f747-4bd2-a76b-5c004a4a3a39&quot;,&quot;0446bbd8-5f15-4a77-aa22-ca8e0ef12465&quot;,&quot;0455f339-33f3-4882-bb2a-81b035aa731f&quot;,&quot;04638e3a-b950-4ba7-b4a7-415f634ebd4b&quot;,&quot;046a54de-0039-4891-a051-70e61e37ea3c&quot;};
int imageNum = random.nextInt(9)+1;
StringBuffer sb4 = new StringBuffer();
sb4.append(&quot;&quot;);
for(int m=0; m&lt;imageNum; m++){
	if(m&lt;imageNum-1){
		int imageIndex = random.nextInt(imageList.length);
		sb4.append(imageList[imageIndex]).append(&quot;,&quot;);
	}else{
		int imageIndex = random.nextInt(imageList.length);
		sb4.append(imageList[imageIndex]);
	}
}
map.put(&quot;offerImg&quot;, sb4.toString());



//***生成随机offerSheetArray
//随机取产品sheet
String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing\&quot;},{\&quot;sheetName\&quot;:\&quot;MOQ\&quot;}]&quot;;
//这里如果用List&lt;String&gt; list = new ArrayList&lt;String&gt;();会报错
list = new ArrayList();
list = JSON.parseArray(jsonString, String.class);
//num=随机取得sheet个数，如果指定sheet个数可以赋值给它
int num = random.nextInt(list.size());
ArrayList sheetArray = new ArrayList();
for(int i=0; i&lt;num; i++){
	int newNum = random.nextInt(list.size());
	sheetArray.add(list.get(newNum));
	list.remove(newNum);
}

JSONArray ja = new JSONArray();
for(int j=0; j&lt;num; j++){
	JSONObject jo = new JSONObject();
	JSONObject sheet = JSONObject.parseObject(sheetArray.get(j).toString());
	String sheetName = sheet.getString(&quot;sheetName&quot;);
	jo.put(&quot;sheetName&quot;, sheetName);
	
	// 随机给sheetValue赋值
	String str = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;
	StringBuffer sb3 = new StringBuffer();
	int sb3length = random.nextInt(str.length());
	for (int k = 0; k &lt; sb3length; k++) {
		int number = random.nextInt(str.length());
		sb3.append(str.charAt(number));
	}
	jo.put(&quot;sheetValue&quot;,sb3.toString());
	ja.add(jo);
}
//map.put(&quot;offerArrSheet&quot;, java.net.URLEncoder.encode(ja.toString()));
if(random.nextInt(2)==0){
	map.put(&quot;offerArrSheet&quot;, ja.toString());
}else{
	map.put(&quot;offerArrSheet&quot;, &quot;[]&quot;);	
}

//sheet生成结束
//***入参赋值完毕



String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (str[j].equals(&quot;offerArrSheet&quot;)) {
		sb2.append(str[j]).append(&quot;=&quot;).append(JSON.toJSON(ja));
	} else {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	}
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
		sb2.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb2.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();
vars.put(&quot;body&quot;, body);</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取接口返回结果" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

String isEncrypt = vars.get(&quot;isEncrypt&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			Failure = false;
			
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.新建product-固定参数" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/offerplus/makeOfferEnd.do?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="初始化数据" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

String [] appTypes = {&quot;A&quot;, &quot;I&quot;};
long L = System.currentTimeMillis();

Map map = new HashMap();
//此处为接口必传参数
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));

JSONArray ja = new JSONArray();
JSONObject json1 = new JSONObject();
JSONObject json2 = new JSONObject();
JSONObject json3 = new JSONObject();
JSONObject json4 = new JSONObject();
JSONObject json5 = new JSONObject();

json1.put(&quot;sheetName&quot;, &quot;MOQ&quot;);
json1.put(&quot;sheetValue&quot;, &quot;test&quot;);
ja.add(json1);
json2.put(&quot;sheetName&quot;, &quot;Brand Name&quot;);
json2.put(&quot;sheetValue&quot;, &quot;test&quot;);
ja.add(json2);
json3.put(&quot;sheetName&quot;, &quot;Stock&quot;);
json3.put(&quot;sheetValue&quot;, &quot;test&quot;);
ja.add(json3);
json4.put(&quot;sheetName&quot;, &quot;Port&quot;);
json4.put(&quot;sheetValue&quot;, &quot;test&quot;);
ja.add(json4);
json5.put(&quot;sheetName&quot;, &quot;CBM&quot;);
json5.put(&quot;sheetValue&quot;, &quot;test&quot;);
ja.add(json5);

map.put(&quot;offerName&quot;, &quot;this is test offer&quot;);
map.put(&quot;offerDescrip&quot;, &quot;this is test offer Descrption&quot;);
map.put(&quot;offerBuyPrice&quot;, &quot;12.3456&quot;);
map.put(&quot;offerSellPrice&quot;, &quot;45678.232&quot;);
map.put(&quot;offerBuyCry&quot;, &quot;AUD&quot;);
map.put(&quot;offerSellCry&quot;, &quot;RUB&quot;);
map.put(&quot;offerUnit&quot;, &quot;PCS&quot;);
map.put(&quot;contactStatus&quot;, &quot;1&quot;);
map.put(&quot;contactUserId&quot;, &quot;1000688&quot;);
map.put(&quot;makeOfferTime&quot;, String.valueOf(L));

map.put(&quot;offerIsCopy&quot;, &quot;0&quot;);
map.put(&quot;arrTagId&quot;, &quot;22727&quot;);
map.put(&quot;offerArrSheet&quot;, java.net.URLEncoder.encode(ja.toString()));
map.put(&quot;offerVoice&quot;, &quot;3feb361e-812b-4c76-ac44-321d8dc473b0.mp3&quot;);
map.put(&quot;offerImg&quot;, &quot;03bbcff1-f0c8-4b3d-8ddd-c5779a79cd4c&quot;);

String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (str[j].equals(&quot;offerArrSheet&quot;)) {
		sb2.append(str[j]).append(&quot;=&quot;).append(JSON.toJSON(ja));
	} else {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	}
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
		sb2.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb2.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);</stringProp>
            </BeanShellTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取接口返回结果" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;data&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">-1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;

String isEncrypt = vars.get(&quot;isEncrypt&quot;);
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			Failure = false;
			
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
	
}






</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="请求模板" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="BeanShell Timer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.commons.codec.digest.DigestUtils;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;

long L = System.currentTimeMillis();

Map map = new HashMap();

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//以下为接口可变参数
map.put(&quot;&quot;, &quot;&quot;);






//拼接入参
String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
	} 
}

//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);

String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();

vars.put(&quot;body&quot;, body);
</stringProp>
          </BeanShellTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1783684952">&quot;status&quot;:&quot;000&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">data</stringProp>
            <stringProp name="RegexExtractor.regex">(.+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">-1</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.assertions; 
import org.apache.jmeter.samplers.SampleResult; 
import org.apache.jmeter.assertions.AssertionResult; 
import org.json.*;
import test.AesUtils;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String isEncrypt = vars.get(&quot;isEncrypt&quot;).toLowerCase();
if (isEncrypt.equals(&quot;true&quot;)) {
	String KEY = &quot;6mpQfK5BSzzOfrZ6&quot;;
	AesUtils appAes = new AesUtils();
	String encrypt = vars.get(&quot;data&quot;);
	vars.put(&quot;encrypt&quot;, encrypt);
	if (encrypt.equals(&quot;-1&quot;)) {
		
		Failure = false;
	} else {
		try{
			byte[] un = appAes.uncompress(appAes.base64Decode(encrypt));
			String jsonStr = new String(java.net.URLDecoder.decode(appAes.aesDecryptByBytes(un,KEY)).getBytes(), &quot;UTF-8&quot;);
			FailureMessage = &quot;成功，解密的json串：&quot; + jsonStr; 
			vars.put(&quot;jsonStr&quot;, jsonStr);

//			// quotnId正则表达式规则
//	          String regEx = &quot;\&quot;quotnId\&quot;:(.+?)}&quot;;
//	          // 编译正则表达式
//	          Pattern pattern = Pattern.compile(regEx);
//	          // 忽略大小写的写法
//	          // Pattern pat = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);
//	          Matcher matcher = pattern.matcher(jsonStr);
//	          // 查找字符串中是否有匹配正则表达式的字符/字符串
//	          while(matcher.find()) {
//	        	   //获取匹配字符串
//		        String rs = matcher.group(1);
//		        vars.put(&quot;sendQuotnId&quot;, rs);
//               }
               
		}catch(Exception e){
			FailureMessage = &quot;失败，接口加密串：&quot; + encrypt; 
			Failure = true;
			
		}
	}
} else {
	Failure = false;
     //vars.put(&quot;jsonStr&quot;, &quot;-1&quot;);	
}






</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="常用各列表参数" enabled="false">
          <stringProp name="BeanShellSampler.query">String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};

//这个是字符串，用于json解析
String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing \&quot;}]&quot;;

String[] priceTermList = {&quot;FOB&quot;, &quot;EXW&quot;, &quot;FAS&quot;, &quot;FCA&quot;, &quot;CFR&quot;, &quot;CPT&quot;, &quot;CIF&quot;, &quot;CIP&quot;, &quot;DES&quot;, &quot;DAF&quot;, &quot;DEQ&quot;, &quot;DDP&quot;, &quot;DDU&quot;};

String[] unitList = {&quot;PCS&quot;, &quot;Set&quot;, &quot;Box&quot;, &quot;Pal&quot;, &quot;Doz&quot;, &quot;Pack&quot;, &quot;Pair&quot;, &quot;20ft&quot;, &quot;40ft&quot;, &quot;40ftHQ&quot;, &quot;g&quot;, &quot;kg&quot;, &quot;t&quot;, &quot;lb&quot;, &quot;ml&quot;, &quot;mm&quot;, &quot;l&quot;, &quot;cm&quot;, &quot;m&quot;, &quot;Inch&quot;, &quot;m2&quot;, &quot;w&quot;, &quot;v&quot;, &quot;a&quot;};

String[] paymentWayList = {&quot;T/T&quot;, &quot;L/C&quot;, &quot;D/P&quot;, &quot;Western Union&quot;, &quot;Money Gram&quot;};

String[] imageList = {&quot;0026a683-93d9-41fc-9c71-540cc9110f90&quot;,&quot;003e3b9a-0977-4d58-b492-397792424482&quot;,&quot;00412efc-c20d-4d36-8f2a-2aca32fd9044&quot;,&quot;004898c0-a52f-4c88-8d85-387a4ddd1002&quot;,&quot;004c047d-13d0-4d83-b473-1dbd3a9946c1&quot;,&quot;00588ea5-fe2b-46dc-91bc-7b339b832230&quot;,&quot;005ae564-bd63-4e0e-be7d-cfa7d4cb6784&quot;,&quot;00749fb9-ff53-4aad-a769-177dc600ca33&quot;,&quot;0087d105-fe6c-486c-aa3e-da1c3e1b1264&quot;,&quot;00c571c6-575e-4c0f-9802-61d1b5992c93&quot;,&quot;00cf9d13-68f1-4a7c-a4c2-786a8bbf3d01&quot;,&quot;00f2bc5a-f1cc-4d79-ab66-f3d710f94ba0&quot;,&quot;010bb208-74a2-4646-92eb-464c38a623af&quot;,&quot;0128f51e-09f4-4cba-bda7-47662df91e0b&quot;,&quot;012ec868-6dff-45b5-bcea-f874a512c78b&quot;,&quot;0136ec2c-2325-48ab-a36d-87544480c284&quot;,&quot;0137fb2d-0116-4fd9-9b80-975b329b3a9a&quot;,&quot;0146df9b-8bc5-4804-989f-ab8f005711a7&quot;,&quot;01766464-194c-43d4-84b6-1d86ddf8f5ec&quot;,&quot;01a4c1d1-8663-4e2c-8030-41c66029a9a8&quot;,&quot;01ad954d-8574-4044-95a7-d58889e45160&quot;,&quot;01af3e27-096c-4d3d-8071-d78e8cdbf026&quot;,&quot;01d3f1df-0130-4957-bae3-231df5e83df8&quot;,&quot;01db2317-a68a-48b5-be2b-fbac4aa1715a&quot;,&quot;01edd2da-2337-4cc7-9087-34ccdc0a5df0&quot;,&quot;023fd0d9-88bd-4d57-a212-a3098100b7c8&quot;,&quot;02795747-736f-47d2-bf84-a9ad395a6c02&quot;,&quot;02921b20-05b6-4eae-bd91-e6a1cc9e9767&quot;,&quot;0293b4f8-5fe6-437c-a02a-8f1787ef596d&quot;,&quot;02b234eb-c2ae-4a62-8e7f-ca6d52a2f9c0&quot;,&quot;02c80463-7485-45f8-a055-2eaff49cde3c&quot;,&quot;02ce094d-d253-4fe9-816a-0765c1dd452d&quot;,&quot;03161402-744b-4f4a-b7c6-22660d836c88&quot;,&quot;0351147e-0d42-4a63-a071-a175c1585f49&quot;,&quot;0363b7e1-678a-4880-a1d0-85d9345d563e&quot;,&quot;03701dfe-1676-47ab-8ea8-c8945b0409fa&quot;,&quot;039c2870-d0ff-49dd-94f1-2229e478a175&quot;,&quot;03ad6588-a179-4492-a121-8882eaa7164a&quot;,&quot;03add517-7b9d-4d63-940b-0b2f6cfc9bfa&quot;,&quot;03ea9321-4c16-47b5-94ae-5bea8ae0056f&quot;,&quot;04193181-5e01-4935-a891-2e7d2012437e&quot;,&quot;04332850-f747-4bd2-a76b-5c004a4a3a39&quot;,&quot;0446bbd8-5f15-4a77-aa22-ca8e0ef12465&quot;,&quot;0455f339-33f3-4882-bb2a-81b035aa731f&quot;,&quot;04638e3a-b950-4ba7-b4a7-415f634ebd4b&quot;,&quot;046a54de-0039-4891-a051-70e61e37ea3c&quot;};</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="调试脚本" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map;
import org.apache.commons.codec.digest.DigestUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;


long L = System.currentTimeMillis();
Map map = new HashMap();
Random random = new Random();
Date date = new Date();
DecimalFormat priceFormat = new DecimalFormat(&quot;.####&quot;);//确定price的格式
int beishu = 10*(random.nextInt(5)+1);//增加price的位数变化

//以下为接口必传参数
map.put(&quot;appType&quot;, vars.get(&quot;appType&quot;));
map.put(&quot;languagePack&quot;, vars.get(&quot;languagePack&quot;));
map.put(&quot;packageName&quot;, vars.get(&quot;packageName&quot;));
map.put(&quot;source&quot;, vars.get(&quot;source&quot;));
map.put(&quot;timestamp&quot;, String.valueOf(L));
map.put(&quot;tokenId&quot;, vars.get(&quot;tokenId&quot;));
map.put(&quot;version&quot;, vars.get(&quot;version&quot;));

//生成随机offerName
DateFormat df2 = DateFormat.getDateTimeInstance();//可以精确到时分秒
map.put(&quot;offerName&quot;, ${userId}+&quot;的offer建于:&quot;+df2.format(date).toString());

//生成随机description
map.put(&quot;offerDescrip&quot;, ${userId}+&quot;的offer description，该offer建于:&quot;+df2.format(date).toString());


//***开始生成buyprice和sellprice
//是否生成buyprice，并随机给予数值
String[] currencyList = {&quot;USD&quot;, &quot;CNY&quot;, &quot;EUR&quot;, &quot;GBP&quot;, &quot;CHF&quot;, &quot;JPY&quot;, &quot;RUB&quot;, &quot;INR&quot;, &quot;CAD&quot;, &quot;AUD&quot;, &quot;BRL&quot;, &quot;HKD&quot;, &quot;TRY&quot;, &quot;ILS&quot;, &quot;NZD&quot;, &quot;PKR&quot;, &quot;SGD&quot;, &quot;ZAR&quot;, &quot;THB&quot;, &quot;PHP&quot;, &quot;MXN&quot;, &quot;KRW&quot;, &quot;NOK&quot;, &quot;PLN&quot;, &quot;IDR&quot;, &quot;CLP&quot;, &quot;CZK&quot;, &quot;DKK&quot;, &quot;HUF&quot;, &quot;MYR&quot;, &quot;SEK&quot;, &quot;IQD&quot;, &quot;RSD&quot;, &quot;HRK&quot;, &quot;EGP&quot;, &quot;IRR&quot;, &quot;AED&quot;, &quot;SAR&quot;, &quot;QAR&quot;, &quot;LBP&quot;, &quot;LYD&quot;, &quot;JOD&quot;, &quot;BGN&quot;, &quot;VND&quot;, &quot;CUP&quot;, &quot;BOB&quot;, &quot;COP&quot;, &quot;DOP&quot;, &quot;ISK&quot;, &quot;MOP&quot;, &quot;MAD&quot;, &quot;TND&quot;};
int buyPriceIndex = random.nextInt(currencyList.length);
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	float f1 = random.nextFloat()*beishu;
	map.put(&quot;offerBuyPrice&quot;, priceFormat.format(f1).toString());
	//随机币种
	map.put(&quot;offerBuyCry&quot;, currencyList[buyPriceIndex]);
}

//是否生成sellprice，并随机给予数值
int sellPriceIndex = random.nextInt(currencyList.length);
if(random.nextInt(2)==0){
	//最多4位小数，且多余的0不显示
  	float f2 = random.nextFloat()*beishu;
	map.put(&quot;offerSellPrice&quot;, priceFormat.format(f2).toString());
	//随机币种
	map.put(&quot;offerSellCry&quot;, currencyList[sellPriceIndex]);
}
//赋予buyprice和sellprice结束


//***随机给予unit
String[] unitList = {&quot;PCS&quot;, &quot;Set&quot;, &quot;Box&quot;, &quot;Pal&quot;, &quot;Doz&quot;, &quot;Pack&quot;, &quot;Pair&quot;, &quot;20ft&quot;, &quot;40ft&quot;, &quot;40ftHQ&quot;, &quot;g&quot;, &quot;kg&quot;, &quot;t&quot;, &quot;lb&quot;, &quot;ml&quot;, &quot;mm&quot;, &quot;l&quot;, &quot;cm&quot;, &quot;m&quot;, &quot;Inch&quot;, &quot;m2&quot;, &quot;w&quot;, &quot;v&quot;, &quot;a&quot;};
int unitIndex = random.nextInt(unitList.length); 
map.put(&quot;offerUnit&quot;, unitList[unitIndex]);

//***随机取联系人种类和相应的userId：0=无，1=系统的，2=自定义的
int contactStatus = random.nextInt(3);
if(contactStatus==1){
	if(!vars.get(&quot;contactUserId&quot;).equals(&quot;-1&quot;)){
		map.put(&quot;contactUserId&quot;, vars.get(&quot;contactUserId&quot;));
		map.put(&quot;contactStatus&quot;, &quot;1&quot;);
	}else{
		log.info(&quot;*************系统人没获取到****************&quot;);
	}	
}else{
	if(contactStatus==2){
		if(!vars.get(&quot;interContactId&quot;).equals(&quot;-1&quot;)){
			map.put(&quot;contactUserId&quot;, vars.get(&quot;interContactId&quot;));
			map.put(&quot;contactStatus&quot;, &quot;2&quot;);
		}else{
			log.info(&quot;*************自定义人没获取到****************&quot;);	
		}
	}else{
		map.put(&quot;contactStatus&quot;, &quot;0&quot;);
	}
}

//***加入offer制作时间
map.put(&quot;makeOfferTime&quot;, String.valueOf(L));

//***是否copy的offer，0=no，1=yes
map.put(&quot;offerIsCopy&quot;, &quot;0&quot;);

//***打上offer tag
//是否传tag
if((!vars.get(&quot;offerTagId&quot;).equals(&quot;-1&quot;)) &amp;&amp; random.nextInt(2)==0){
	StringBuffer sb5 = new StringBuffer();
	String a = vars.get(&quot;offerTagId&quot;);
	String[] b = a.split(&quot;,&quot;);
	int c = random.nextInt(b.length)+1;
	for(int p=0; p&lt;c; p++){
	  if(p&lt;c-1){
	      sb5.append(b[p]).append(&quot;,&quot;);
	  }else{
	      sb5.append(b[p]);
	  }
	}
	map.put(&quot;arrTagId&quot;, sb5.toString());
}


////***随机赋予offer image
//String[] imageList = {&quot;Fr8us5eIpFOo2iyE-AHIti2I58Y_&quot;,&quot;0004b56e-257d-4a34-b8a8-2720fc8e7306&quot;,&quot;000598fc-6c3c-4cb2-a7d4-502c74327774&quot;,&quot;0026a683-93d9-41fc-9c71-540cc9110f90&quot;,&quot;003e3b9a-0977-4d58-b492-397792424482&quot;,&quot;003f518a-3342-4295-a6e8-1f26f08fc8c7&quot;,&quot;00412efc-c20d-4d36-8f2a-2aca32fd9044&quot;,&quot;0042e9b4-66e6-4511-8b6f-3b0e19ab458f&quot;,&quot;004898c0-a52f-4c88-8d85-387a4ddd1002&quot;,&quot;004c047d-13d0-4d83-b473-1dbd3a9946c1&quot;,&quot;00570069-d045-4e25-844e-65dda9b1e205&quot;,&quot;00588ea5-fe2b-46dc-91bc-7b339b832230&quot;,&quot;005ae564-bd63-4e0e-be7d-cfa7d4cb6784&quot;,&quot;006834d4-3232-4b47-b171-6328c847fcae&quot;,&quot;00749fb9-ff53-4aad-a769-177dc600ca33&quot;,&quot;00788e51-80d8-4770-a6ce-bb0cb0818171&quot;,&quot;007e26e3-ae41-49d7-9587-8e91ff313f7e&quot;,&quot;0087d105-fe6c-486c-aa3e-da1c3e1b1264&quot;,&quot;00a1aacf-f37d-43b5-82e5-ef0e693222ba&quot;,&quot;00b2d0e8-74f7-4408-bcce-7048e67ed5d3&quot;,&quot;00b9c653-0ff0-4346-8ab4-384620d4e557&quot;,&quot;00c090b8-ea74-4011-8f48-26ec28b66d59&quot;,&quot;00c2a505-9145-4791-a3ea-02ad9bd646a6&quot;,&quot;00c571c6-575e-4c0f-9802-61d1b5992c93&quot;,&quot;00c95903-8814-4b02-b357-944d73748dbc&quot;,&quot;00cec076-666f-441f-879c-bc2d33bc7097&quot;,&quot;00cf9d13-68f1-4a7c-a4c2-786a8bbf3d01&quot;,&quot;00f263ab-9e67-456f-926e-a420802a5588&quot;,&quot;00f2bc5a-f1cc-4d79-ab66-f3d710f94ba0&quot;,&quot;00fa6b9e-d3af-4628-b8c9-08f2e0d0a4d1&quot;,&quot;010bb208-74a2-4646-92eb-464c38a623af&quot;,&quot;010de938-ab66-4eea-af27-8499b86ab329&quot;,&quot;011284e7-69a6-473d-867d-7a182285928d&quot;,&quot;0128f51e-09f4-4cba-bda7-47662df91e0b&quot;,&quot;012beded-01f9-40eb-b5dd-a0992fa3b2f5&quot;,&quot;012ec868-6dff-45b5-bcea-f874a512c78b&quot;,&quot;01351f2c-57c5-4624-8432-3ea8b09a8851&quot;,&quot;0135bf12-1f30-4a3b-9ac1-c966be6628ae&quot;,&quot;0136d762-ab8d-4fda-9dc2-ec5fde2d482d&quot;,&quot;0136ec2c-2325-48ab-a36d-87544480c284&quot;,&quot;0137fb2d-0116-4fd9-9b80-975b329b3a9a&quot;,&quot;0146df9b-8bc5-4804-989f-ab8f005711a7&quot;,&quot;0155cea9-8e23-4921-ac0f-880deb7b9a29&quot;,&quot;0158b7d8-b032-446f-b0bd-408f8fa81347&quot;,&quot;016a9109-899f-4989-906e-7e2ff56589b2&quot;,&quot;016ada83-1018-4123-8137-22c3194fdc6b&quot;,&quot;01766464-194c-43d4-84b6-1d86ddf8f5ec&quot;,&quot;018fb511-5eb2-41a1-b020-a7a6f4d35603&quot;,&quot;01a4c1d1-8663-4e2c-8030-41c66029a9a8&quot;,&quot;01ad954d-8574-4044-95a7-d58889e45160&quot;,&quot;01af3e27-096c-4d3d-8071-d78e8cdbf026&quot;,&quot;01b57344-e25f-4275-9116-1c75e693c817&quot;,&quot;01ba3c24-3529-40a5-9221-f249bb117d27&quot;,&quot;01c0b400-5af9-42d5-82e1-252a8bdd3ae5&quot;,&quot;01c8519e-b578-4063-b29d-efc510ba53f1&quot;,&quot;01d3f1df-0130-4957-bae3-231df5e83df8&quot;,&quot;01db2317-a68a-48b5-be2b-fbac4aa1715a&quot;,&quot;01db6242-36a7-449e-a030-3220735955da&quot;,&quot;01dc75a8-d15b-4312-8b86-48a1657943cc&quot;,&quot;01e1b2c3-a92b-4f4a-bfc5-c929fa5da338&quot;,&quot;01ec7255-4bc9-4501-be64-b1dfd5b0f26e&quot;,&quot;01ec754a-ff91-4e19-a481-ce76283b179e&quot;,&quot;01edd2da-2337-4cc7-9087-34ccdc0a5df0&quot;,&quot;01efd348-5995-41d0-a8bb-5be4e056067d&quot;,&quot;0203c5f1-439a-4267-83d0-c0275334338a&quot;,&quot;02106d0e-1fa4-49ab-8407-7d0aadd07744&quot;,&quot;02118803-7188-4197-bd2a-ab0bd008a911&quot;,&quot;02124f88-5fad-4fd2-9593-54382b84c719&quot;,&quot;02131505-2cf5-4abd-8d5c-9b8953ac883e&quot;,&quot;0219ade2-da42-4cbc-ad31-eec3fbbe5a3e&quot;,&quot;021e80b7-317c-4ca8-9573-29d9f3de6b77&quot;,&quot;0221a44f-c6bd-454a-82ca-3dc1a3ea5718&quot;,&quot;0223828e-9bab-48b9-b051-7cb514161665&quot;,&quot;022a4811-4692-4e1f-a310-00c7dae4944e&quot;,&quot;022e1f17-3426-4b9f-ac70-1c1f2b3be766&quot;,&quot;023fd0d9-88bd-4d57-a212-a3098100b7c8&quot;,&quot;024bed74-7b40-4dfe-a003-81e6d06faa4c&quot;,&quot;0250bc44-0d85-42b0-be39-04283dcd0fae&quot;,&quot;025885d5-1564-4358-8c2b-d07e2958684a&quot;,&quot;0262d733-ba23-4055-a6fa-514d011ea87e&quot;,&quot;026831c7-d7bd-4d1e-b968-81710a169f26&quot;,&quot;026907b1-f888-49ed-8e82-6e5240ba172f&quot;,&quot;0273314f-9caf-4c7a-ad2d-52821eaef816&quot;,&quot;02795747-736f-47d2-bf84-a9ad395a6c02&quot;,&quot;027a9acb-a193-4b3c-a411-1f45bf217265&quot;,&quot;0282d59d-7e38-41a1-900d-6d2ddf54f173&quot;,&quot;0283e303-f592-49b2-90dc-e8efb92b5aea&quot;,&quot;02921b20-05b6-4eae-bd91-e6a1cc9e9767&quot;,&quot;0293b4f8-5fe6-437c-a02a-8f1787ef596d&quot;,&quot;029b79be-5339-4fe5-bbac-426540f2946f&quot;,&quot;02a3a5f6-625e-4586-a0be-ff8e1130223e&quot;,&quot;02aae52e-bd62-46c2-97a4-b42addb4fb23&quot;,&quot;02b234eb-c2ae-4a62-8e7f-ca6d52a2f9c0&quot;,&quot;02b46d81-b6ef-4cb4-b311-fc02a47e380c&quot;,&quot;02ba8231-7998-4a1e-b3d1-98c7bf0ec12a&quot;,&quot;02bd6a40-c425-4874-ae99-1e4a604a4376&quot;,&quot;02c22205-f970-45b6-98cf-97ee1025b791&quot;,&quot;02c7d4f2-508e-4bab-92c7-88f344026be1&quot;,&quot;02c80463-7485-45f8-a055-2eaff49cde3c&quot;,&quot;02c8276b-fb73-4da2-9265-fc15b26456c9&quot;,&quot;02ce094d-d253-4fe9-816a-0765c1dd452d&quot;,&quot;02e32c33-bd81-4270-8c0f-77ae12fddd55&quot;,&quot;02e480cf-bcba-4c29-8cfd-edf29426270c&quot;,&quot;02f5d4c7-d6ae-4385-a63b-61e983fb976d&quot;,&quot;02f7996f-8550-4678-8c01-412dbd3723a6&quot;,&quot;03161402-744b-4f4a-b7c6-22660d836c88&quot;,&quot;0319d906-55fe-45e8-89c2-3fa6aacd7e1e&quot;,&quot;031a2e79-dd1f-4691-b9d8-055ec06b6f05&quot;,&quot;031c606f-28fe-4e49-8877-6d7cee16a1a3&quot;,&quot;03205dbc-601e-4ec4-baae-923b27522d9e&quot;,&quot;03272538-b0b6-4b7f-92fe-e15964ca0ea3&quot;,&quot;03296a1f-010c-4746-b262-89a4f65610c4&quot;,&quot;032bf9e6-2992-446a-8f12-81ae335ba406&quot;,&quot;03338233-ac44-45ac-9744-3fd71f3127ea&quot;,&quot;0333b126-efbd-4778-8996-e499c822a15f&quot;,&quot;0337cdac-30fd-45cd-8109-b09914c54069&quot;,&quot;033e5a78-1e2b-4be0-8a29-e6f4f3749ffe&quot;,&quot;0340bc13-83af-43fd-9a9c-4c72ad805711&quot;,&quot;0342d6a3-ae7d-4b96-b506-6c5207e2788e&quot;,&quot;034cfd93-5d63-4c5a-947e-0b58fba7b6d2&quot;,&quot;0351147e-0d42-4a63-a071-a175c1585f49&quot;,&quot;035338ee-f8f1-401e-9096-dfd1452707ec&quot;,&quot;0363b7e1-678a-4880-a1d0-85d9345d563e&quot;,&quot;03699c38-a097-498b-b2ab-85eed4d135a2&quot;,&quot;03701dfe-1676-47ab-8ea8-c8945b0409fa&quot;,&quot;0373fe2d-435d-40f4-9636-dc853e795187&quot;,&quot;0380db5c-f125-4427-a08b-592800e804f5&quot;,&quot;038bec54-f865-4b36-9f69-68dc54aba0b2&quot;,&quot;038c445b-5ae2-4f6f-a588-425682ba390a&quot;,&quot;0397937f-4635-4eba-b863-1f8457c29ae7&quot;,&quot;039c2870-d0ff-49dd-94f1-2229e478a175&quot;,&quot;03a20de9-0b54-44e0-8530-b59c5ae54d37&quot;,&quot;03a5a206-25ac-43e3-b390-3928bb66744e&quot;,&quot;03ad6588-a179-4492-a121-8882eaa7164a&quot;,&quot;03add517-7b9d-4d63-940b-0b2f6cfc9bfa&quot;,&quot;03b8eb13-d271-41c0-8a8d-8316ae7fa557&quot;,&quot;03b9a474-d06b-4600-a7fd-bb2017ee1be6&quot;,&quot;03bbcff1-f0c8-4b3d-8ddd-c5779a79cd4c&quot;,&quot;03bfd283-440d-46ab-8694-1c2cd5aa7b1c&quot;,&quot;03c0e40e-660b-4fab-ae20-d40cf4d22233&quot;,&quot;03d6f18a-3319-4f7d-a4e5-b7637e38b024&quot;,&quot;03df5308-2df5-4cf2-933e-ae800fde82e5&quot;,&quot;03e0e558-3b37-421d-89a7-fd249a692f3f&quot;,&quot;03ea9321-4c16-47b5-94ae-5bea8ae0056f&quot;,&quot;03f761b8-eb18-46cf-96e2-93817831c689&quot;,&quot;040fc87b-fe11-4a4d-a106-19f40c6e2f04&quot;,&quot;0415a0d3-3901-4e95-89e5-108c7534e90b&quot;,&quot;04168c45-a5c2-453c-b644-ff9fda2dd023&quot;,&quot;04193181-5e01-4935-a891-2e7d2012437e&quot;,&quot;041dfe84-2c33-483d-b920-e48bd281d704&quot;,&quot;041e9141-e043-482f-bf40-b40581322052&quot;,&quot;0427394a-0de8-4f0a-85b3-92114724d1f5&quot;,&quot;0432aea8-09af-48ec-a58b-a90435508518&quot;,&quot;04332850-f747-4bd2-a76b-5c004a4a3a39&quot;,&quot;043b714d-45b8-4b82-a667-0c5338c7f48e&quot;,&quot;04410d65-3198-4436-b773-bdb9128e307e&quot;,&quot;0446bbd8-5f15-4a77-aa22-ca8e0ef12465&quot;,&quot;0455f339-33f3-4882-bb2a-81b035aa731f&quot;,&quot;04594935-f9fc-4b41-90d6-e342e697b105&quot;,&quot;04637049-295f-4a18-8cbc-0d0dd5a322a9&quot;,&quot;04638e3a-b950-4ba7-b4a7-415f634ebd4b&quot;,&quot;04648540-ad07-47ca-b980-6b46d3bec803&quot;,&quot;046a54de-0039-4891-a051-70e61e37ea3c&quot;};
//int imageNum = random.nextInt(9)+1;
//StringBuffer sb4 = new StringBuffer();
//sb4.append(&quot;&quot;);
//for(int m=0; m&lt;imageNum; m++){
//	if(m&lt;imageNum-1){
//		int imageIndex = random.nextInt(imageList.length);
//		sb4.append(imageList[imageIndex]).append(&quot;,&quot;);
//	}else{
//		int imageIndex = random.nextInt(imageList.length);
//		sb4.append(imageList[imageIndex]);
//	}
//}
//map.put(&quot;offerImg&quot;, sb4.toString());



////***生成随机offerSheetArray
////随机取产品sheet
//String jsonString = &quot;[{\&quot;sheetName\&quot;:\&quot;Warranty\&quot;},{\&quot;sheetName\&quot;:\&quot;CBM\&quot;},{\&quot;sheetName\&quot;:\&quot;Item No.\&quot;},{\&quot;sheetName\&quot;:\&quot;Colour\&quot;},{\&quot;sheetName\&quot;:\&quot;Material\&quot;},{\&quot;sheetName\&quot;:\&quot;Supply ability\&quot;},{\&quot;sheetName\&quot;:\&quot;Delivery time\&quot;},{\&quot;sheetName\&quot;:\&quot;Production time\&quot;},{\&quot;sheetName\&quot;:\&quot;Certification\&quot;},{\&quot;sheetName\&quot;:\&quot;Condition\&quot;},{\&quot;sheetName\&quot;:\&quot;Place of Origin\&quot;},{\&quot;sheetName\&quot;:\&quot;Terms\&quot;},{\&quot;sheetName\&quot;:\&quot;Pcs/box\&quot;},{\&quot;sheetName\&quot;:\&quot;Weight\&quot;},{\&quot;sheetName\&quot;:\&quot;Size\&quot;},{\&quot;sheetName\&quot;:\&quot;Packing\&quot;},{\&quot;sheetName\&quot;:\&quot;MOQ\&quot;}]&quot;;
////这里如果用List&lt;String&gt; list = new ArrayList&lt;String&gt;();会报错
//list = new ArrayList();
//list = JSON.parseArray(jsonString, String.class);
////num=随机取得sheet个数，如果指定sheet个数可以赋值给它
//int num = random.nextInt(list.size());
//ArrayList sheetArray = new ArrayList();
//for(int i=0; i&lt;num; i++){
//	int newNum = random.nextInt(list.size());
//	sheetArray.add(list.get(newNum));
//	list.remove(newNum);
//}
//
//JSONArray ja = new JSONArray();
//for(int j=0; j&lt;num; j++){
//	JSONObject jo = new JSONObject();
//	JSONObject sheet = JSONObject.parseObject(sheetArray.get(j).toString());
//	String sheetName = sheet.getString(&quot;sheetName&quot;);
//	jo.put(&quot;sheetName&quot;, sheetName);
//	
//	// 随机给sheetValue赋值
//	String str = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789欧加网络科技有限公司&quot;;
//	StringBuffer sb3 = new StringBuffer();
//	int sb3length = random.nextInt(str.length());
//	for (int k = 0; k &lt; sb3length; k++) {
//		int number = random.nextInt(str.length());
//		sb3.append(str.charAt(number));
//	}
//	jo.put(&quot;sheetValue&quot;,sb3.toString());
//	ja.add(jo);
//}
////map.put(&quot;offerArrSheet&quot;, java.net.URLEncoder.encode(ja.toString()));
//if(random.nextInt(2)==0){
//	map.put(&quot;offerArrSheet&quot;, ja.toString());
//}else{
//	map.put(&quot;offerArrSheet&quot;, &quot;[]&quot;);	
//}
//
////sheet生成结束
////***入参赋值完毕



String []str = new String[map.size()];

Iterator it = map.keySet().iterator();  

StringBuffer sb = new StringBuffer();
sb.append(&quot;&quot;);
StringBuffer sb2 = new StringBuffer();
sb2.append(&quot;&quot;);
int i = 0;
while(it.hasNext()) {
	str[i] = (String) it.next();
	i ++;
}

//排序
Arrays.sort(str);

for (int j = 0; j &lt; str.length; j ++) {
	sb.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	if (str[j].equals(&quot;offerArrSheet&quot;)) {
		sb2.append(str[j]).append(&quot;=&quot;).append(JSON.toJSON(ja));
	} else {
		sb2.append(str[j]).append(&quot;=&quot;).append(map.get(str[j]));
	}
	if (j != str.length -1) {
		sb.append(&quot;&amp;&quot;);
		sb2.append(&quot;&amp;&quot;);
	} 
}


//对入参进行MD5签名
String sign = DigestUtils.md5Hex(sb2.toString() + &quot;&amp;99ca919b-4c6e-46d7-b25e-e0cbb9003436&quot;);
String body = sb.append(&quot;&amp;sign=&quot;).append(sign).toString();
vars.put(&quot;body&quot;, body);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
